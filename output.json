[
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\library.json",
        "content": "{\n    \"name\": \"OStad\",\n    \"description\": \"a boilerplate for ESP32 arduino board\",\n    \"keywords\": \"esp32, boilerplate, database, wifi, file\",\n    \"authors\": [\n        {\n            \"name\": \"Hadi Alipoor\",\n            \"url\": \"https://github.com/HadAlipoor\",\n            \"maintainer\": true\n        }\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/HadAlipoor/OStad.git\"\n    },\n    \"version\": \"1.0.4\",\n    \"license\": \"MIT license\",\n    \"homepage\": \"OStad.Wiki\",\n    \"frameworks\": \"arduino\",\n    \"platforms\": \"espressif32\",\n    \"headers\": \"OStad.h\",\n    \"export\": {\n        \"exclude\": [\n            \"html_pages\",\n            \"postman_files\",\n            \"web_pages\"\n        ]\n    },\n    \"build\": {\n        \"srcFilter\": [\n            \"+<*.c>\",\n            \"+<*.cpp>\",\n            \"+<*.h>\",\n            \"+<platforms/esp/32/*.cpp>\"\n        ],\n        \"libArchive\": false\n    }\n}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\upload_debug.py",
        "content": "import time\nimport requests\nimport socket\nimport os\nimport sys\nimport json\nimport shutil\nfrom subprocess import check_output\n\n\n\ndef get_arduino_cli(dir_path):\n    f = open(dir_path + '\\\\.vscode\\\\arduino.json')\n    data = json.load(f)\n    ino_file_basename = os.path.splitext(os.path.basename(data['sketch']))[0]\n    try:\n        socket.inet_aton(data['port'])\n        compile_command = ['arduino-cli', 'compile', '--fqbn', data['board'], '--output-dir', dir_path + '\\\\.vscode\\\\.build', dir_path]\n        # valid IP address\n        # espota_path = \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\1.0.6\\\\tools\\\\espota.py\"\n        bin_path = os.path.join(dir_path, '.vscode', '.build', f'{ino_file_basename}.ino.bin')\n        # upload_command = ['python', espota_path, '-d' , '-i', data['port'], '-f', bin_path]\n        url = 'http://' + data['port'] + '/upload_sketch'\n        upload_command = ['ip', url, bin_path]        \n    except socket.error:\n        compile_command = ['arduino-cli', 'compile', '--fqbn', data['board'] , dir_path + '\\\\.vscode\\\\.build']\n        upload_command = ['arduino-cli', 'upload', '-p', data['port'], '--fqbn', data['board'], dir_path + '\\\\.vscode\\\\.build']\n    f.close()\n    return compile_command, upload_command\n\ndef build_and_upload(dir_path):\n    compile_command, upload_command = (get_arduino_cli(dir_path))\n\n    print(compile_command)\n    try:\n        print('Verifing ...')\n        now = time.time()\n        out = check_output(compile_command)\n        verify_time = time.time()\n        difference = int(verify_time - now)\n        print('Verified Successfully at ' + str(difference) + ' seconds.')\n        print(upload_command)\n        if(upload_command[0] == 'ip'):\n            try:\n                # Open the file in binary mode\n                with open(upload_command[2], 'rb') as file:\n                    # Perform the POST request\n                    response = requests.post(upload_command[1], files={'file': file})\n\n                # Print the response\n                print(response.text)\n            except Exception as ex:\n                print('Upload to IP failed.')\n            return\n        print('Uploading ...')\n        out2 = check_output(upload_command)\n        upload_time = time.time()\n        difference = int(upload_time - verify_time)\n        print('Uploaded To board at ' + str(difference) + ' seconds.')\n    except Exception as ex:\n        print('Compile Failed.' + str(ex))\n    \n\ndef changed_code(dir_path, source_file_path, new_file_path, debug_mode = '-d'):\n    source_file = open(source_file_path, 'r')\n    if(source_file_path[-4:] == '.ino'):\n        new_file = open(dir_path + '\\\\.vscode\\\\.build\\\\.build.ino', 'w')\n    else:\n        new_file = open(new_file_path, 'w')\n    count = 0\n    debug_line = False\n    breakpoint_type = 'bp'\n    arguments = []\n    declared_debug_pause = False\n    while True:\n        count += 1\n    \n        # Get next line from file\n        line = source_file.readline()\n        if not line:\n            break\n        \n        space_before_code = ''\n        if(line.__contains__('//bp') or line.__contains__('//sv')):\n            if(line.__contains__('//bps')):\n                breakpoint_type = 'bps'\n            elif(line.__contains__('//svs')):\n                breakpoint_type = 'svs'\n            elif(line.__contains__('//bp')):\n                breakpoint_type = 'bp'\n            elif(line.__contains__('//sv')):\n                breakpoint_type = 'sv'\n            \n            debug_line = True\n            last_braket = False\n            var_break_end_pos = 0\n            finish = False\n            for i in range(len(line)-1):\n                if (finish):\n                    break\n                if(line[i:i+2] == '//'):\n                    for d in range(i):\n                        space_before_code += ' '\n                if(line[i:i+1] == '['):\n                    for j in range(i+1, len(line) - 1, 1):\n                        if(line[j:j+1] == ']'):\n                            for t in range(j+1,len(line)-1,1):\n                                if(line[t:t+1] == ']'):\n                                    last_braket = False\n                                    var_break_end_pos = t\n                                    break\n                                else:\n                                    last_braket = True\n                            else:\n                                last_braket = True\n\n                            if(not last_braket):\n                                j = var_break_end_pos+1\n                                continue\n                            var_start_index = i + 1\n                            var_end_brakket = j\n                            for k in range(i+1, j, 1):\n                                if(line[k:k+1] == ','):\n                                    arguments.append(line[var_start_index:k])\n                                    var_start_index = k+1\n                                    k += 1\n                            if(last_braket):\n                                arguments.append(line[var_start_index:var_end_brakket])\n                                \n                                finish = True\n                                break\n            \n\n            \n        elif (debug_line and debug_mode == '-d'):\n            print( 'Debug Mode' if debug_mode == '-d' else 'Build Mode' )\n            \n            print('----------------------------------------------------------------------------------------------------------------')\n            print(\"File: {} ; Line{}: {}\".format(source_file_path,count, line.strip()))\n            if(breakpoint_type != 'bps' and breakpoint_type != 'svs'):\n                new_file.write(space_before_code + '//debug genrated.')\n                new_file.write(space_before_code +'Serial.println(\\\"'+line[:-1]+'\\\");\\n')\n                new_file.write(space_before_code +'Serial.println(\\\"Break Point at ' + source_file_path.replace('\\\\','\\\\\\\\') + ' ; Line : ' + str(count) + '\\\");\\n')\n                \n            for argg in arguments:\n                if(not argg.__contains__(\"\\\"\")):\n                    new_file.write(space_before_code +\"Serial.print(\")\n                    new_file.write(\"\\\" | \" + argg + \" = \\\"); \")\n                new_file.write('Serial.print(')\n                new_file.write(argg+\");\\n\")\n            new_file.write(space_before_code +'Serial.println(\\\"\\\");\\n')\n            while_content = \"\"\"_debug_pause = true;\\nSerial.println(\\\"Press \\\\\\\"p\\\\\\\" key to pass ...\\\");while(_debug_pause){\n if (Serial.available() > 0) {\n     String incomingString = Serial.readString();\n     if (incomingString == \"p\\\\n\") {\n         _debug_pause = false;\n         Serial.println(\"passed\");\n     }\n }\n}\n\"\"\"\n\n            if(breakpoint_type == 'bp' or breakpoint_type == 'bps' and not declared_debug_pause):\n                new_file.write('bool ' + while_content)\n                declared_debug_pause = True\n            elif(breakpoint_type == 'bp' or breakpoint_type == 'bps' and declared_debug_pause):\n                new_file.write(while_content)\n            new_file.write(line)\n            debug_line = False\n            arguments = []\n        else:\n            new_file.write(line)\n\n        \n    \n    source_file.close()\n    new_file.close()\n\n\ndef change_file(dir_path, source_file_path, debug_mode = '-d'):\n    new_file_path = dir_path + \"\\\\.vscode\\\\.build\" + source_file_path[len(dir_path):]\n    new_file_folder = ''\n    for i in range(len(new_file_path)-1,0,-1):\n        if(new_file_path[i:i+1] == '\\\\'):\n            new_file_folder = new_file_path[:i]\n            if not os.path.exists(new_file_folder):\n                os.makedirs(new_file_folder)\n            break\n    # print(\"new_file_directory = \"+ new_file_folder)\n    changed_code(dir_path, source_file_path, new_file_path, debug_mode)\n    # file_obj.writelines(new_content)\n    # file_obj.close()\n    # print(\"file \"+ new_file_path + \" Created.\")\n\ndef get_files(dir_path):\n    res = []\n\n    # Iterate directory\n    for path in os.listdir(dir_path):\n        # check if current path is a file\n        if os.path.isfile(os.path.join(dir_path, path)):\n            if(path[-4:] == \".ino\" or path[-4:] == \".cpp\" or path[-2:] == \".h\"):\n                res.append(dir_path + '\\\\' + path)\n        else:\n            if(path[0:1] != '.'):\n                res.extend(get_files(dir_path + '\\\\' + path))\n                # print(dir_path + '\\\\' + path)\n    return res\n\ndef main():\n    if(sys.argv.__len__() > 2):\n        debug_mode = sys.argv[2]\n    if(sys.argv.__len__() > 1):\n        folder_path = sys.argv[1]\n        if(folder_path == '-c'):\n            folder_path = os.getcwd()\n    else:\n        folder_path = os.getcwd()\n        debug_mode = '-b'\n    \n    print('Folder Path : ' + folder_path)\n    print( 'Debug Mode' if debug_mode == '-d' else 'Build Mode' )\n\n    files = get_files(folder_path)\n    if(os.path.exists(folder_path +  \"\\\\.vscode\\\\.build\")):\n        shutil.rmtree(folder_path +  \"\\\\.vscode\\\\.build\")\n    index = 0\n    for file_path in files:\n        index += 1\n        change_file(folder_path,file_path, debug_mode)\n    build_and_upload(folder_path)\n\n\nif __name__ == \"__main__\":\n   main()\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.vscode\\arduino.json",
        "content": "{\n    \"configuration\": \"JTAGAdapter=default,PSRAM=disabled,PartitionScheme=huge_app,CPUFreq=240,FlashMode=qio,FlashFreq=80,FlashSize=4M,UploadSpeed=921600,LoopCore=1,EventsCore=1,DebugLevel=none,EraseFlash=none\",\n    \"board\": \"esp32:esp32:esp32\",\n    \"port\": \"COM4\",\n    \"sketch\": \"Examples\\\\Growify\\\\Growify.ino\"\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.vscode\\c_cpp_properties.json",
        "content": "{\n    \"version\": 4,\n    \"configurations\": [\n        {\n            \"name\": \"windows-gcc-x86\",\n            \"compilerPath\": \"C:/MinGW/bin/gcc.exe\",\n            \"compilerArgs\": [\n                \"-mlongcalls\",\n                \"-Wno-frame-address\",\n                \"-ffunction-sections\",\n                \"-fdata-sections\",\n                \"-Wno-error=unused-function\",\n                \"-Wno-error=unused-variable\",\n                \"-Wno-error=deprecated-declarations\",\n                \"-Wno-unused-parameter\",\n                \"-Wno-sign-compare\",\n                \"-freorder-blocks\",\n                \"-Wwrite-strings\",\n                \"-fstack-protector\",\n                \"-fstrict-volatile-bitfields\",\n                \"-Wno-error=unused-but-set-variable\",\n                \"-fno-jump-tables\",\n                \"-fno-tree-switch-conversion\",\n                \"-std=gnu++11\",\n                \"-fexceptions\",\n                \"-fno-rtti\"\n            ],\n            \"intelliSenseMode\": \"windows-gcc-x86\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"forcedInclude\": [\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\cores\\\\esp32\\\\Arduino.h\"\n            ],\n            \"cStandard\": \"${default}\",\n            \"cppStandard\": \"${default}\",\n            \"defines\": [\n                \"HAVE_CONFIG_H\",\n                \"MBEDTLS_CONFIG_FILE=\\\"mbedtls/esp_config.h\\\"\",\n                \"UNITY_INCLUDE_CONFIG_H\",\n                \"WITH_POSIX\",\n                \"_GNU_SOURCE\",\n                \"IDF_VER=\\\"v4.4.4\\\"\",\n                \"ESP_PLATFORM\",\n                \"_POSIX_READER_WRITER_LOCKS\",\n                \"F_CPU=240000000L\",\n                \"ARDUINO=10607\",\n                \"ARDUINO_ESP32_DEV\",\n                \"ARDUINO_ARCH_ESP32\",\n                \"ARDUINO_BOARD=\\\"ESP32_DEV\\\"\",\n                \"ARDUINO_VARIANT=\\\"esp32\\\"\",\n                \"ARDUINO_PARTITION_default\",\n                \"ESP32\",\n                \"CORE_DEBUG_LEVEL=0\",\n                \"ARDUINO_RUNNING_CORE=1\",\n                \"ARDUINO_EVENT_RUNNING_CORE=1\",\n                \"ARDUINO_USB_CDC_ON_BOOT=0\",\n                \"__DBL_MIN_EXP__=(-1021)\",\n                \"__FLT32X_MAX_EXP__=1024\",\n                \"__cpp_attributes=200809\",\n                \"__UINT_LEAST16_MAX__=0xffff\",\n                \"__ATOMIC_ACQUIRE=2\",\n                \"__FLT_MIN__=1.1754943508222875e-38F\",\n                \"__GCC_IEC_559_COMPLEX=0\",\n                \"__cpp_aggregate_nsdmi=201304\",\n                \"__UINT_LEAST8_TYPE__=unsigned char\",\n                \"__INTMAX_C(c)=c ## LL\",\n                \"__CHAR_BIT__=8\",\n                \"__UINT8_MAX__=0xff\",\n                \"__WINT_MAX__=0xffffffffU\",\n                \"__FLT32_MIN_EXP__=(-125)\",\n                \"__cpp_static_assert=200410\",\n                \"__ORDER_LITTLE_ENDIAN__=1234\",\n                \"__SIZE_MAX__=0xffffffffU\",\n                \"__WCHAR_MAX__=0xffff\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1\",\n                \"__DBL_DENORM_MIN__=double(4.9406564584124654e-324L)\",\n                \"__GCC_ATOMIC_CHAR_LOCK_FREE=2\",\n                \"__GCC_IEC_559=0\",\n                \"__FLT32X_DECIMAL_DIG__=17\",\n                \"__FLT_EVAL_METHOD__=0\",\n                \"__cpp_binary_literals=201304\",\n                \"__FLT64_DECIMAL_DIG__=17\",\n                \"__GCC_ATOMIC_CHAR32_T_LOCK_FREE=2\",\n                \"__cpp_variadic_templates=200704\",\n                \"__UINT_FAST64_MAX__=0xffffffffffffffffULL\",\n                \"__SIG_ATOMIC_TYPE__=int\",\n                \"__DBL_MIN_10_EXP__=(-307)\",\n                \"__FINITE_MATH_ONLY__=0\",\n                \"__cpp_variable_templates=201304\",\n                \"__GNUC_PATCHLEVEL__=0\",\n                \"__FLT32_HAS_DENORM__=1\",\n                \"__UINT_FAST8_MAX__=0xffffffffU\",\n                \"__has_include(STR)=__has_include__(STR)\",\n                \"__DEC64_MAX_EXP__=385\",\n                \"__INT8_C(c)=c\",\n                \"__INT_LEAST8_WIDTH__=8\",\n                \"__UINT_LEAST64_MAX__=0xffffffffffffffffULL\",\n                \"__SHRT_MAX__=0x7fff\",\n                \"__LDBL_MAX__=1.7976931348623157e+308L\",\n                \"__UINT_LEAST8_MAX__=0xff\",\n                \"__GCC_ATOMIC_BOOL_LOCK_FREE=2\",\n                \"__UINTMAX_TYPE__=long long unsigned int\",\n                \"__DEC32_EPSILON__=1E-6DF\",\n                \"__FLT_EVAL_METHOD_TS_18661_3__=0\",\n                \"__CHAR_UNSIGNED__=1\",\n                \"__UINT32_MAX__=0xffffffffU\",\n                \"__GXX_EXPERIMENTAL_CXX0X__=1\",\n                \"__LDBL_MAX_EXP__=1024\",\n                \"__WINT_MIN__=0U\",\n                \"__INT_LEAST16_WIDTH__=16\",\n                \"__SCHAR_MAX__=0x7f\",\n                \"__WCHAR_MIN__=0\",\n                \"__INT64_C(c)=c ## LL\",\n                \"__DBL_DIG__=15\",\n                \"__GCC_ATOMIC_POINTER_LOCK_FREE=2\",\n                \"__SIZEOF_INT__=4\",\n                \"__SIZEOF_POINTER__=4\",\n                \"__GCC_ATOMIC_CHAR16_T_LOCK_FREE=2\",\n                \"__USER_LABEL_PREFIX__\",\n                \"__STDC_HOSTED__=1\",\n                \"__LDBL_HAS_INFINITY__=1\",\n                \"__XTENSA_EL__=1\",\n                \"__FLT32_DIG__=6\",\n                \"__FLT_EPSILON__=1.1920928955078125e-7F\",\n                \"__GXX_WEAK__=1\",\n                \"__SHRT_WIDTH__=16\",\n                \"__LDBL_MIN__=2.2250738585072014e-308L\",\n                \"__DEC32_MAX__=9.999999E96DF\",\n                \"__cpp_threadsafe_static_init=200806\",\n                \"__FLT32X_HAS_INFINITY__=1\",\n                \"__INT32_MAX__=0x7fffffff\",\n                \"__INT_WIDTH__=32\",\n                \"__SIZEOF_LONG__=4\",\n                \"__UINT16_C(c)=c\",\n                \"__PTRDIFF_WIDTH__=32\",\n                \"__DECIMAL_DIG__=17\",\n                \"__FLT64_EPSILON__=2.2204460492503131e-16F64\",\n                \"__INTMAX_WIDTH__=64\",\n                \"__FLT64_MIN_EXP__=(-1021)\",\n                \"__has_include_next(STR)=__has_include_next__(STR)\",\n                \"__LDBL_HAS_QUIET_NAN__=1\",\n                \"__FLT64_MANT_DIG__=53\",\n                \"__GNUC__=8\",\n                \"__GXX_RTTI=1\",\n                \"__cpp_delegating_constructors=200604\",\n                \"__FLT_HAS_DENORM__=1\",\n                \"__SIZEOF_LONG_DOUBLE__=8\",\n                \"__BIGGEST_ALIGNMENT__=16\",\n                \"__STDC_UTF_16__=1\",\n                \"__FLT64_MAX_10_EXP__=308\",\n                \"__FLT32_HAS_INFINITY__=1\",\n                \"__DBL_MAX__=double(1.7976931348623157e+308L)\",\n                \"__cpp_raw_strings=200710\",\n                \"__INT_FAST32_MAX__=0x7fffffff\",\n                \"__DBL_HAS_INFINITY__=1\",\n                \"__DEC32_MIN_EXP__=(-94)\",\n                \"__INTPTR_WIDTH__=32\",\n                \"__FLT32X_HAS_DENORM__=1\",\n                \"__INT_FAST16_TYPE__=int\",\n                \"__LDBL_HAS_DENORM__=1\",\n                \"__cplusplus=201402L\",\n                \"__cpp_ref_qualifiers=200710\",\n                \"__DEC128_MAX__=9.999999999999999999999999999999999E6144DL\",\n                \"__INT_LEAST32_MAX__=0x7fffffff\",\n                \"__DEC32_MIN__=1E-95DF\",\n                \"__DEPRECATED=1\",\n                \"__cpp_rvalue_references=200610\",\n                \"__DBL_MAX_EXP__=1024\",\n                \"__WCHAR_WIDTH__=16\",\n                \"__FLT32_MAX__=3.4028234663852886e+38F32\",\n                \"__DEC128_EPSILON__=1E-33DL\",\n                \"__PTRDIFF_MAX__=0x7fffffff\",\n                \"__FLT32_HAS_QUIET_NAN__=1\",\n                \"__GNUG__=8\",\n                \"__LONG_LONG_MAX__=0x7fffffffffffffffLL\",\n                \"__SIZEOF_SIZE_T__=4\",\n                \"__cpp_rvalue_reference=200610\",\n                \"__cpp_nsdmi=200809\",\n                \"__SIZEOF_WINT_T__=4\",\n                \"__LONG_LONG_WIDTH__=64\",\n                \"__cpp_initializer_lists=200806\",\n                \"__FLT32_MAX_EXP__=128\",\n                \"__cpp_hex_float=201603\",\n                \"__GXX_ABI_VERSION=1013\",\n                \"__FLT_MIN_EXP__=(-125)\",\n                \"__cpp_lambdas=200907\",\n                \"__INT_FAST64_TYPE__=long long int\",\n                \"__FP_FAST_FMAF=1\",\n                \"__FLT64_DENORM_MIN__=4.9406564584124654e-324F64\",\n                \"__DBL_MIN__=double(2.2250738585072014e-308L)\",\n                \"__FLT32X_EPSILON__=2.2204460492503131e-16F32x\",\n                \"__FLT64_MIN_10_EXP__=(-307)\",\n                \"__DEC128_MIN__=1E-6143DL\",\n                \"__REGISTER_PREFIX__\",\n                \"__UINT16_MAX__=0xffff\",\n                \"__DBL_HAS_DENORM__=1\",\n                \"__FLT32_MIN__=1.1754943508222875e-38F32\",\n                \"__UINT8_TYPE__=unsigned char\",\n                \"__NO_INLINE__=1\",\n                \"__FLT_MANT_DIG__=24\",\n                \"__LDBL_DECIMAL_DIG__=17\",\n                \"__VERSION__=\\\"8.4.0\\\"\",\n                \"__UINT64_C(c)=c ## ULL\",\n                \"__cpp_unicode_characters=200704\",\n                \"__cpp_decltype_auto=201304\",\n                \"__GCC_ATOMIC_INT_LOCK_FREE=2\",\n                \"__FLT32_MANT_DIG__=24\",\n                \"__FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__\",\n                \"__SCHAR_WIDTH__=8\",\n                \"__INT32_C(c)=c\",\n                \"__DEC64_EPSILON__=1E-15DD\",\n                \"__ORDER_PDP_ENDIAN__=3412\",\n                \"__DEC128_MIN_EXP__=(-6142)\",\n                \"__FLT32_MAX_10_EXP__=38\",\n                \"__INT_FAST32_TYPE__=int\",\n                \"__UINT_LEAST16_TYPE__=short unsigned int\",\n                \"__INT16_MAX__=0x7fff\",\n                \"__cpp_rtti=199711\",\n                \"__SIZE_TYPE__=unsigned int\",\n                \"__UINT64_MAX__=0xffffffffffffffffULL\",\n                \"__INT8_TYPE__=signed char\",\n                \"__cpp_digit_separators=201309\",\n                \"__ELF__=1\",\n                \"__xtensa__=1\",\n                \"__FLT_RADIX__=2\",\n                \"__INT_LEAST16_TYPE__=short int\",\n                \"__LDBL_EPSILON__=2.2204460492503131e-16L\",\n                \"__UINTMAX_C(c)=c ## ULL\",\n                \"__SIG_ATOMIC_MAX__=0x7fffffff\",\n                \"__GCC_ATOMIC_WCHAR_T_LOCK_FREE=2\",\n                \"__SIZEOF_PTRDIFF_T__=4\",\n                \"__FLT32X_MANT_DIG__=53\",\n                \"__FLT32X_MIN_EXP__=(-1021)\",\n                \"__DEC32_SUBNORMAL_MIN__=0.000001E-95DF\",\n                \"__INT_FAST16_MAX__=0x7fffffff\",\n                \"__FLT64_DIG__=15\",\n                \"__UINT_FAST32_MAX__=0xffffffffU\",\n                \"__UINT_LEAST64_TYPE__=long long unsigned int\",\n                \"__FLT_HAS_QUIET_NAN__=1\",\n                \"__FLT_MAX_10_EXP__=38\",\n                \"__LONG_MAX__=0x7fffffffL\",\n                \"__DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL\",\n                \"__FLT_HAS_INFINITY__=1\",\n                \"__cpp_unicode_literals=200710\",\n                \"__UINT_FAST16_TYPE__=unsigned int\",\n                \"__DEC64_MAX__=9.999999999999999E384DD\",\n                \"__INT_FAST32_WIDTH__=32\",\n                \"__CHAR16_TYPE__=short unsigned int\",\n                \"__PRAGMA_REDEFINE_EXTNAME=1\",\n                \"__SIZE_WIDTH__=32\",\n                \"__INT_LEAST16_MAX__=0x7fff\",\n                \"__DEC64_MANT_DIG__=16\",\n                \"__INT64_MAX__=0x7fffffffffffffffLL\",\n                \"__UINT_LEAST32_MAX__=0xffffffffU\",\n                \"__FLT32_DENORM_MIN__=1.4012984643248171e-45F32\",\n                \"__GCC_ATOMIC_LONG_LOCK_FREE=2\",\n                \"__SIG_ATOMIC_WIDTH__=32\",\n                \"__INT_LEAST64_TYPE__=long long int\",\n                \"__INT16_TYPE__=short int\",\n                \"__INT_LEAST8_TYPE__=signed char\",\n                \"__DEC32_MAX_EXP__=97\",\n                \"__INT_FAST8_MAX__=0x7fffffff\",\n                \"__INTPTR_MAX__=0x7fffffff\",\n                \"__cpp_sized_deallocation=201309\",\n                \"__cpp_range_based_for=200907\",\n                \"__FLT64_HAS_QUIET_NAN__=1\",\n                \"__FLT32_MIN_10_EXP__=(-37)\",\n                \"__EXCEPTIONS=1\",\n                \"__LDBL_MANT_DIG__=53\",\n                \"__DBL_HAS_QUIET_NAN__=1\",\n                \"__FLT64_HAS_INFINITY__=1\",\n                \"__SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)\",\n                \"__cpp_return_type_deduction=201304\",\n                \"__INTPTR_TYPE__=int\",\n                \"__UINT16_TYPE__=short unsigned int\",\n                \"__WCHAR_TYPE__=short unsigned int\",\n                \"__SIZEOF_FLOAT__=4\",\n                \"__UINTPTR_MAX__=0xffffffffU\",\n                \"__INT_FAST64_WIDTH__=64\",\n                \"__DEC64_MIN_EXP__=(-382)\",\n                \"__cpp_decltype=200707\",\n                \"__FLT32_DECIMAL_DIG__=9\",\n                \"__INT_FAST64_MAX__=0x7fffffffffffffffLL\",\n                \"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1\",\n                \"__FLT_DIG__=6\",\n                \"__UINT_FAST64_TYPE__=long long unsigned int\",\n                \"__INT_MAX__=0x7fffffff\",\n                \"__INT64_TYPE__=long long int\",\n                \"__FLT_MAX_EXP__=128\",\n                \"__DBL_MANT_DIG__=53\",\n                \"__cpp_inheriting_constructors=201511\",\n                \"__INT_LEAST64_MAX__=0x7fffffffffffffffLL\",\n                \"__FP_FAST_FMAF32=1\",\n                \"__DEC64_MIN__=1E-383DD\",\n                \"__WINT_TYPE__=unsigned int\",\n                \"__UINT_LEAST32_TYPE__=unsigned int\",\n                \"__SIZEOF_SHORT__=2\",\n                \"__LDBL_MIN_EXP__=(-1021)\",\n                \"__FLT64_MAX__=1.7976931348623157e+308F64\",\n                \"__WINT_WIDTH__=32\",\n                \"__INT_LEAST8_MAX__=0x7f\",\n                \"__FLT32X_MAX_10_EXP__=308\",\n                \"__WCHAR_UNSIGNED__=1\",\n                \"__LDBL_MAX_10_EXP__=308\",\n                \"__ATOMIC_RELAXED=0\",\n                \"__DBL_EPSILON__=double(2.2204460492503131e-16L)\",\n                \"__XTENSA_WINDOWED_ABI__=1\",\n                \"__UINT8_C(c)=c\",\n                \"__FLT64_MAX_EXP__=1024\",\n                \"__INT_LEAST32_TYPE__=int\",\n                \"__SIZEOF_WCHAR_T__=2\",\n                \"__INT_FAST8_TYPE__=int\",\n                \"__GNUC_STDC_INLINE__=1\",\n                \"__FLT64_HAS_DENORM__=1\",\n                \"__FLT32_EPSILON__=1.1920928955078125e-7F32\",\n                \"__DBL_DECIMAL_DIG__=17\",\n                \"__STDC_UTF_32__=1\",\n                \"__INT_FAST8_WIDTH__=32\",\n                \"__DEC_EVAL_METHOD__=2\",\n                \"__FLT32X_MAX__=1.7976931348623157e+308F32x\",\n                \"__XTENSA__=1\",\n                \"__ORDER_BIG_ENDIAN__=4321\",\n                \"__cpp_runtime_arrays=198712\",\n                \"__UINT64_TYPE__=long long unsigned int\",\n                \"__UINT32_C(c)=c ## U\",\n                \"__INTMAX_MAX__=0x7fffffffffffffffLL\",\n                \"__cpp_alias_templates=200704\",\n                \"__BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__\",\n                \"__FLT_DENORM_MIN__=1.4012984643248171e-45F\",\n                \"__INT8_MAX__=0x7f\",\n                \"__LONG_WIDTH__=32\",\n                \"__UINT_FAST32_TYPE__=unsigned int\",\n                \"__CHAR32_TYPE__=unsigned int\",\n                \"__FLT_MAX__=3.4028234663852886e+38F\",\n                \"__cpp_constexpr=201304\",\n                \"__INT32_TYPE__=int\",\n                \"__SIZEOF_DOUBLE__=8\",\n                \"__cpp_exceptions=199711\",\n                \"__FLT_MIN_10_EXP__=(-37)\",\n                \"__FLT64_MIN__=2.2250738585072014e-308F64\",\n                \"__INT_LEAST32_WIDTH__=32\",\n                \"__INTMAX_TYPE__=long long int\",\n                \"__DEC128_MAX_EXP__=6145\",\n                \"__FLT32X_HAS_QUIET_NAN__=1\",\n                \"__ATOMIC_CONSUME=1\",\n                \"__GNUC_MINOR__=4\",\n                \"__INT_FAST16_WIDTH__=32\",\n                \"__UINTMAX_MAX__=0xffffffffffffffffULL\",\n                \"__DEC32_MANT_DIG__=7\",\n                \"__FLT32X_DENORM_MIN__=4.9406564584124654e-324F32x\",\n                \"__DBL_MAX_10_EXP__=308\",\n                \"__LDBL_DENORM_MIN__=4.9406564584124654e-324L\",\n                \"__INT16_C(c)=c\",\n                \"__cpp_generic_lambdas=201304\",\n                \"__STDC__=1\",\n                \"__FLT32X_DIG__=15\",\n                \"__PTRDIFF_TYPE__=int\",\n                \"__ATOMIC_SEQ_CST=5\",\n                \"__UINT32_TYPE__=unsigned int\",\n                \"__FLT32X_MIN_10_EXP__=(-307)\",\n                \"__UINTPTR_TYPE__=unsigned int\",\n                \"__DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD\",\n                \"__DEC128_MANT_DIG__=34\",\n                \"__LDBL_MIN_10_EXP__=(-307)\",\n                \"__SIZEOF_LONG_LONG__=8\",\n                \"__cpp_user_defined_literals=200809\",\n                \"__GCC_ATOMIC_LLONG_LOCK_FREE=1\",\n                \"__FLT32X_MIN__=2.2250738585072014e-308F32x\",\n                \"__LDBL_DIG__=15\",\n                \"__FLT_DECIMAL_DIG__=9\",\n                \"__UINT_FAST16_MAX__=0xffffffffU\",\n                \"__GCC_ATOMIC_SHORT_LOCK_FREE=2\",\n                \"__INT_LEAST64_WIDTH__=64\",\n                \"__UINT_FAST8_TYPE__=unsigned int\",\n                \"__cpp_init_captures=201304\",\n                \"__ATOMIC_ACQ_REL=4\",\n                \"__ATOMIC_RELEASE=3\",\n                \"USBCON\"\n            ]\n        },\n        {\n            \"name\": \"Arduino\",\n            \"compilerPath\": \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\bin\\\\xtensa-esp32-elf-g++\",\n            \"compilerArgs\": [\n                \"-mlongcalls\",\n                \"-Wno-frame-address\",\n                \"-ffunction-sections\",\n                \"-fdata-sections\",\n                \"-Wno-error=unused-function\",\n                \"-Wno-error=unused-variable\",\n                \"-Wno-error=deprecated-declarations\",\n                \"-Wno-unused-parameter\",\n                \"-Wno-sign-compare\",\n                \"-freorder-blocks\",\n                \"-Wwrite-strings\",\n                \"-fstack-protector\",\n                \"-fstrict-volatile-bitfields\",\n                \"-Wno-error=unused-but-set-variable\",\n                \"-fno-jump-tables\",\n                \"-fno-tree-switch-conversion\",\n                \"-std=gnu++11\",\n                \"-fexceptions\",\n                \"-fno-rtti\"\n            ],\n            \"intelliSenseMode\": \"gcc-x64\",\n            \"includePath\": [\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\newlib\\\\platform_include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\freertos\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\freertos\\\\include\\\\esp_additions\\\\freertos\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\freertos\\\\port\\\\xtensa\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\freertos\\\\include\\\\esp_additions\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hw_support\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hw_support\\\\include\\\\soc\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hw_support\\\\include\\\\soc\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hw_support\\\\port\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hw_support\\\\port\\\\esp32\\\\private_include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\heap\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\log\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\lwip\\\\include\\\\apps\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\lwip\\\\include\\\\apps\\\\sntp\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\lwip\\\\lwip\\\\src\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\lwip\\\\port\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\lwip\\\\port\\\\esp32\\\\include\\\\arch\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\soc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\soc\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\soc\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\hal\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\hal\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\hal\\\\platform_port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_rom\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_rom\\\\include\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_rom\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_system\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_system\\\\port\\\\soc\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_system\\\\port\\\\public_compat\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\xtensa\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\xtensa\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\driver\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\driver\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_pm\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_ringbuf\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\efuse\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\efuse\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\vfs\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_wifi\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_event\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_netif\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_eth\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\tcpip_adapter\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_phy\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_phy\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_ipc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\app_trace\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_timer\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\mbedtls\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\mbedtls\\\\mbedtls\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\mbedtls\\\\esp_crt_bundle\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\app_update\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\spi_flash\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bootloader_support\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\nvs_flash\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\pthread\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_gdbstub\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_gdbstub\\\\xtensa\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_gdbstub\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espcoredump\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espcoredump\\\\include\\\\port\\\\xtensa\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\wpa_supplicant\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\wpa_supplicant\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\wpa_supplicant\\\\esp_supplicant\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\ieee802154\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\console\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\asio\\\\asio\\\\asio\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\asio\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\common\\\\osi\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\include\\\\esp32\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\common\\\\api\\\\include\\\\api\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\common\\\\btc\\\\profile\\\\esp\\\\blufi\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\common\\\\btc\\\\profile\\\\esp\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\host\\\\bluedroid\\\\api\\\\include\\\\api\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_common\\\\tinycrypt\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_core\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_core\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_core\\\\storage\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\btc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_models\\\\common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_models\\\\client\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\mesh_models\\\\server\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\api\\\\core\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\api\\\\models\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\bt\\\\esp_ble_mesh\\\\api\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\cbor\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\unity\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\unity\\\\unity\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\cmock\\\\CMock\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\coap\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\coap\\\\libcoap\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\nghttp\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\nghttp\\\\nghttp2\\\\lib\\\\includes\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-tls\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-tls\\\\esp-tls-crypto\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_adc_cal\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_hid\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\tcp_transport\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_http_client\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_http_server\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_https_ota\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_https_server\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_lcd\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_lcd\\\\interface\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\protobuf-c\\\\protobuf-c\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\protocomm\\\\include\\\\common\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\protocomm\\\\include\\\\security\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\protocomm\\\\include\\\\transports\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\mdns\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_local_ctrl\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\sdmmc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_serial_slave_link\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_websocket_client\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\expat\\\\expat\\\\expat\\\\lib\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\expat\\\\port\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\wear_levelling\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\fatfs\\\\diskio\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\fatfs\\\\vfs\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\fatfs\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\freemodbus\\\\freemodbus\\\\common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\idf_test\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\idf_test\\\\include\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\jsmn\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\json\\\\cJSON\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\libsodium\\\\libsodium\\\\src\\\\libsodium\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\libsodium\\\\port_include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\mqtt\\\\esp-mqtt\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\openssl\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\perfmon\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\spiffs\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\ulp\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\wifi_provisioning\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\rmaker_common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_diagnostics\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\rtc_store\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_insights\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\json_parser\\\\upstream\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\json_parser\\\\upstream\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\json_generator\\\\upstream\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_schedule\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp_secure_cert_mgr\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_rainmaker\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\gpio_button\\\\button\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\qrcode\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\ws2812_led\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp_littlefs\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\tool\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\typedef\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\image\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\math\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\nn\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\layer\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\detect\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-dl\\\\include\\\\model_zoo\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-sr\\\\src\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-sr\\\\esp-tts\\\\esp_tts_chinese\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp-sr\\\\include\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp32-camera\\\\driver\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\esp32-camera\\\\conversions\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\dotprod\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\support\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\hann\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\blackman\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\blackman_harris\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\blackman_nuttall\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\nuttall\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\windows\\\\flat_top\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\iir\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\fir\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\add\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\sub\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\mul\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\addc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\mulc\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\math\\\\sqrt\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\matrix\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\fft\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\dct\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\conv\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\common\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\kalman\\\\ekf\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\espressif__esp-dsp\\\\modules\\\\kalman\\\\ekf_imu13states\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\include\\\\fb_gfx\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\tools\\\\sdk\\\\esp32\\\\qio_qspi\\\\include\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\cores\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\variants\\\\esp32\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\ESPBoilerplate\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\HTTPS_Server_Generic\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\Functional-Vlpp\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\FS\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\LittleFS\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\SD\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\SPI\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\ArduinoJson\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\RTClib\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\Adafruit_BusIO\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\Wire\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\WiFi\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\PCF8574\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\LiquidCrystal_I2C\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\Adafruit-GFX-Library-master\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\Adafruit_SSD1306-master\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\HTTPClient\\\\src\",\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\libraries\\\\WiFiClientSecure\\\\src\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\xtensa-esp32-elf\\\\include\\\\c++\\\\8.4.0\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\xtensa-esp32-elf\\\\include\\\\c++\\\\8.4.0\\\\xtensa-esp32-elf\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\xtensa-esp32-elf\\\\include\\\\c++\\\\8.4.0\\\\backward\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\lib\\\\gcc\\\\xtensa-esp32-elf\\\\8.4.0\\\\include\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\lib\\\\gcc\\\\xtensa-esp32-elf\\\\8.4.0\\\\include-fixed\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\xtensa-esp32-elf\\\\sys-include\",\n                \"c:\\\\users\\\\aivwa 1\\\\appdata\\\\local\\\\arduino15\\\\packages\\\\esp32\\\\tools\\\\xtensa-esp32-elf-gcc\\\\esp-2021r2-patch5-8.4.0\\\\xtensa-esp32-elf\\\\include\"\n            ],\n            \"forcedInclude\": [\n                \"C:\\\\Users\\\\AIVWA 1\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\esp32\\\\hardware\\\\esp32\\\\2.0.9\\\\cores\\\\esp32\\\\Arduino.h\"\n            ],\n            \"cStandard\": \"c11\",\n            \"cppStandard\": \"c++11\",\n            \"defines\": [\n                \"HAVE_CONFIG_H\",\n                \"MBEDTLS_CONFIG_FILE=\\\"mbedtls/esp_config.h\\\"\",\n                \"UNITY_INCLUDE_CONFIG_H\",\n                \"WITH_POSIX\",\n                \"_GNU_SOURCE\",\n                \"IDF_VER=\\\"v4.4.4\\\"\",\n                \"ESP_PLATFORM\",\n                \"_POSIX_READER_WRITER_LOCKS\",\n                \"F_CPU=240000000L\",\n                \"ARDUINO=10607\",\n                \"ARDUINO_ESP32_DEV\",\n                \"ARDUINO_ARCH_ESP32\",\n                \"ARDUINO_BOARD=\\\"ESP32_DEV\\\"\",\n                \"ARDUINO_VARIANT=\\\"esp32\\\"\",\n                \"ARDUINO_PARTITION_huge_app\",\n                \"ESP32\",\n                \"CORE_DEBUG_LEVEL=0\",\n                \"ARDUINO_RUNNING_CORE=1\",\n                \"ARDUINO_EVENT_RUNNING_CORE=1\",\n                \"ARDUINO_USB_CDC_ON_BOOT=0\",\n                \"__DBL_MIN_EXP__=(-1021)\",\n                \"__FLT32X_MAX_EXP__=1024\",\n                \"__cpp_attributes=200809\",\n                \"__UINT_LEAST16_MAX__=0xffff\",\n                \"__ATOMIC_ACQUIRE=2\",\n                \"__FLT_MIN__=1.1754943508222875e-38F\",\n                \"__GCC_IEC_559_COMPLEX=0\",\n                \"__cpp_aggregate_nsdmi=201304\",\n                \"__UINT_LEAST8_TYPE__=unsigned char\",\n                \"__INTMAX_C(c)=c ## LL\",\n                \"__CHAR_BIT__=8\",\n                \"__UINT8_MAX__=0xff\",\n                \"__WINT_MAX__=0xffffffffU\",\n                \"__FLT32_MIN_EXP__=(-125)\",\n                \"__cpp_static_assert=200410\",\n                \"__ORDER_LITTLE_ENDIAN__=1234\",\n                \"__SIZE_MAX__=0xffffffffU\",\n                \"__WCHAR_MAX__=0xffff\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1\",\n                \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1\",\n                \"__DBL_DENORM_MIN__=double(4.9406564584124654e-324L)\",\n                \"__GCC_ATOMIC_CHAR_LOCK_FREE=2\",\n                \"__GCC_IEC_559=0\",\n                \"__FLT32X_DECIMAL_DIG__=17\",\n                \"__FLT_EVAL_METHOD__=0\",\n                \"__cpp_binary_literals=201304\",\n                \"__FLT64_DECIMAL_DIG__=17\",\n                \"__GCC_ATOMIC_CHAR32_T_LOCK_FREE=2\",\n                \"__cpp_variadic_templates=200704\",\n                \"__UINT_FAST64_MAX__=0xffffffffffffffffULL\",\n                \"__SIG_ATOMIC_TYPE__=int\",\n                \"__DBL_MIN_10_EXP__=(-307)\",\n                \"__FINITE_MATH_ONLY__=0\",\n                \"__cpp_variable_templates=201304\",\n                \"__GNUC_PATCHLEVEL__=0\",\n                \"__FLT32_HAS_DENORM__=1\",\n                \"__UINT_FAST8_MAX__=0xffffffffU\",\n                \"__has_include(STR)=__has_include__(STR)\",\n                \"__DEC64_MAX_EXP__=385\",\n                \"__INT8_C(c)=c\",\n                \"__INT_LEAST8_WIDTH__=8\",\n                \"__UINT_LEAST64_MAX__=0xffffffffffffffffULL\",\n                \"__SHRT_MAX__=0x7fff\",\n                \"__LDBL_MAX__=1.7976931348623157e+308L\",\n                \"__UINT_LEAST8_MAX__=0xff\",\n                \"__GCC_ATOMIC_BOOL_LOCK_FREE=2\",\n                \"__UINTMAX_TYPE__=long long unsigned int\",\n                \"__DEC32_EPSILON__=1E-6DF\",\n                \"__FLT_EVAL_METHOD_TS_18661_3__=0\",\n                \"__CHAR_UNSIGNED__=1\",\n                \"__UINT32_MAX__=0xffffffffU\",\n                \"__GXX_EXPERIMENTAL_CXX0X__=1\",\n                \"__LDBL_MAX_EXP__=1024\",\n                \"__WINT_MIN__=0U\",\n                \"__INT_LEAST16_WIDTH__=16\",\n                \"__SCHAR_MAX__=0x7f\",\n                \"__WCHAR_MIN__=0\",\n                \"__INT64_C(c)=c ## LL\",\n                \"__DBL_DIG__=15\",\n                \"__GCC_ATOMIC_POINTER_LOCK_FREE=2\",\n                \"__SIZEOF_INT__=4\",\n                \"__SIZEOF_POINTER__=4\",\n                \"__GCC_ATOMIC_CHAR16_T_LOCK_FREE=2\",\n                \"__USER_LABEL_PREFIX__\",\n                \"__STDC_HOSTED__=1\",\n                \"__LDBL_HAS_INFINITY__=1\",\n                \"__XTENSA_EL__=1\",\n                \"__FLT32_DIG__=6\",\n                \"__FLT_EPSILON__=1.1920928955078125e-7F\",\n                \"__GXX_WEAK__=1\",\n                \"__SHRT_WIDTH__=16\",\n                \"__LDBL_MIN__=2.2250738585072014e-308L\",\n                \"__DEC32_MAX__=9.999999E96DF\",\n                \"__cpp_threadsafe_static_init=200806\",\n                \"__FLT32X_HAS_INFINITY__=1\",\n                \"__INT32_MAX__=0x7fffffff\",\n                \"__INT_WIDTH__=32\",\n                \"__SIZEOF_LONG__=4\",\n                \"__UINT16_C(c)=c\",\n                \"__PTRDIFF_WIDTH__=32\",\n                \"__DECIMAL_DIG__=17\",\n                \"__FLT64_EPSILON__=2.2204460492503131e-16F64\",\n                \"__INTMAX_WIDTH__=64\",\n                \"__FLT64_MIN_EXP__=(-1021)\",\n                \"__has_include_next(STR)=__has_include_next__(STR)\",\n                \"__LDBL_HAS_QUIET_NAN__=1\",\n                \"__FLT64_MANT_DIG__=53\",\n                \"__GNUC__=8\",\n                \"__GXX_RTTI=1\",\n                \"__cpp_delegating_constructors=200604\",\n                \"__FLT_HAS_DENORM__=1\",\n                \"__SIZEOF_LONG_DOUBLE__=8\",\n                \"__BIGGEST_ALIGNMENT__=16\",\n                \"__STDC_UTF_16__=1\",\n                \"__FLT64_MAX_10_EXP__=308\",\n                \"__FLT32_HAS_INFINITY__=1\",\n                \"__DBL_MAX__=double(1.7976931348623157e+308L)\",\n                \"__cpp_raw_strings=200710\",\n                \"__INT_FAST32_MAX__=0x7fffffff\",\n                \"__DBL_HAS_INFINITY__=1\",\n                \"__DEC32_MIN_EXP__=(-94)\",\n                \"__INTPTR_WIDTH__=32\",\n                \"__FLT32X_HAS_DENORM__=1\",\n                \"__INT_FAST16_TYPE__=int\",\n                \"__LDBL_HAS_DENORM__=1\",\n                \"__cplusplus=201402L\",\n                \"__cpp_ref_qualifiers=200710\",\n                \"__DEC128_MAX__=9.999999999999999999999999999999999E6144DL\",\n                \"__INT_LEAST32_MAX__=0x7fffffff\",\n                \"__DEC32_MIN__=1E-95DF\",\n                \"__DEPRECATED=1\",\n                \"__cpp_rvalue_references=200610\",\n                \"__DBL_MAX_EXP__=1024\",\n                \"__WCHAR_WIDTH__=16\",\n                \"__FLT32_MAX__=3.4028234663852886e+38F32\",\n                \"__DEC128_EPSILON__=1E-33DL\",\n                \"__PTRDIFF_MAX__=0x7fffffff\",\n                \"__FLT32_HAS_QUIET_NAN__=1\",\n                \"__GNUG__=8\",\n                \"__LONG_LONG_MAX__=0x7fffffffffffffffLL\",\n                \"__SIZEOF_SIZE_T__=4\",\n                \"__cpp_rvalue_reference=200610\",\n                \"__cpp_nsdmi=200809\",\n                \"__SIZEOF_WINT_T__=4\",\n                \"__LONG_LONG_WIDTH__=64\",\n                \"__cpp_initializer_lists=200806\",\n                \"__FLT32_MAX_EXP__=128\",\n                \"__cpp_hex_float=201603\",\n                \"__GXX_ABI_VERSION=1013\",\n                \"__FLT_MIN_EXP__=(-125)\",\n                \"__cpp_lambdas=200907\",\n                \"__INT_FAST64_TYPE__=long long int\",\n                \"__FP_FAST_FMAF=1\",\n                \"__FLT64_DENORM_MIN__=4.9406564584124654e-324F64\",\n                \"__DBL_MIN__=double(2.2250738585072014e-308L)\",\n                \"__FLT32X_EPSILON__=2.2204460492503131e-16F32x\",\n                \"__FLT64_MIN_10_EXP__=(-307)\",\n                \"__DEC128_MIN__=1E-6143DL\",\n                \"__REGISTER_PREFIX__\",\n                \"__UINT16_MAX__=0xffff\",\n                \"__DBL_HAS_DENORM__=1\",\n                \"__FLT32_MIN__=1.1754943508222875e-38F32\",\n                \"__UINT8_TYPE__=unsigned char\",\n                \"__NO_INLINE__=1\",\n                \"__FLT_MANT_DIG__=24\",\n                \"__LDBL_DECIMAL_DIG__=17\",\n                \"__VERSION__=\\\"8.4.0\\\"\",\n                \"__UINT64_C(c)=c ## ULL\",\n                \"__cpp_unicode_characters=200704\",\n                \"__cpp_decltype_auto=201304\",\n                \"__GCC_ATOMIC_INT_LOCK_FREE=2\",\n                \"__FLT32_MANT_DIG__=24\",\n                \"__FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__\",\n                \"__SCHAR_WIDTH__=8\",\n                \"__INT32_C(c)=c\",\n                \"__DEC64_EPSILON__=1E-15DD\",\n                \"__ORDER_PDP_ENDIAN__=3412\",\n                \"__DEC128_MIN_EXP__=(-6142)\",\n                \"__FLT32_MAX_10_EXP__=38\",\n                \"__INT_FAST32_TYPE__=int\",\n                \"__UINT_LEAST16_TYPE__=short unsigned int\",\n                \"__INT16_MAX__=0x7fff\",\n                \"__cpp_rtti=199711\",\n                \"__SIZE_TYPE__=unsigned int\",\n                \"__UINT64_MAX__=0xffffffffffffffffULL\",\n                \"__INT8_TYPE__=signed char\",\n                \"__cpp_digit_separators=201309\",\n                \"__ELF__=1\",\n                \"__xtensa__=1\",\n                \"__FLT_RADIX__=2\",\n                \"__INT_LEAST16_TYPE__=short int\",\n                \"__LDBL_EPSILON__=2.2204460492503131e-16L\",\n                \"__UINTMAX_C(c)=c ## ULL\",\n                \"__SIG_ATOMIC_MAX__=0x7fffffff\",\n                \"__GCC_ATOMIC_WCHAR_T_LOCK_FREE=2\",\n                \"__SIZEOF_PTRDIFF_T__=4\",\n                \"__FLT32X_MANT_DIG__=53\",\n                \"__FLT32X_MIN_EXP__=(-1021)\",\n                \"__DEC32_SUBNORMAL_MIN__=0.000001E-95DF\",\n                \"__INT_FAST16_MAX__=0x7fffffff\",\n                \"__FLT64_DIG__=15\",\n                \"__UINT_FAST32_MAX__=0xffffffffU\",\n                \"__UINT_LEAST64_TYPE__=long long unsigned int\",\n                \"__FLT_HAS_QUIET_NAN__=1\",\n                \"__FLT_MAX_10_EXP__=38\",\n                \"__LONG_MAX__=0x7fffffffL\",\n                \"__DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL\",\n                \"__FLT_HAS_INFINITY__=1\",\n                \"__cpp_unicode_literals=200710\",\n                \"__UINT_FAST16_TYPE__=unsigned int\",\n                \"__DEC64_MAX__=9.999999999999999E384DD\",\n                \"__INT_FAST32_WIDTH__=32\",\n                \"__CHAR16_TYPE__=short unsigned int\",\n                \"__PRAGMA_REDEFINE_EXTNAME=1\",\n                \"__SIZE_WIDTH__=32\",\n                \"__INT_LEAST16_MAX__=0x7fff\",\n                \"__DEC64_MANT_DIG__=16\",\n                \"__INT64_MAX__=0x7fffffffffffffffLL\",\n                \"__UINT_LEAST32_MAX__=0xffffffffU\",\n                \"__FLT32_DENORM_MIN__=1.4012984643248171e-45F32\",\n                \"__GCC_ATOMIC_LONG_LOCK_FREE=2\",\n                \"__SIG_ATOMIC_WIDTH__=32\",\n                \"__INT_LEAST64_TYPE__=long long int\",\n                \"__INT16_TYPE__=short int\",\n                \"__INT_LEAST8_TYPE__=signed char\",\n                \"__DEC32_MAX_EXP__=97\",\n                \"__INT_FAST8_MAX__=0x7fffffff\",\n                \"__INTPTR_MAX__=0x7fffffff\",\n                \"__cpp_sized_deallocation=201309\",\n                \"__cpp_range_based_for=200907\",\n                \"__FLT64_HAS_QUIET_NAN__=1\",\n                \"__FLT32_MIN_10_EXP__=(-37)\",\n                \"__EXCEPTIONS=1\",\n                \"__LDBL_MANT_DIG__=53\",\n                \"__DBL_HAS_QUIET_NAN__=1\",\n                \"__FLT64_HAS_INFINITY__=1\",\n                \"__SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)\",\n                \"__cpp_return_type_deduction=201304\",\n                \"__INTPTR_TYPE__=int\",\n                \"__UINT16_TYPE__=short unsigned int\",\n                \"__WCHAR_TYPE__=short unsigned int\",\n                \"__SIZEOF_FLOAT__=4\",\n                \"__UINTPTR_MAX__=0xffffffffU\",\n                \"__INT_FAST64_WIDTH__=64\",\n                \"__DEC64_MIN_EXP__=(-382)\",\n                \"__cpp_decltype=200707\",\n                \"__FLT32_DECIMAL_DIG__=9\",\n                \"__INT_FAST64_MAX__=0x7fffffffffffffffLL\",\n                \"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1\",\n                \"__FLT_DIG__=6\",\n                \"__UINT_FAST64_TYPE__=long long unsigned int\",\n                \"__INT_MAX__=0x7fffffff\",\n                \"__INT64_TYPE__=long long int\",\n                \"__FLT_MAX_EXP__=128\",\n                \"__DBL_MANT_DIG__=53\",\n                \"__cpp_inheriting_constructors=201511\",\n                \"__INT_LEAST64_MAX__=0x7fffffffffffffffLL\",\n                \"__FP_FAST_FMAF32=1\",\n                \"__DEC64_MIN__=1E-383DD\",\n                \"__WINT_TYPE__=unsigned int\",\n                \"__UINT_LEAST32_TYPE__=unsigned int\",\n                \"__SIZEOF_SHORT__=2\",\n                \"__LDBL_MIN_EXP__=(-1021)\",\n                \"__FLT64_MAX__=1.7976931348623157e+308F64\",\n                \"__WINT_WIDTH__=32\",\n                \"__INT_LEAST8_MAX__=0x7f\",\n                \"__FLT32X_MAX_10_EXP__=308\",\n                \"__WCHAR_UNSIGNED__=1\",\n                \"__LDBL_MAX_10_EXP__=308\",\n                \"__ATOMIC_RELAXED=0\",\n                \"__DBL_EPSILON__=double(2.2204460492503131e-16L)\",\n                \"__XTENSA_WINDOWED_ABI__=1\",\n                \"__UINT8_C(c)=c\",\n                \"__FLT64_MAX_EXP__=1024\",\n                \"__INT_LEAST32_TYPE__=int\",\n                \"__SIZEOF_WCHAR_T__=2\",\n                \"__INT_FAST8_TYPE__=int\",\n                \"__GNUC_STDC_INLINE__=1\",\n                \"__FLT64_HAS_DENORM__=1\",\n                \"__FLT32_EPSILON__=1.1920928955078125e-7F32\",\n                \"__DBL_DECIMAL_DIG__=17\",\n                \"__STDC_UTF_32__=1\",\n                \"__INT_FAST8_WIDTH__=32\",\n                \"__DEC_EVAL_METHOD__=2\",\n                \"__FLT32X_MAX__=1.7976931348623157e+308F32x\",\n                \"__XTENSA__=1\",\n                \"__ORDER_BIG_ENDIAN__=4321\",\n                \"__cpp_runtime_arrays=198712\",\n                \"__UINT64_TYPE__=long long unsigned int\",\n                \"__UINT32_C(c)=c ## U\",\n                \"__INTMAX_MAX__=0x7fffffffffffffffLL\",\n                \"__cpp_alias_templates=200704\",\n                \"__BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__\",\n                \"__FLT_DENORM_MIN__=1.4012984643248171e-45F\",\n                \"__INT8_MAX__=0x7f\",\n                \"__LONG_WIDTH__=32\",\n                \"__UINT_FAST32_TYPE__=unsigned int\",\n                \"__CHAR32_TYPE__=unsigned int\",\n                \"__FLT_MAX__=3.4028234663852886e+38F\",\n                \"__cpp_constexpr=201304\",\n                \"__INT32_TYPE__=int\",\n                \"__SIZEOF_DOUBLE__=8\",\n                \"__cpp_exceptions=199711\",\n                \"__FLT_MIN_10_EXP__=(-37)\",\n                \"__FLT64_MIN__=2.2250738585072014e-308F64\",\n                \"__INT_LEAST32_WIDTH__=32\",\n                \"__INTMAX_TYPE__=long long int\",\n                \"__DEC128_MAX_EXP__=6145\",\n                \"__FLT32X_HAS_QUIET_NAN__=1\",\n                \"__ATOMIC_CONSUME=1\",\n                \"__GNUC_MINOR__=4\",\n                \"__INT_FAST16_WIDTH__=32\",\n                \"__UINTMAX_MAX__=0xffffffffffffffffULL\",\n                \"__DEC32_MANT_DIG__=7\",\n                \"__FLT32X_DENORM_MIN__=4.9406564584124654e-324F32x\",\n                \"__DBL_MAX_10_EXP__=308\",\n                \"__LDBL_DENORM_MIN__=4.9406564584124654e-324L\",\n                \"__INT16_C(c)=c\",\n                \"__cpp_generic_lambdas=201304\",\n                \"__STDC__=1\",\n                \"__FLT32X_DIG__=15\",\n                \"__PTRDIFF_TYPE__=int\",\n                \"__ATOMIC_SEQ_CST=5\",\n                \"__UINT32_TYPE__=unsigned int\",\n                \"__FLT32X_MIN_10_EXP__=(-307)\",\n                \"__UINTPTR_TYPE__=unsigned int\",\n                \"__DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD\",\n                \"__DEC128_MANT_DIG__=34\",\n                \"__LDBL_MIN_10_EXP__=(-307)\",\n                \"__SIZEOF_LONG_LONG__=8\",\n                \"__cpp_user_defined_literals=200809\",\n                \"__GCC_ATOMIC_LLONG_LOCK_FREE=1\",\n                \"__FLT32X_MIN__=2.2250738585072014e-308F32x\",\n                \"__LDBL_DIG__=15\",\n                \"__FLT_DECIMAL_DIG__=9\",\n                \"__UINT_FAST16_MAX__=0xffffffffU\",\n                \"__GCC_ATOMIC_SHORT_LOCK_FREE=2\",\n                \"__INT_LEAST64_WIDTH__=64\",\n                \"__UINT_FAST8_TYPE__=unsigned int\",\n                \"__cpp_init_captures=201304\",\n                \"__ATOMIC_ACQ_REL=4\",\n                \"__ATOMIC_RELEASE=3\",\n                \"USBCON\"\n            ]\n        }\n    ]\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.vscode\\launch.json",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.vscode\\settings.json",
        "content": "{\n  \"files.associations\": {\n    \"new\": \"cpp\",\n    \"array\": \"cpp\",\n    \"*.tcc\": \"cpp\",\n    \"functional\": \"cpp\",\n    \"istream\": \"cpp\",\n    \"tuple\": \"cpp\",\n    \"utility\": \"cpp\",\n    \"bitset\": \"cpp\",\n    \"cctype\": \"cpp\",\n    \"clocale\": \"cpp\",\n    \"cmath\": \"cpp\",\n    \"cstdarg\": \"cpp\",\n    \"cstdint\": \"cpp\",\n    \"cstdio\": \"cpp\",\n    \"cstdlib\": \"cpp\",\n    \"cstring\": \"cpp\",\n    \"ctime\": \"cpp\",\n    \"cwchar\": \"cpp\",\n    \"cwctype\": \"cpp\",\n    \"deque\": \"cpp\",\n    \"list\": \"cpp\",\n    \"unordered_map\": \"cpp\",\n    \"vector\": \"cpp\",\n    \"exception\": \"cpp\",\n    \"algorithm\": \"cpp\",\n    \"system_error\": \"cpp\",\n    \"type_traits\": \"cpp\",\n    \"fstream\": \"cpp\",\n    \"initializer_list\": \"cpp\",\n    \"iosfwd\": \"cpp\",\n    \"limits\": \"cpp\",\n    \"memory\": \"cpp\",\n    \"ostream\": \"cpp\",\n    \"numeric\": \"cpp\",\n    \"sstream\": \"cpp\",\n    \"stdexcept\": \"cpp\",\n    \"streambuf\": \"cpp\",\n    \"cinttypes\": \"cpp\",\n    \"regex\": \"cpp\",\n    \"typeinfo\": \"cpp\",\n    \"string\": \"cpp\",\n    \"atomic\": \"cpp\",\n    \"cstddef\": \"cpp\",\n    \"iterator\": \"cpp\",\n    \"map\": \"cpp\",\n    \"memory_resource\": \"cpp\",\n    \"optional\": \"cpp\",\n    \"random\": \"cpp\",\n    \"string_view\": \"cpp\",\n    \"iostream\": \"cpp\"\n  },\n  \"C_Cpp_Runner.msvcBatchPath\": \"\",\n  \"C_Cpp_Runner.cCompilerPath\": \"gcc\",\n  \"C_Cpp_Runner.cppCompilerPath\": \"g++\",\n  \"C_Cpp_Runner.debuggerPath\": \"gdb\",\n  \"C_Cpp_Runner.cStandard\": \"\",\n  \"C_Cpp_Runner.cppStandard\": \"\",\n  \"C_Cpp_Runner.useMsvc\": false,\n  \"C_Cpp_Runner.warnings\": [\n    \"-Wall\",\n    \"-Wextra\",\n    \"-Wpedantic\",\n    \"-Wshadow\",\n    \"-Wformat=2\",\n    \"-Wcast-align\",\n    \"-Wconversion\",\n    \"-Wsign-conversion\",\n    \"-Wnull-dereference\"\n  ],\n  \"C_Cpp_Runner.msvcWarnings\": [\n    \"/W4\",\n    \"/permissive-\",\n    \"/w14242\",\n    \"/w14287\",\n    \"/w14296\",\n    \"/w14311\",\n    \"/w14826\",\n    \"/w44062\",\n    \"/w44242\",\n    \"/w14905\",\n    \"/w14906\",\n    \"/w14263\",\n    \"/w44265\",\n    \"/w14928\"\n  ],\n  \"C_Cpp_Runner.enableWarnings\": true,\n  \"C_Cpp_Runner.warningsAsError\": false,\n  \"C_Cpp_Runner.compilerArgs\": [],\n  \"C_Cpp_Runner.linkerArgs\": [],\n  \"C_Cpp_Runner.includePaths\": [],\n  \"C_Cpp_Runner.includeSearch\": [\n    \"*\",\n    \"**/*\"\n  ],\n  \"C_Cpp_Runner.excludeSearch\": [\n    \"**/build\",\n    \"**/build/**\",\n    \"**/.*\",\n    \"**/.*/**\",\n    \"**/.vscode\",\n    \"**/.vscode/**\"\n  ],\n  \"C_Cpp_Runner.useAddressSanitizer\": false,\n  \"C_Cpp_Runner.useUndefinedSanitizer\": false,\n  \"C_Cpp_Runner.useLeakSanitizer\": false,\n  \"C_Cpp_Runner.showCompilationTime\": false,\n  \"C_Cpp_Runner.useLinkTimeOptimization\": false\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.VSCodeCounter\\2023-06-26_00-10-42\\results.json",
        "content": "{\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/to_do_list.md\":{\"language\":\"Markdown\",\"code\":10,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/upload_debug.py\":{\"language\":\"Python\",\"code\":181,\"comment\":23,\"blank\":32},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/LogTitles.h\":{\"language\":\"C++\",\"code\":45,\"comment\":6,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Readme.md\":{\"language\":\"Markdown\",\"code\":21,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/library.properties\":{\"language\":\"Properties\",\"code\":10,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/Log.h\":{\"language\":\"C++\",\"code\":49,\"comment\":26,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/library.json\":{\"language\":\"JSON\",\"code\":34,\"comment\":5,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/test.py\":{\"language\":\"Python\",\"code\":19,\"comment\":3,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/ILog.h\":{\"language\":\"C++\",\"code\":17,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Validation/Validation.h\":{\"language\":\"C++\",\"code\":21,\"comment\":11,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/BluetoothManager/BluetoothManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules.h\":{\"language\":\"C++\",\"code\":179,\"comment\":2,\"blank\":31},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Entity.h\":{\"language\":\"C++\",\"code\":114,\"comment\":5,\"blank\":17},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/IModules.h\":{\"language\":\"C++\",\"code\":24,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Validation/IValidation.h\":{\"language\":\"C++\",\"code\":11,\"comment\":2,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/WiFiEntity.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/Test.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Monitoring/Monitoring.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/EntityControllerTests.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/KeyValueEntity.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/MainControllerTest.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/LogEntitiy.h\":{\"language\":\"C++\",\"code\":71,\"comment\":0,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/Relay.h\":{\"language\":\"C++\",\"code\":122,\"comment\":0,\"blank\":17},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Theme/Theme.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SheduleManager/ScheduleManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/OLEDLCD.h\":{\"language\":\"C++\",\"code\":49,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/SIMManagement.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ModuleTypes.h\":{\"language\":\"C++\",\"code\":20,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/SoilMoistureSensor.h\":{\"language\":\"C++\",\"code\":55,\"comment\":0,\"blank\":16},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/LCD16X2.h\":{\"language\":\"C++\",\"code\":69,\"comment\":3,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/IRelay.h\":{\"language\":\"C++\",\"code\":18,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ILCD.h\":{\"language\":\"C++\",\"code\":38,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/IButton.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/Button.h\":{\"language\":\"C++\",\"code\":125,\"comment\":11,\"blank\":26},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ISoilMoistureSensor.h\":{\"language\":\"C++\",\"code\":20,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SimCardManager/SimCardManager.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/Network.h\":{\"language\":\"C++\",\"code\":117,\"comment\":12,\"blank\":28},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/IEBPFile.h\":{\"language\":\"C++\",\"code\":51,\"comment\":1,\"blank\":15},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/SystemConfigController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/FileData.h\":{\"language\":\"C++\",\"code\":24,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/WiFiConroller.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/INetwork.h\":{\"language\":\"C++\",\"code\":16,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/EBPFile.h\":{\"language\":\"C++\",\"code\":222,\"comment\":7,\"blank\":52},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/SoilMoistureEntity.h\":{\"language\":\"C++\",\"code\":34,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FrimwareManager/FrimwareManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/SoilMoistureFullEntity.h\":{\"language\":\"C++\",\"code\":31,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RGBFullEntity.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SecurityManager/SecurityManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RelayFullEntity.h\":{\"language\":\"C++\",\"code\":27,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RGBEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RelayEntity.h\":{\"language\":\"C++\",\"code\":24,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/PhotoresistorEntity.h\":{\"language\":\"C++\",\"code\":29,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/PhotoresistorFullEntity.h\":{\"language\":\"C++\",\"code\":29,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/LCDFullEntity.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/DHTEntity.h\":{\"language\":\"C++\",\"code\":44,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/LCDEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ModuleEntity.h\":{\"language\":\"C++\",\"code\":49,\"comment\":1,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/MainController.h\":{\"language\":\"C++\",\"code\":230,\"comment\":1,\"blank\":37},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ButtonFullEntity.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/DHTFullEntity.h\":{\"language\":\"C++\",\"code\":35,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ButtonEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/IController.h\":{\"language\":\"C++\",\"code\":18,\"comment\":0,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/LogController.h\":{\"language\":\"C++\",\"code\":28,\"comment\":1,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ESPBoilerplate.h\":{\"language\":\"C++\",\"code\":74,\"comment\":0,\"blank\":15},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/ModulesController.h\":{\"language\":\"C++\",\"code\":230,\"comment\":0,\"blank\":33},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/upload-modal.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":1,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/RelayController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/ButtonController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/DHTController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/LCDController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/PhotoresistorController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_styles.css\":{\"language\":\"CSS\",\"code\":58,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Context.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_script.js\":{\"language\":\"JavaScript\",\"code\":2,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/Receive.h\":{\"language\":\"C++\",\"code\":24,\"comment\":3,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/MeshNetworkManager.h\":{\"language\":\"C++\",\"code\":124,\"comment\":1,\"blank\":18},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/WiFi/WiFiManager.h\":{\"language\":\"C++\",\"code\":195,\"comment\":2,\"blank\":36},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/Message.h\":{\"language\":\"C++\",\"code\":51,\"comment\":2,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/IMeshNetworkManager.h\":{\"language\":\"C++\",\"code\":19,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/SoilMoistureController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_manager.js\":{\"language\":\"JavaScript\",\"code\":66,\"comment\":4,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_explorer.html\":{\"language\":\"HTML\",\"code\":38,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/RGBController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/WiFi/IWiFiManager.h\":{\"language\":\"C++\",\"code\":35,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/WiFiApis.h\":{\"language\":\"C++\",\"code\":146,\"comment\":0,\"blank\":23},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/SystemConfigApis.h\":{\"language\":\"C++\",\"code\":174,\"comment\":0,\"blank\":26},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/SSIDApis.h\":{\"language\":\"C++\",\"code\":125,\"comment\":0,\"blank\":21},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/wifi.html\":{\"language\":\"HTML\",\"code\":57,\"comment\":0,\"blank\":10},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ErrorHandler/IErrorHandler.h\":{\"language\":\"C++\",\"code\":19,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ErrorHandler/ErrorHandler.h\":{\"language\":\"C++\",\"code\":32,\"comment\":1,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/FileApis.h\":{\"language\":\"C++\",\"code\":310,\"comment\":5,\"blank\":47},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/DefFileApis.h\":{\"language\":\"C++\",\"code\":236,\"comment\":7,\"blank\":43},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/SystemConfig.h\":{\"language\":\"C++\",\"code\":54,\"comment\":2,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/LogApi.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/ISystemConfig.h\":{\"language\":\"C++\",\"code\":10,\"comment\":1,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/DefaultConfigs.h\":{\"language\":\"C++\",\"code\":44,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/ApiInterface.h\":{\"language\":\"C++\",\"code\":9,\"comment\":1,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/Config.h\":{\"language\":\"C++\",\"code\":12,\"comment\":5,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/ConfigKeys.h\":{\"language\":\"C++\",\"code\":34,\"comment\":2,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_api.js\":{\"language\":\"JavaScript\",\"code\":41,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/Clock.h\":{\"language\":\"C++\",\"code\":85,\"comment\":4,\"blank\":21},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/IClock.h\":{\"language\":\"C++\",\"code\":15,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/Readme.md\":{\"language\":\"Markdown\",\"code\":21,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/EventManager/EventManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":1,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/JalaliDateTime.h\":{\"language\":\"C++\",\"code\":86,\"comment\":8,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/styles.css\":{\"language\":\"CSS\",\"code\":40,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/upload_debug.py\":{\"language\":\"Python\",\"code\":181,\"comment\":23,\"blank\":32},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/ESPBoilerplateExample.ino\":{\"language\":\"Arduino\",\"code\":9,\"comment\":4,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/to_do_list.md\":{\"language\":\"Markdown\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/wifi.json\":{\"language\":\"JSON\",\"code\":184,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/ssid.json\":{\"language\":\"JSON\",\"code\":153,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/CameraManager/CameraManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/context-menu.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":5,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/edit.html\":{\"language\":\"HTML\",\"code\":340,\"comment\":1,\"blank\":29},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Pins.h\":{\"language\":\"C++\",\"code\":43,\"comment\":1,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Runtime.h\":{\"language\":\"C++\",\"code\":39,\"comment\":2,\"blank\":15},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/file.json\":{\"language\":\"JSON\",\"code\":230,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/upload-modal.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":1,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/AppContext.h\":{\"language\":\"C++\",\"code\":34,\"comment\":0,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/BatteryManager/BatteryManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/web_pages/styles.css\":{\"language\":\"CSS\",\"code\":40,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Config/ConfigKeys.h\":{\"language\":\"C++\",\"code\":7,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/AccountManager/AccountManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Config/CustomConfig.h\":{\"language\":\"C++\",\"code\":49,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/web_pages/wifi.html\":{\"language\":\"HTML\",\"code\":57,\"comment\":0,\"blank\":10},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Config/DefaultCustomConfigs.h\":{\"language\":\"C++\",\"code\":50,\"comment\":2,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/web_pages/edit.html\":{\"language\":\"HTML\",\"code\":340,\"comment\":1,\"blank\":29},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_styles.css\":{\"language\":\"CSS\",\"code\":58,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/postman_files/file.json\":{\"language\":\"JSON\",\"code\":230,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/postman_files/wifi.json\":{\"language\":\"JSON\",\"code\":184,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/postman_files/ssid.json\":{\"language\":\"JSON\",\"code\":153,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_explorer.html\":{\"language\":\"HTML\",\"code\":38,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/CallManager/CallManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/web_pages/app.js\":{\"language\":\"JavaScript\",\"code\":121,\"comment\":0,\"blank\":23},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_manager.js\":{\"language\":\"JavaScript\",\"code\":66,\"comment\":4,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_api.js\":{\"language\":\"JavaScript\",\"code\":41,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_script.js\":{\"language\":\"JavaScript\",\"code\":2,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/app.js\":{\"language\":\"JavaScript\",\"code\":121,\"comment\":0,\"blank\":23},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Apis/MeshTestApi.h\":{\"language\":\"C++\",\"code\":46,\"comment\":2,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/context-menu.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":5,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/DeviceManager/ModulesList.h\":{\"language\":\"C++\",\"code\":7,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Apis/TestApis.h\":{\"language\":\"C++\",\"code\":79,\"comment\":1,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/DeviceManager/DeviceManager.h\":{\"language\":\"C++\",\"code\":108,\"comment\":0,\"blank\":31},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/DeviceManager/IDeviceManager.h\":{\"language\":\"C++\",\"code\":20,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Elavator/MoveManagement%20copy.h\":{\"language\":\"C++\",\"code\":0,\"comment\":157,\"blank\":34},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Elavator/IMoveManagement.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Tests/BoardTest.h\":{\"language\":\"C++\",\"code\":60,\"comment\":0,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Tests/StudentControllerTest.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_browser/file_style.css\":{\"language\":\"CSS\",\"code\":64,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Elavator/MoveManagement.h\":{\"language\":\"C++\",\"code\":246,\"comment\":29,\"blank\":48},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_browser/file_script.js\":{\"language\":\"JavaScript\",\"code\":83,\"comment\":11,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/html_pages/file_browser/files.html\":{\"language\":\"HTML\",\"code\":40,\"comment\":0,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Database/Controllers/CustomConfigController.h\":{\"language\":\"C++\",\"code\":10,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Database/Controllers/StudentController.h\":{\"language\":\"C++\",\"code\":14,\"comment\":0,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/ESPBoilerplateExample/src/Database/Entities/Student.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":13}}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\.VSCodeCounter\\2023-07-02_02-06-41\\results.json",
        "content": "{\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/library.json\":{\"language\":\"JSON\",\"code\":34,\"comment\":5,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/test.py\":{\"language\":\"Python\",\"code\":19,\"comment\":3,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/to_do_list.md\":{\"language\":\"Markdown\",\"code\":20,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/upload_debug.py\":{\"language\":\"Python\",\"code\":181,\"comment\":23,\"blank\":32},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/swagger.html\":{\"language\":\"HTML\",\"code\":59,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/library.properties\":{\"language\":\"Properties\",\"code\":10,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Readme.md\":{\"language\":\"Markdown\",\"code\":21,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/ssid.json\":{\"language\":\"JSON\",\"code\":153,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/styles.css\":{\"language\":\"CSS\",\"code\":40,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/file.json\":{\"language\":\"JSON\",\"code\":230,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/IEBPFile.h\":{\"language\":\"C++\",\"code\":65,\"comment\":1,\"blank\":18},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/EBPFile.h\":{\"language\":\"C++\",\"code\":228,\"comment\":8,\"blank\":54},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FileManager/FileData.h\":{\"language\":\"C++\",\"code\":24,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/wifi.html\":{\"language\":\"HTML\",\"code\":57,\"comment\":0,\"blank\":10},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/MainControllerTest.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/condition.json\":{\"language\":\"JSON\",\"code\":121,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/Test.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Tests/EntityControllerTests.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/edit.html\":{\"language\":\"HTML\",\"code\":340,\"comment\":1,\"blank\":29},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/web_pages/app.js\":{\"language\":\"JavaScript\",\"code\":121,\"comment\":0,\"blank\":23},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Validation/Validation.h\":{\"language\":\"C++\",\"code\":21,\"comment\":11,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_explorer.html\":{\"language\":\"HTML\",\"code\":38,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Validation/IValidation.h\":{\"language\":\"C++\",\"code\":11,\"comment\":2,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_manager.js\":{\"language\":\"JavaScript\",\"code\":66,\"comment\":4,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_script.js\":{\"language\":\"JavaScript\",\"code\":2,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Theme/Theme.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SheduleManager/ScheduleManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SystemMonitor/SystemMonitor.h\":{\"language\":\"C++\",\"code\":136,\"comment\":17,\"blank\":45},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SystemMonitor/ISystemMonitor.h\":{\"language\":\"C++\",\"code\":38,\"comment\":6,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SecurityManager/SecurityManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/context-menu.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":5,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/IModules.h\":{\"language\":\"C++\",\"code\":24,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_styles.css\":{\"language\":\"CSS\",\"code\":58,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/LogTitles.h\":{\"language\":\"C++\",\"code\":47,\"comment\":6,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/ILog.h\":{\"language\":\"C++\",\"code\":17,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_api.js\":{\"language\":\"JavaScript\",\"code\":41,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Logging/Log.h\":{\"language\":\"C++\",\"code\":49,\"comment\":26,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/SimCardManager/SimCardManager.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/Network.h\":{\"language\":\"C++\",\"code\":130,\"comment\":12,\"blank\":27},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules.h\":{\"language\":\"C++\",\"code\":210,\"comment\":2,\"blank\":34},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/INetwork.h\":{\"language\":\"C++\",\"code\":17,\"comment\":0,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/SoilMoistureSensor.h\":{\"language\":\"C++\",\"code\":55,\"comment\":0,\"blank\":16},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/Receive.h\":{\"language\":\"C++\",\"code\":24,\"comment\":3,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/Message.h\":{\"language\":\"C++\",\"code\":51,\"comment\":2,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_browser/files.html\":{\"language\":\"HTML\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/SIMManagement.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/Relay.h\":{\"language\":\"C++\",\"code\":122,\"comment\":0,\"blank\":17},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/MeshNetworkManager.h\":{\"language\":\"C++\",\"code\":124,\"comment\":1,\"blank\":18},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/OLEDLCD.h\":{\"language\":\"C++\",\"code\":49,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/upload-modal.js\":{\"language\":\"JavaScript\",\"code\":26,\"comment\":1,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ModuleTypes.h\":{\"language\":\"C++\",\"code\":20,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/MeshNetwork/IMeshNetworkManager.h\":{\"language\":\"C++\",\"code\":19,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/LCD16X2.h\":{\"language\":\"C++\",\"code\":69,\"comment\":3,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/WiFi/WiFiManager.h\":{\"language\":\"C++\",\"code\":196,\"comment\":1,\"blank\":36},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ISoilMoistureSensor.h\":{\"language\":\"C++\",\"code\":20,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/WiFi/IWiFiManager.h\":{\"language\":\"C++\",\"code\":35,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/IRelay.h\":{\"language\":\"C++\",\"code\":18,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/ILCD.h\":{\"language\":\"C++\",\"code\":38,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/Button.h\":{\"language\":\"C++\",\"code\":126,\"comment\":11,\"blank\":27},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ModuleManager/Modules/IButton.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ESPBoilerplate.h\":{\"language\":\"C++\",\"code\":81,\"comment\":0,\"blank\":16},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/FrimwareManager/FrimwareManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ErrorHandler/IErrorHandler.h\":{\"language\":\"C++\",\"code\":19,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_browser/file_script.js\":{\"language\":\"JavaScript\",\"code\":106,\"comment\":15,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/ErrorHandler/ErrorHandler.h\":{\"language\":\"C++\",\"code\":32,\"comment\":1,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/EBPInterfaces.h\":{\"language\":\"C++\",\"code\":12,\"comment\":0,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/ApiInterface.h\":{\"language\":\"C++\",\"code\":12,\"comment\":1,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/SSIDApis.h\":{\"language\":\"C++\",\"code\":134,\"comment\":0,\"blank\":25},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Context.h\":{\"language\":\"C++\",\"code\":49,\"comment\":0,\"blank\":15},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/html_pages/file_browser/file_style.css\":{\"language\":\"CSS\",\"code\":119,\"comment\":0,\"blank\":24},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/LogApi.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/FileApis.h\":{\"language\":\"C++\",\"code\":552,\"comment\":9,\"blank\":83},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/EventManager/EventManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":1,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/SystemConfigApis.h\":{\"language\":\"C++\",\"code\":188,\"comment\":0,\"blank\":30},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/DefaultConfigs.h\":{\"language\":\"C++\",\"code\":44,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/NetworkManager/apis/WiFiApis.h\":{\"language\":\"C++\",\"code\":155,\"comment\":0,\"blank\":27},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/ConfigKeys.h\":{\"language\":\"C++\",\"code\":34,\"comment\":2,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/Clock.h\":{\"language\":\"C++\",\"code\":97,\"comment\":6,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/Config.h\":{\"language\":\"C++\",\"code\":12,\"comment\":5,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/SystemConfig.h\":{\"language\":\"C++\",\"code\":54,\"comment\":2,\"blank\":12},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/JalaliDateTime.h\":{\"language\":\"C++\",\"code\":175,\"comment\":17,\"blank\":39},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Config/ISystemConfig.h\":{\"language\":\"C++\",\"code\":10,\"comment\":1,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/IClock.h\":{\"language\":\"C++\",\"code\":16,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Clock/EBPDateTime.h\":{\"language\":\"C++\",\"code\":98,\"comment\":8,\"blank\":26},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/CameraManager/CameraManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/LogEntitiy.h\":{\"language\":\"C++\",\"code\":71,\"comment\":0,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/KeyValueEntity.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/CallManager/CallManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Entity.h\":{\"language\":\"C++\",\"code\":125,\"comment\":5,\"blank\":21},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/WiFiEntity.h\":{\"language\":\"C++\",\"code\":42,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/BluetoothManager/BluetoothManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/WiFiConroller.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/SystemConfigController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/FileSystem.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/MainController.h\":{\"language\":\"C++\",\"code\":250,\"comment\":1,\"blank\":38},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/LogController.h\":{\"language\":\"C++\",\"code\":28,\"comment\":1,\"blank\":8},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/IController.h\":{\"language\":\"C++\",\"code\":19,\"comment\":0,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/BatteryManager/BatteryManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/DHTController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ButtonEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/ButtonController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/ModulesController.h\":{\"language\":\"C++\",\"code\":218,\"comment\":18,\"blank\":37},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/DHTEntity.h\":{\"language\":\"C++\",\"code\":44,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/LCDController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/AccountManager/AccountManager.h\":{\"language\":\"C++\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/SoilMoistureFullEntity.h\":{\"language\":\"C++\",\"code\":31,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ButtonFullEntity.h\":{\"language\":\"C++\",\"code\":32,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/SoilMoistureEntity.h\":{\"language\":\"C++\",\"code\":34,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RGBEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RGBFullEntity.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RelayFullEntity.h\":{\"language\":\"C++\",\"code\":27,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/SoilMoistureController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/RelayEntity.h\":{\"language\":\"C++\",\"code\":24,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/PhotoresistorFullEntity.h\":{\"language\":\"C++\",\"code\":29,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/RGBController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/PhotoresistorEntity.h\":{\"language\":\"C++\",\"code\":29,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/RelayController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Controllers/Modules/PhotoresistorController.h\":{\"language\":\"C++\",\"code\":11,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/LCDFullEntity.h\":{\"language\":\"C++\",\"code\":33,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/ModuleEntity.h\":{\"language\":\"C++\",\"code\":50,\"comment\":1,\"blank\":13},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/DHTFullEntity.h\":{\"language\":\"C++\",\"code\":35,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/Modules/LCDEntity.h\":{\"language\":\"C++\",\"code\":39,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/postman_files/wifi.json\":{\"language\":\"JSON\",\"code\":184,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/Readme.md\":{\"language\":\"Markdown\",\"code\":21,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/data_sample_full.json\":{\"language\":\"JSON\",\"code\":223,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/src/Database/Entities/IEntity.h\":{\"language\":\"C++\",\"code\":22,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/to_do_list.md\":{\"language\":\"Markdown\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/led-simulation.py\":{\"language\":\"Python\",\"code\":84,\"comment\":8,\"blank\":24},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/main.py\":{\"language\":\"Python\",\"code\":11,\"comment\":8,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/data.json\":{\"language\":\"JSON\",\"code\":246,\"comment\":0,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/RoomLight.ino\":{\"language\":\"Arduino\",\"code\":9,\"comment\":0,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/growify.json\":{\"language\":\"JSON\",\"code\":481,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Pins.h\":{\"language\":\"C++\",\"code\":15,\"comment\":2,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/web_pages/wifi.html\":{\"language\":\"HTML\",\"code\":57,\"comment\":0,\"blank\":10},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/web_pages/styles.css\":{\"language\":\"CSS\",\"code\":40,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Runtime.h\":{\"language\":\"C++\",\"code\":46,\"comment\":1,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/web_pages/app.js\":{\"language\":\"JavaScript\",\"code\":121,\"comment\":0,\"blank\":23},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/postman_files/ssid.json\":{\"language\":\"JSON\",\"code\":153,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/web_pages/edit.html\":{\"language\":\"HTML\",\"code\":340,\"comment\":1,\"blank\":29},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/postman_files/file.json\":{\"language\":\"JSON\",\"code\":230,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/postman_files/wifi.json\":{\"language\":\"JSON\",\"code\":184,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/project_class.py\":{\"language\":\"Python\",\"code\":9,\"comment\":147,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/config.py\":{\"language\":\"Python\",\"code\":117,\"comment\":20,\"blank\":37},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/devicemanager.py\":{\"language\":\"Python\",\"code\":111,\"comment\":13,\"blank\":33},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/DeviceManager/ModulesList.h\":{\"language\":\"C++\",\"code\":7,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/entity_and_controller.py\":{\"language\":\"Python\",\"code\":205,\"comment\":57,\"blank\":46},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/api_class.py\":{\"language\":\"Python\",\"code\":115,\"comment\":15,\"blank\":34},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/DeviceManager/IDeviceManager.h\":{\"language\":\"C++\",\"code\":13,\"comment\":0,\"blank\":6},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/AppContext.h\":{\"language\":\"C++\",\"code\":24,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/generator/generator.py\":{\"language\":\"Python\",\"code\":63,\"comment\":8,\"blank\":17},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/RoomLight/IRoomLight.h\":{\"language\":\"C++\",\"code\":21,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/ui/main_window.py\":{\"language\":\"Python\",\"code\":4,\"comment\":1,\"blank\":2},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/RoomLight/RoomLight.h\":{\"language\":\"C++\",\"code\":191,\"comment\":10,\"blank\":34},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/test.py\":{\"language\":\"Python\",\"code\":20,\"comment\":4,\"blank\":14},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/DeviceManager/DeviceManager.h\":{\"language\":\"C++\",\"code\":46,\"comment\":0,\"blank\":16},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/upload_debug.py\":{\"language\":\"Python\",\"code\":181,\"comment\":23,\"blank\":32},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/html_pages/file_browser/files.html\":{\"language\":\"HTML\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Config/ConfigKeys.h\":{\"language\":\"C++\",\"code\":7,\"comment\":0,\"blank\":4},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Apis/RoomLightApi.h\":{\"language\":\"C++\",\"code\":128,\"comment\":14,\"blank\":26},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/swagger.py\":{\"language\":\"Python\",\"code\":11,\"comment\":63,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Config/DefaultRoomLightConfigs.h\":{\"language\":\"C++\",\"code\":47,\"comment\":0,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Config/RoomLightConfig.h\":{\"language\":\"C++\",\"code\":49,\"comment\":1,\"blank\":11},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/package.json\":{\"language\":\"JSON\",\"code\":5,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/html_pages/file_browser/file_style.css\":{\"language\":\"CSS\",\"code\":119,\"comment\":0,\"blank\":24},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/src/Database/Controllers/RoomLightConfigController.h\":{\"language\":\"C++\",\"code\":10,\"comment\":0,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/openapitools.json\":{\"language\":\"JSON\",\"code\":7,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/Examples/RoomLight/html_pages/file_browser/file_script.js\":{\"language\":\"JavaScript\",\"code\":106,\"comment\":15,\"blank\":19},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/test/__init__.py\":{\"language\":\"Python\",\"code\":0,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/tox.ini\":{\"language\":\"Ini\",\"code\":7,\"comment\":0,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/test/test_default_api.py\":{\"language\":\"Python\",\"code\":24,\"comment\":34,\"blank\":18},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/setup.py\":{\"language\":\"Python\",\"code\":17,\"comment\":17,\"blank\":7},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/myspec.yaml\":{\"language\":\"YAML\",\"code\":741,\"comment\":0,\"blank\":0},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/requirements.txt\":{\"language\":\"pip requirements\",\"code\":6,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/package-lock.json\":{\"language\":\"JSON\",\"code\":1252,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/models/__init__.py\":{\"language\":\"Python\",\"code\":1,\"comment\":11,\"blank\":5},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/setup.cfg\":{\"language\":\"Properties\",\"code\":2,\"comment\":0,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/README.md\":{\"language\":\"Markdown\",\"code\":71,\"comment\":0,\"blank\":37},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/__init__.py\":{\"language\":\"Python\",\"code\":10,\"comment\":13,\"blank\":9},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/rest.py\":{\"language\":\"Python\",\"code\":201,\"comment\":51,\"blank\":40},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/api/__init__.py\":{\"language\":\"Python\",\"code\":2,\"comment\":2,\"blank\":3},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/configuration.py\":{\"language\":\"Python\",\"code\":158,\"comment\":184,\"blank\":35},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/exceptions.py\":{\"language\":\"Python\",\"code\":55,\"comment\":45,\"blank\":21},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/git_push.sh\":{\"language\":\"Shell Script\",\"code\":35,\"comment\":9,\"blank\":15},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/api_client.py\":{\"language\":\"Python\",\"code\":410,\"comment\":184,\"blank\":73},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/docs/DefaultApi.md\":{\"language\":\"Markdown\",\"code\":279,\"comment\":0,\"blank\":106},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/openapi_client/api/default_api.py\":{\"language\":\"Python\",\"code\":373,\"comment\":303,\"blank\":88},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/.travis.yml\":{\"language\":\"YAML\",\"code\":14,\"comment\":3,\"blank\":1},\"file:///c%3A/Users/AIVWA%201/Documents/Arduino/libraries/ESPBoilerplate/code_generator/swagger_generator/my_python_client/.gitlab-ci.yml\":{\"language\":\"YAML\",\"code\":29,\"comment\":1,\"blank\":4}}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\OStad.py",
        "content": "import os\nimport sys\nimport json\nimport argparse\nimport tkinter as tk\nfrom tkinter import filedialog\nsys.path.append(os.path.join(os.path.dirname(__file__), 'generator'))\nfrom generator import *\nimport json\n\ndef validate_json_structure(json_string):\n    try:\n        # data = json.loads(json_string)\n        data = json_string\n        # Check for the presence of specific top-level keys\n        required_top_level_keys = [\"ProjectName\", \"ProjectPath\", \"Entities\", \"Apis\", \"Modules\", \"Configs\"]\n        if not all(key in data for key in required_top_level_keys):\n            return False\n\n        # Check Entities structure\n        for entity in data[\"Entities\"]:\n            if \"name\" not in entity or \"columns\" not in entity:\n                return False\n            if not entity[\"columns\"]:  # columns cannot be empty\n                return False\n\n        # Check Apis structure\n        for api in data[\"Apis\"]:\n            if \"name\" not in api or \"Url\" not in api or \"Apis\" not in api:\n                return False\n            for sub_api in api[\"Apis\"]:\n                if \"ApiName\" not in sub_api or \"EndPoint\" not in sub_api or \"Method\" not in sub_api:\n                    return False\n                # \"Data\" can be empty, no need to check\n\n        # Check Modules presence\n        if \"Modules\" not in data:\n            return False\n\n        # Check Configs structure\n        if \"Configs\" not in data:\n            return False\n\n        return True\n\n    except json.JSONDecodeError:\n        # Not a valid JSON\n        return False\n\n# You can test this function with various JSON strings in your environment\n\ndef generate_from_cli(path):\n    with open(path, 'r') as f:\n        json_data = json.load(f)\n    if not validate_json_structure(json_data):\n        return \"wrong json format\"\n    return generate_all(json_data)\n\ndef generate_from_gui():\n    def select_file():\n        filename = filedialog.askopenfilename(filetypes=[(\"JSON files\", \"*.json\")])\n        if filename:\n            file_path_entry.delete(0, tk.END)\n            file_path_entry.insert(0, filename)\n\n    def open_project_path(path):\n        os.startfile(path)\n\n    def generate_code():\n        filename = file_path_entry.get()\n        if filename:\n            try:\n                with open(filename, 'r') as f:\n                    json_data = json.load(f)\n                if not validate_json_structure(json_data):\n                    result = {'message': \"wrong json format\",\n                            'project_path' : '',\n                            'project_name' : ''}\n                else:\n                    result = generate_all(json_data)\n                    open_project_button.config(command=lambda: open_project_path(os.path.join(project_path, project_name)))\n                    open_project_button.pack(pady=10)  # Show the button\n\n                message = result['message']\n                project_path = result['project_path']\n                project_name = result['project_name']\n                result_label.config(text=message)\n            except Exception as e:\n                result_label.config(text=f\"Error: {e}\")\n\n    root = tk.Tk()\n    root.title(\"OStad Code Generator\")\n    root.geometry(\"600x400\")\n\n    # Styling\n    button_style = {'font': ('Arial', 12), 'fg': 'white', 'bg': 'blue', 'padx': 10, 'pady': 5}\n    entry_style = {'font': ('Arial', 10), 'width': 50}\n    label_style = {'font': ('Arial', 10), 'wraplength': 350}\n\n    # File Path Entry\n    file_path_entry = tk.Entry(root, **entry_style)\n    file_path_entry.pack(pady=10)\n\n    # Open File Button\n    open_button = tk.Button(root, text=\"Open JSON File\", command=select_file, **button_style)\n    open_button.pack(pady=10)\n\n    # Generate Code Button\n    generate_button = tk.Button(root, text=\"Generate Code\", command=generate_code, **button_style)\n    generate_button.pack(pady=10)\n\n    # Result Label\n    result_label = tk.Label(root, text=\"\", **label_style)\n    result_label.pack(pady=20)\n\n    # Open Project Path Button (Initially Hidden)\n    open_project_button = tk.Button(root, text=\"Open Generated Project\", **button_style)\n\n    root.mainloop()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"JSON File Generator\")\n    parser.add_argument(\"command\", nargs='?', help=\"Command to execute ('generate')\")\n    parser.add_argument(\"JSON_PATH\", nargs='?', help=\"Path to JSON file\")\n    args = parser.parse_args()\n\n    if args.command == \"generate\" and args.JSON_PATH:\n        message = generate_from_cli(args.JSON_PATH)\n        print(message)\n    else:\n        generate_from_gui()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\api_class.py",
        "content": "def get_json_type(py_type):\n    json_type = \"\"\n    \n    if py_type == str:\n        json_type = \"String\"\n    elif py_type == int:\n        json_type = \"int\"\n    elif py_type == bool:\n        json_type = \"bool\"\n    elif py_type == list:\n        json_type = \"Array\"\n    elif py_type == dict:\n        json_type = \"Object\"\n    elif py_type == float:\n        json_type = \"Number\"\n    else:\n        json_type = \"Unknown\"\n        \n    return json_type\n\ndef generate_apis_file(project_name, apis, entities):\n    apis_file_code ='''\n#ifndef APIS_H\n#define APIS_H\n\n#include \"Permissions.h\"\n{api_includes}\n\nvoid createApis(AppContext* appContext)\n{{\n    std::vector<ApiInterface*> apis = std::vector<ApiInterface*>();\n\n    {api_init}\n\n    appContext->systemContext->getNetwork()->addApis(apis);\n}}\n\n#endif //APIS_H\n    '''\n    api_includes = ''\n    api_init = ''\n    for api in apis:\n        api_includes += f\"\"\"#include \"{api['name']}Apis.h\"\\n\"\"\"\n        api_init += f\"\"\"\n    {api['name']}Apis* {api['name'].lower()}Apis = new {api['name']}Apis(appContext, true);\n    apis.push_back({api['name'].lower()}Apis);\n    \"\"\"\n        \n    for entity in entities:\n        api_includes += f\"\"\"#include \"{entity['name']}Apis.h\"\\n\"\"\"\n        api_init += f\"\"\"\n    {entity['name']}Apis* {entity['name'].lower()}Apis = new {entity['name']}Apis(appContext, true);\n    apis.push_back({entity['name'].lower()}Apis);\n    \"\"\"\n    apis_file_code = apis_file_code.format(api_includes=api_includes, api_init=api_init)\n    return apis_file_code\n\n\ndef generate_permissions_file(project_name, permissions):\n    permissions_file_code = '''#ifndef PERMISSIONS_H\n#define PERMISSIONS_H\n\nclass Permissions\n{{\npublic:\n{permissions_declration}\n\n    static void addPermissions(Context* context);\n}};\n\nvoid Permissions::addPermissions(Context* context)\n{{\n{add_permissions}\n}}\n\n{permissions_set_value}\n\n#endif // PERMISSIONS_H\n'''\n    permissions_declration = ''\n    permissions_set_value = ''\n    add_permissions = ''\n    for permission in permissions:\n        permissions_declration += '    static const String '+permission[0]+';\\n'\n        permissions_set_value += 'const String Permissions::'+permission[0]+' = \"'+permission[1]+'\";\\n'\n        add_permissions += '    context->getSecurity()->addPermissionForAdmin(' + permission[0] + ', \"' +  project_name + ' Permissions\");\\n'\n\n    permissions_file_code = permissions_file_code.format(permissions_declration=permissions_declration, permissions_set_value=permissions_set_value, add_permissions=add_permissions)\n    return permissions_file_code\n\n\n\ndef generate_api_class(project_name, api):\n\n    base_code = '''\n#ifndef {api_name}Apis_h\n#define {api_name}Apis_h\n\n\n#include \"../AppContext.h\"\n#include \"Permissions.h\"\nclass {api_name}Apis : public ApiInterface\n{{\nprivate:\n    AppContext* context;\n    std::string class_path = \"{api_url}\";\n\npublic:\n    {api_name}Apis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    {api_methods}\n}};\n\n{api_name}Apis::{api_name}Apis(AppContext* cntxt, bool add_apis): context(cntxt) {{\n    if (!add_apis) return;\n\n    {handle_methods}\n}}\n\nString {api_name}Apis::getClassPath()\n{{\n    return String(class_path.c_str());\n}}\n\n\n{handler_functions}\n\nString {api_name}Apis::callFunction(String functionName, std::map<String, String> parameters) {{\n    {call_functions}\n    return \"\";\n}}\n\n#endif //{api_name}Apis_h\n'''\n\n\n\n    # Prepare API methods and handle_methods\n    api_methods = []\n    handle_methods = []\n    handler_functions = []\n    call_functions = []\n    permissions = []\n    for method in api['Apis']:\n        parameters = ''\n        var_declaration = ''\n        var_definistion = ''\n        if_declaration = ''\n        var_input = ''\n        handle_function_inputs = ''\n        api_name = method['ApiName']\n        api_method_name = api_name[0].lower() + api_name[1:] # convert first character to lower case\n        http_method = method['Method']\n        permission_name = api['Url'][1:].upper() + '_' + method['ApiName'].upper()\n        permissions.append([permission_name, api['Url'][1:].lower() + '_' + method['ApiName'].lower()])\n        if 'Data' in method and len(method['Data']) > 0 :\n            var_declaration += f'\\n        \\n        '\n            if_declaration = f'\\n        if('\n            for key,value in method['Data'].items():\n                parameters += get_json_type(type(value)) + ' '\n                parameters += key.lower() + ', '\n                handle_function_inputs += f'parameters[\"{key.lower()}\"], '\n                if_declaration += f'!req->getParams()->isQueryParameterSet(\"{key.lower()}\") || '\n                if get_json_type(type(value)) == \"String\":\n                    var_declaration += f'{get_json_type(type(value))} {key.lower()} = getQueryParameterString(req, \"{key}\");\\n        '\n                elif get_json_type(type(value)) == \"int\":\n                    var_declaration += f'{get_json_type(type(value))} {key.lower()} = getQueryParameterint(req, \"{key}\");\\n        '\n                elif get_json_type(type(value)) == \"bool\":\n                    var_declaration += f'{get_json_type(type(value))} {key.lower()} = boolean(getQueryParameterString(req, \"{key}\"));\\n        '\n                elif get_json_type(type(value)) == \"EBPDateTime\":\n                    var_declaration += f'{get_json_type(type(value))} {key.lower()} = EBPDatetime(getQueryParameterString(req, \"{key}\"));\\n        '\n                \n                var_input += key.lower() + ', '\n            \n            if_declaration = if_declaration[:-4]\n            if_declaration += f'){{\\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\\n        }}'\n        parameters = parameters[:-2]\n        var_input = var_input[:-2]\n        handle_function_inputs = handle_function_inputs[:-2]\n        api_methods.append(f'''\n    String handle{api_method_name}({parameters});''')\n        handle_methods.append(f'''\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/{api_method_name}\"), LambdaResourceNode::REQUEST_METHOD_{http_method}, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{permission_name}) == AuthorizationResults::SUCCESFULL){{return;}}\n        {if_declaration}{var_declaration}\n        response(res, handle{api_method_name}({var_input}));\n    }}));''')\n        handler_functions.append(f'''\nString {api['name']}Apis::handle{api_method_name}({parameters}) {{\n    return \"\";\n}}''')\n        call_functions.append(f'''\n    if (functionName == \"handle{api_method_name}\") {{\n        handle{api_method_name}({handle_function_inputs});\n        return \"OK\";\n    }}''')\n\n    api_methods = ''.join(api_methods)\n    handle_methods = ''.join(handle_methods)\n    handler_functions = ''.join(handler_functions)\n    call_functions = ''.join(call_functions)\n\n    api_class = base_code.format(api_name=api['name'], api_url=api['Url'], api_methods=api_methods, handle_methods=handle_methods, handler_functions=handler_functions, call_functions=call_functions, project_name=project_name)\n\n    return{\n        'name' : api['name'] + 'Apis',\n        'code' : api_class,\n        'permissions' : permissions\n    }\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\certificate_generator.py",
        "content": "import subprocess\nimport os\n\ndef generate_certificate():\n    # Step 1: Generate Certificate and Private Key\n    subprocess.run([\"openssl\", \"req\", \"-x509\", \"-newkey\", \"rsa:2048\", \"-keyout\", \"key.pem\", \"-out\", \"cert.pem\", \"-days\", \"365\", \"-nodes\", \"-subj\", \"/CN=example.com\"])\n\n    # Step 2: Read Certificate and Key\n    with open(\"cert.pem\", \"rb\") as f:\n        cert_data = f.read()\n    with open(\"key.pem\", \"rb\") as f:\n        key_data = f.read()\n\n    # Step 3: Convert to uint8_t Arrays in String Format\n    def to_uint8_string(binary_data):\n        return \", \".join(str(b) for b in binary_data)\n\n    cert_array_str = to_uint8_string(cert_data)\n    key_array_str = to_uint8_string(key_data)\n\n    # Step 4: Create the Final String\n    final_str = f\"uint8_t certificate[] = {{{cert_array_str}}};\\nuint8_t private_key[] = {{{key_array_str}}};\"\n\n    # Deleting the generated files\n    os.remove(\"cert.pem\")\n    os.remove(\"key.pem\")\n\n    return final_str\n\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\config.py",
        "content": "def generate_config_key(configs, project_name):\n    config_key_code_template = '''\n#ifndef {project_name_upper}CONFIGKEYS_H\n#define {project_name_upper}CONFIGKEYS_H\n\nclass {project_name}ConfigKey\n{{\nprivate:\n\npublic:\n    {config_keys}\n}};\n\n{config_key_definitions}\n\n#endif // {project_name_upper}CONFIGKEYS_H\n'''\n\n    config_key_list = [f\"static const String {config['Key'].upper()};\" for config in configs]\n    config_keys = '\\n    '.join(config_key_list)\n\n    config_key_definition_list = [f'const String {project_name}ConfigKey::{config[\"Key\"].upper()} = \"{config[\"Key\"]}\";' for config in configs]\n    config_key_definitions = '\\n'.join(config_key_definition_list)\n\n    config_key_code = config_key_code_template.format(\n        project_name_upper=project_name.upper(),\n        project_name=project_name,\n        config_keys=config_keys,\n        config_key_definitions=config_key_definitions\n    )\n\n    return config_key_code\n\ndef generate_config(config, class_name):\n    config_code_template = '''\n#ifndef {class_name_upper}CONFIGS_H\n#define {class_name_upper}CONFIGS_H\n\n#include <string>\n#include \"Default{class_name}Configs.h\"\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/{class_name}ConfigController.h\"\n#include \"{class_name}ConfigKeys.h\"\n\nclass {class_name}Config : public IConfig {{\n\nprivate:\n    {class_name}ConfigController* {class_name_lower}ConfigController;\n\npublic:\n    AppContext* appContext;\n    {class_name}Config(AppContext* cntxt):appContext (cntxt) {{\n    }}\n    \n    void initialize() {{\n        {class_name_lower}ConfigController = new {class_name}ConfigController(appContext, storageType);\n    }}\n\n    String get(const String& key) {{\n        std::vector<KeyValueEntity> {class_name_lower}ConfigEntities  = {class_name_lower}ConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key);\n        \n        if ({class_name_lower}ConfigEntities.size() > 0)\n        {{\n            KeyValueEntity configEntity = {class_name_lower}ConfigEntities.at(0);\n            configEntity.fromString(configEntity.toString());\n            if (configEntity.id == -1) {{\n                return \"\";\n            }} else {{\n                return configEntity.getValue();\n            }}\n        }}\n        else\n        {{\n            KeyValueEntity* keyValueEntity = new KeyValueEntity(key,Default{class_name}Configs::get(key));\n            {class_name_lower}ConfigController->Add(*keyValueEntity);\n            return Default{class_name}Configs::get(key);\n        }}\n    }}\n\n    void set(const String& key, const String& value) {{\n        KeyValueEntity configEntity = {class_name_lower}ConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key).at(0);\n        if (configEntity.id == -1) {{ // Key does not exist\n            configEntity.setKey(key);\n            configEntity.setValue(value);\n            {class_name_lower}ConfigController->Add(configEntity);\n        }} else {{ // Key exists\n            configEntity.setValue(value);\n            {class_name_lower}ConfigController->Update(configEntity);\n        }}\n    }}\n\n}};\n\n#endif // {class_name_upper}_H\n'''\n\n    default_config_code_template = '''\n#ifndef DEFAULT{class_name_upper}_H\n#define DEFAULT{class_name_upper}_H\n\n#include <Arduino.h>\n#include <ArduinoJson.h>\n\nclass Default{class_name}Configs {{\n\npublic:\n    static const String jsonString;\n    static String get(String key);\n}};\n\nString Default{class_name}Configs::get(String key) {{\n    StaticJsonDocument<512> doc;\n    DeserializationError error = deserializeJson(doc, jsonString);\n\n    if (error) {{\n        Serial.println(F(\"Failed to parse jsonString\"));\n        return \"\";\n    }}\n\n    if (doc.containsKey(key)) {{\n        return String(doc[key].as<const char *>());\n    }} else {{\n        Serial.print(F(\"Key not found in {class_name} Config: \"));\n        Serial.println(key);\n        return \"\";\n    }}\n}}\n\nconst String Default{class_name}Configs::jsonString = R\"(\n{{\n    {configs}\n}}\n)\";\n\n#endif\n'''\n    config_controller_code_template = '''\n#ifndef {class_name_upper}CONFIGCONTROLLER_H\n#define {class_name_upper}CONFIGCONTROLLER_H\n\n#include \"../../AppContext.h\"\n\nclass {class_name}ConfigController : public MainController<KeyValueEntity>{{\nprotected:\npublic:\n    AppContext* appContext;\n    {class_name}ConfigController(AppContext* appContext, StorageType _storageType) : MainController<KeyValueEntity>(appContext->systemContext ,\"{class_name_lower}_config\", _storageType), appContext(appContext) {{}}\n\n}};\n\n#endif //{class_name_upper}CONFIGCONTROLLER_H\n    '''\n    configs_str = ',\\n    '.join(f'\"{conf[\"Key\"]}\" : \"{conf[\"DefaultValue\"]}\"' for conf in config)\n\n    config_code = config_code_template.format(\n        class_name_upper=class_name.upper(),\n        class_name=class_name,\n        class_name_lower=class_name.lower(),\n    )\n\n    default_config_code = default_config_code_template.format(\n        class_name_upper=class_name.upper(),\n        class_name=class_name,\n        configs=configs_str,\n    )\n\n    config_controller_code = config_controller_code_template.format(\n        class_name_upper=class_name.upper(),\n        class_name=class_name,\n        class_name_lower=class_name.lower(),\n    )\n\n    return {'config_code': config_code, 'default_config_code': default_config_code, 'config_controller_code': config_controller_code}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\devicemanager.py",
        "content": "def generate_devicemanager(modules):\n    module_types = ['Buttons', 'LCD16X2s', 'OLEDLCDs', 'Relays', 'SoilMoistureSensors']\n\n    idevicemanager_code_template = '''\n#ifndef IDEVICEMANAGER_H\n#define IDEVICEMANAGER_H\n\n#include <EBPInterfaces.h>\n\nclass IDeviceManager\n{{\npublic:\n    virtual ~IDeviceManager(){{}}\n\n    virtual void initialize() = 0;\n    virtual void update() = 0;\n{getters}\n}};\n\n#endif\n'''\n\n    devicemanager_code_template = '''\n#ifndef DEVICEMANAGER_H\n#define DEVICEMANAGER_H\n\n#include \"IDeviceManager.h\"\n#include \"../AppContext.h\"\n#include <OStad.h>\n\nclass DeviceManager : public IDeviceManager\n{{\nprivate:\n    AppContext* appContext;\n    {module_names}\npublic:\n    DeviceManager(AppContext* context);\n\n    void initialize() override;\n    void update() override;\n    {getter_implementations}\n}};\n\nDeviceManager::DeviceManager(AppContext* context) : appContext(context) {{\n\n}}\n\n{initialize}\n\n{update}\n\n{getter_impl}\n\n#endif\n'''\n\n    pins_code_template = '''\n#ifndef PINS_H\n#define PINS_H\n\nclass Pins\n{{\npublic:\n    static const uint8_t SD_CARD;\n    static const uint8_t BUILTIN_LED;\n    \n    {module_pins}\n}};\n\nconst uint8_t Pins::SD_CARD = 5;\nconst uint8_t Pins::BUILTIN_LED = 2;\n\n{module_pin_values}\n\n#endif //PINS_H\n'''\n\n    getters = ''\n    module_names = []\n    getter_implementations = []\n    initialize = 'void DeviceManager::initialize()\\n{\\n'\n    update = 'void DeviceManager::update()\\n{\\n'\n    getter_impl = ''\n    module_pins = ''\n    module_pin_values = ''\n\n    for module_type in module_types:\n        if module_type in modules:\n            for module in modules[module_type]:\n                name = module['Name']\n                module_names.append(f'String _{name}Str = \"{name}\";')\n                if 'PinNumber' in module:\n                    pin = module['PinNumber']\n                    module_pins += 'static const uint8_t ' + name + '_PIN;\\n'\n                    module_pin_values = (f'const uint8_t Pins::{name}_PIN = {pin};')\n    \n                if module_type == 'Buttons':\n                    getters += f'    virtual Button* {name}() = 0;\\n'\n                    getter_implementations.append(f'Button* {name}() override;')\n                    module_names.append(f'Button* _{name};\\n')\n                    initialize += f'    _{name} = new Button({module[\"PinNumber\"]}, \"{name}\", {module[\"ActiveHigh\"]}, {module[\"PullUpActive\"]}, {module[\"ButtonType\"]});\\n'\n                    # initialize += f'    //appContext->systemContext->getModules()->addButton(_{name});\\n\\n'\n                    update += f'    _{name}->update();\\n'\n                    getter_impl += f'Button* DeviceManager::{name}()\\n{{\\n    return appContext->systemContext->getModules()->getButton(\"{name}\");\\n}}\\n\\n'\n\n                elif module_type == 'LCD16X2s':\n                    getters += f'    virtual LCD16X2* {name}() = 0;\\n'\n                    getter_implementations.append(f'LCD16X2* {name}() override;')\n                    module_names.append(f'LCD16X2* _{name};\\n')\n                    initialize += f'    _{name} = new LCD16X2(\"{name}\", {module[\"Address\"]}, {module[\"Width\"]}, {module[\"Height\"]});\\n'\n                    # initialize += f'    appContext->systemContext->getModules()->addLCD16X2(_{name});\\n\\n'\n                    getter_impl += f'LCD16X2* DeviceManager::{name}()\\n{{\\n    return appContext->systemContext->getModules()->getLCD16X2(\"{name}\");\\n}}\\n\\n'\n\n                elif module_type == 'OLEDLCDs':\n                    getters += f'    virtual OLEDLCD* {name}() = 0;\\n'\n                    getter_implementations.append(f'OLEDLCD* {name}() override;')\n                    module_names.append(f'OLEDLCD* _{name};\\n')\n                    initialize += f'    _{name} = new OLEDLCD(\"{name}\", {module[\"Address\"]}, {module[\"Columns\"]}, {module[\"Rows\"]});\\n'\n                    # initialize += f'    appContext->systemContext->getModules()->addOLEDLCD(_{name});\\n\\n'\n                    getter_impl += f'OLEDLCD* DeviceManager::{name}()\\n{{\\n    return appContext->systemContext->getModules()->getOLEDLCD(\"{name}\");\\n}}\\n\\n'\n\n                elif module_type == 'Relays':\n                    getters += f'    virtual Relay* {name}() = 0;\\n'\n                    getter_implementations.append(f'Relay* {name}() override;')\n                    module_names.append(f'Relay* _{name};\\n')\n                    initialize += f'    _{name} = new Relay({module[\"PinNumber\"]}, \"{name}\", {module[\"NormallyOpen\"]});\\n'\n                    # initialize += f'    appContext->systemContext->getModules()->addRelay(_{name});\\n\\n'\n                    update += f'    _{name}->update();\\n'\n                    getter_impl += f'Relay* DeviceManager::{name}()\\n{{\\n    return appContext->systemContext->getModules()->getRelay(\"{name}\");\\n}}\\n\\n'\n\n                elif module_type == 'SoilMoistureSensors':\n                    getters += f'    virtual SoilMoistureSensor* {name}() = 0;\\n'\n                    getter_implementations.append(f'SoilMoistureSensor* {name}() override;')\n                    module_names.append(f'SoilMoistureSensor* _{name};\\n')\n                    initialize += f'    _{name} = new SoilMoistureSensor(\"{name}\", \"{module[\"ConnectionType\"]}\", {module[\"NodeId\"]}, {module[\"SensorPin\"]}, {module[\"DryThreshold\"]}, {module[\"WetThreshold\"]});\\n'\n                    # initialize += f'    appContext->systemContext->getModules()->addSoilMoistureSensor(_{name});\\n\\n'\n                    getter_impl += f'SoilMoistureSensor* DeviceManager::{name}()\\n{{\\n    return appContext->systemContext->getModules()->getSoilMoistureSensor(\"{name}\");\\n}}\\n\\n'\n\n    idevicemanager_code = idevicemanager_code_template.format(\n        getters=getters,\n    )\n\n    devicemanager_code = devicemanager_code_template.format(\n        module_names='\\n    '.join(module_names),\n        getter_implementations='\\n    '.join(getter_implementations),\n        initialize=initialize+'}',\n        update=update+'}',\n        getter_impl=getter_impl,\n    )\n\n    pins_code = pins_code_template.format(\n        module_pins='\\n    '.join(module_pins),\n        module_pin_values='\\n'.join(module_pin_values),\n    )\n\n    return {'idevicemanager_code': idevicemanager_code, 'devicemanager_code': devicemanager_code, 'pins_code': pins_code}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\entity_and_controller.py",
        "content": "def generate_crud(project_name, entity):\n\n    entity_name_upper = entity['name'].upper()\n    entity_name = entity['name']\n    entity_name_lower = entity['name'].lower()\n    \n    function_declaration_input = ', '.join([f'{col[\"type\"]} {col[\"name\"]}' for col in entity['columns']])\n    main_function_input = ', '.join([f'{col[\"name\"]}' for col in entity['columns']])\n    function_input = ', '.join([f'{col[\"name\"]}' for col in entity['columns']])\n    # var_declaration = '\\n    '.join([f'std::string {col[\"name\"]};\\n        req->getParams()->getQueryParameter(\"{col[\"name\"]}\", {col[\"name\"]});' for col in entity['columns']])\n    var_declaration = '\\n    '.join([f'{col[\"type\"]} {col[\"name\"]} = getQueryParameter{col[\"type\"]}(req, \"{col[\"name\"]}\");' for col in entity['columns']])\n    check_params = ' || '.join([f'!req->getParams()->isQueryParameterSet(\"{col[\"name\"]}\")' for col in entity['columns']])\n    callfunction_input = ''\n    for col in entity['columns']:\n        callfunction_input += f'''parameters[\"{col['name']}\"]'''\n        if col['type'] == 'int' or col['type'] == 'bool':\n            callfunction_input += '.toInt()'\n        callfunction_input += ', '\n    callfunction_input = callfunction_input[:-2]\n    code_struct = '''#ifndef {entity_name_upper}APIS_h\n#define {entity_name_upper}APIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/{entity_name}Controller.h\"\n#include \"Permissions.h\"\n\nclass {entity_name}Apis : public ApiInterface\n{{\nprivate:\n    AppContext* context;\n    {entity_name}Controller* {entity_name_lower}Controller;\n    std::string class_path = \"/{entity_name_lower}\";\n\npublic:\n    {entity_name}Apis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate({function_declaration_input});\n    String handleupdate(int id, {function_declaration_input});\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n}};\n\n{entity_name}Apis::{entity_name}Apis(AppContext* cntxt, bool add_apis): context(cntxt) {{\n    {entity_name_lower}Controller = new {entity_name}Controller(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_CREATE) == AuthorizationResults::SUCCESFULL){{return;}}\n        if ({check_params})\n        {{\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }}\n        \n        {var_declaration}\n\n        response(res, handlecreate({main_function_input}));\n    }}));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_UPDATE) == AuthorizationResults::SUCCESFULL){{return;}}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || {check_params})\n        {{\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }}\n\n        int id = getQueryParameterint(req, \"id\");\n        {var_declaration}\n        \n        response(res, handleupdate(id, {main_function_input}));\n    }}));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_DELETE) == AuthorizationResults::SUCCESFULL){{return;}}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {{\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }}\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }}));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_GET) == AuthorizationResults::SUCCESFULL){{return;}}\n        response(res, handlegetAll());\n    }}));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_GET) == AuthorizationResults::SUCCESFULL){{return;}}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {{\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }}\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }}));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {{\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::{entity_name_upper}_GET) == AuthorizationResults::SUCCESFULL){{return;}}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {{\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }}\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }}));\n}}\n\nString {entity_name}Apis::getClassPath()\n{{\n    return String(class_path.c_str());\n}}\n\nString {entity_name}Apis::handlecreate({function_declaration_input}) {{\n    {entity_name}Entity* {entity_name_lower}Entity = new {entity_name}Entity({function_input});\n    int id = {entity_name_lower}Controller->Add(*{entity_name_lower}Entity);\n    if (id != -1)\n    {{\n        return CREATE_SUCCESFULL_MESSAGE;\n    }}\n    \n    return CREATE_FAILED_MESSAGE;\n}}\nString {entity_name}Apis::handleupdate(int id, {function_declaration_input}) {{\n    {entity_name}Entity* {entity_name_lower}Entity = new {entity_name}Entity(id, {function_input});\n    \n    if ({entity_name_lower}Controller->Update(*{entity_name_lower}Entity))\n    {{\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }}\n    \n    return UPDATE_FAILED_MESSAGE;\n}}\nString {entity_name}Apis::handledelete(int id) {{\n    \n    if ({entity_name_lower}Controller->Delete(id))\n    {{\n        return DELETE_SUCCESFULL_MESSAGE;\n    }}\n    \n    return DELETE_FAILED_MESSAGE;\n}}\nString {entity_name}Apis::handlegetAll() {{\n    return {entity_name_lower}Controller->GetAllJson();\n}}\nString {entity_name}Apis::handlegetById(int id) {{\n    return {entity_name_lower}Controller->GetById(id).toJson();\n}}\nString {entity_name}Apis::handleget(String query) {{\n    return {entity_name_lower}Controller->GetJson(query);\n}}\n\nString {entity_name}Apis::callFunction(String functionName, std::map<String, String> parameters) {{\n    \n    if (functionName == \"handlecreate\") {{\n        return handlecreate({callfunction_input});\n    }}\n    if (functionName == \"handleupdate\") {{\n        return handleupdate(parameters[\"id\"].toInt(), {callfunction_input});\n    }}\n    if (functionName == \"handledelete\") {{\n        return handledelete(parameters[\"id\"].toInt());\n    }}\n    if (functionName == \"handlegetAll\") {{\n        return handlegetAll();\n    }}\n    if (functionName == \"handlegetById\") {{\n        return handlegetById(parameters[\"id\"].toInt());\n    }}\n    if (functionName == \"handleget\") {{\n        return handleget(parameters[\"query\"]);\n    }}\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}}\n\n#endif //{entity_name_upper}Apis_h\n\n    '''    \n    permissions = []\n    permissions.append([entity_name.upper() + '_CREATE', entity_name_lower+'_create'])\n    permissions.append([entity_name.upper() + '_UPDATE', entity_name_lower+'_update'])\n    permissions.append([entity_name.upper() + '_DELETE', entity_name_lower+'_delete'])\n    permissions.append([entity_name.upper() + '_GET', entity_name_lower+'_get'])\n\n    code = code_struct.format(entity_name_upper=entity_name_upper, entity_name=entity_name, entity_name_lower=entity_name_lower, \n                              function_declaration_input=function_declaration_input, function_input=function_input, main_function_input=main_function_input,\n                              var_declaration=var_declaration, check_params=check_params, project_name=project_name, callfunction_input= callfunction_input)\n    \n    return {\n        'code' : code,\n        'api_name' : entity['name'] + \"Apis\",\n        'permissions' : permissions\n    } \n\n\n\ndef generate_entity_and_controller(entity):\n    # Entity and Controller class templates\n    entity_template = \"\"\"#ifndef {ENTITY_NAME_UPPER}ENTITY_H\n#define {ENTITY_NAME_UPPER}ENTITY_H\n\n#include <OStad.h>\n\nclass {EntityName}Entity : public Entity {{\npublic:\n    {CONSTANT_COLUMNS}\n\n    {Attributes}\n\n    {EntityName}Entity()  : Entity(){{}}\n\n    {EntityName}Entity(int id, {EntityArguments}) : Entity() {{\n        this->id = id;\n        {AssignAttributes}\n\n        {AddColumns}\n    }}\n\n    {EntityName}Entity({EntityArguments}) : \n        {EntityName}Entity(0, {PassArguments})  {{}}\n\n    static {EntityName}Entity fromEntity(Entity entity)\n    {{\n        {EntityName}Entity {entityName}entity = {EntityName}Entity();\n        {entityName}entity.fromString(entity.toString());\n        return {entityName}entity;\n    }}\n\n    // Setters and Getters for each field\n}};\n\n{COLUMN_DEFINITIONS}\n\n#endif // {ENTITY_NAME_UPPER}ENTITY_H\"\"\"\n\n    controller_template = \"\"\"#ifndef {CONTROLLER_NAME_UPPER}_H\n#define {CONTROLLER_NAME_UPPER}_H\n\n#include <OStad.h>\n#include \"../Entities/{EntityName}Entity.h\"\n#include \"../../AppContext.h\"\n\nclass {ControllerName} : public MainController<{EntityName}Entity> {{\npublic:\n    AppContext* appContext;\n    {ControllerName}(AppContext* appContext, StorageType _storageType) : MainController<{EntityName}Entity>(appContext->systemContext ,\"{entity_name}\", _storageType), appContext(appContext) {{}}\n}};\n\n#endif // {CONTROLLER_NAME_UPPER}_H\"\"\"\n\n    # Step 1: Generate the code for the Entity class.\n    attributes = ''\n    entity_arguments = ''\n    assign_attributes = ''\n    add_columns = ''\n    constant_columns = ''\n    column_definitions = ''\n\n    for column in entity[\"columns\"]:\n        attribute = column[\"name\"]\n        value = column[\"type\"]\n        value_type = 'String' if value == 'string' else value\n\n        attributes += f'{value_type} {attribute};\\n    '\n        entity_arguments += f'{value_type} _{attribute}, '\n        assign_attributes += f'{attribute} = _{attribute};\\n        '\n        if value_type == 'EBPDateTime':\n            add_columns += f'addColumn(COLUMN_{attribute.upper()}, {attribute}.toDateTimeString(), \"{value}\");\\n        '\n        else:\n            add_columns += f'addColumn(COLUMN_{attribute.upper()}, String({attribute}), \"{value}\");\\n        '\n        constant_columns += f'static const String COLUMN_{attribute.upper()};\\n    '\n        column_definitions += f'const String {entity[\"name\"]}Entity::COLUMN_{attribute.upper()} = \"{attribute}\";\\n'\n    \n    entity_code = entity_template.format(\n        ENTITY_NAME_UPPER=entity[\"name\"].upper(),\n        EntityName=entity[\"name\"],\n        entityName=entity[\"name\"].lower(),\n        Attributes=attributes,\n        EntityArguments=entity_arguments[:-2],\n        AssignAttributes=assign_attributes,\n        AddColumns=add_columns,\n        CONSTANT_COLUMNS=constant_columns,\n        COLUMN_DEFINITIONS=column_definitions,\n        PassArguments=', '.join([f'_{attr[\"name\"]}' for attr in entity[\"columns\"]])\n    )\n\n    # Step 2: Generate the code for the Controller class.\n    controller_name = entity[\"name\"] + 'Controller'\n    controller_code = controller_template.format(\n        CONTROLLER_NAME_UPPER=controller_name.upper(),\n        ControllerName=controller_name,\n        EntityName=entity[\"name\"],\n        entity_name=entity[\"name\"].lower()\n    )\n\n    return {\n        'entity_name': entity[\"name\"] + \"Entity\",\n        'api_name': entity[\"name\"] + \"Apis\",\n        'controller_name': entity[\"name\"] + \"Controller\",\n        'code': entity_code,\n        'controller_code': controller_code\n    }\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\generator.py",
        "content": "import shutil\nimport json\nimport os\n\nfrom entity_and_controller import generate_entity_and_controller, generate_crud\nfrom api_class import generate_api_class, generate_apis_file, generate_permissions_file\nfrom config import generate_config, generate_config_key\nfrom devicemanager import generate_devicemanager\nfrom project_class import generate_main_classes, generate_project_class\nfrom postman import generate_postman_json\nfrom certificate_generator import generate_certificate\n\ndef generate_file(file_path, code):\n    # This function writes code to a file. It first checks if the file already exists.\n    if not os.path.exists(file_path):\n        with open(file_path, 'w') as f:\n            f.write(code)\n\ndef generate_all(json_data):\n    # This function orchestrates the entire code generation process.\n\n    # Step 1: Load the JSON data.\n    project_name = json_data[\"ProjectName\"]\n    project_path = json_data[\"ProjectPath\"]\n    entities = json_data[\"Entities\"]\n    apis = json_data[\"Apis\"]\n    configs = json_data[\"Configs\"]\n    modules = json_data[\"Modules\"]\n\n    # Step 2: Generate the code.\n    entity_code = [generate_entity_and_controller(entity) for entity in entities]\n    cruds_code = [generate_crud(project_name, entity) for entity in entities]\n    api_code = [generate_api_class(project_name, api) for api in apis]\n    device_manager_code = generate_devicemanager(modules)\n    config_code = generate_config(configs, project_name)\n    config_key_code = generate_config_key(configs, project_name)\n    project_code = generate_project_class(project_name)\n    main_code = generate_main_classes(project_name)\n    apis_file = generate_apis_file(project_name, apis, entities)\n    postman_import = generate_postman_json(json_data)\n    permissions = []\n    \n    # Step 3: Create directories if they do not exist.\n    os.makedirs(os.path.join(project_path, project_name, 'postman_import'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', 'Apis'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', 'Config'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', 'Database', 'Controllers'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', 'Database', 'Entities'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', 'DeviceManager'), exist_ok=True)\n    os.makedirs(os.path.join(project_path, project_name, 'src', project_name), exist_ok=True)\n\n    # Step 4: Write the code to .h files.\n    for entity in entity_code:\n        generate_file(os.path.join(project_path, project_name, 'src', 'Database', 'Entities', entity['entity_name'] + '.h'), entity['code'])\n        generate_file(os.path.join(project_path, project_name, 'src', 'Database', 'Controllers', entity['controller_name'] + '.h'), entity['controller_code'])\n            \n    for crud in cruds_code:\n        generate_file(os.path.join(project_path, project_name, 'src', 'Apis', crud['api_name'] + '.h'), crud['code'])\n        for permission in crud['permissions']:\n            permissions.append(permission)\n\n    for api in api_code:\n        generate_file(os.path.join(project_path, project_name, 'src', 'Apis', api['name'] + '.h'), api['code'])\n        for permission in api['permissions']:\n            permissions.append(permission)\n\n    permissions_code = generate_permissions_file(project_name, permissions)\n    \n    # Call the function and capture the output\n    cert_key_data = generate_certificate()\n\n\n\n    generate_file(os.path.join(project_path, project_name, 'src', 'Apis', 'Apis.h'), apis_file)\n    generate_file(os.path.join(project_path, project_name, 'src', 'Apis', 'Permissions.h'), permissions_code)\n\n    generate_file(os.path.join(project_path, project_name, 'src', 'Config', project_name + 'Config.h'), config_code['config_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'Config', 'Default' + project_name + 'Configs.h'), config_code['default_config_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'Config', project_name + 'ConfigKeys.h'), config_key_code)\n    generate_file(os.path.join(project_path, project_name, 'src', 'Database', 'Controllers', project_name + 'ConfigController.h'), config_code['config_controller_code'])\n\n    generate_file(os.path.join(project_path, project_name, 'src', 'DeviceManager', 'DeviceManager.h'), device_manager_code['devicemanager_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'DeviceManager', 'IDeviceManager.h'), device_manager_code['idevicemanager_code'])\n\n    generate_file(os.path.join(project_path, project_name, 'src', project_name, 'I'+project_name+'.h'), project_code['iproject_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', project_name, project_name+'.h'), project_code['project_code'])\n    \n    # generate_file(os.path.join(project_path, project_name, 'src', 'Pins.h'), device_manager_code['pins_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'AppContext.h'), main_code['appcontext_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'Runtime.h'), main_code['runtime_code'])\n    generate_file(os.path.join(project_path, project_name, 'src', 'cert_key.h'), cert_key_data)\n    generate_file(os.path.join(project_path, project_name, project_name + '.ino'), main_code['main_ino_code'])\n    generate_file(os.path.join(project_path, project_name, 'postman_import', project_name + '.json'), json.dumps(postman_import))\n    return { 'message' : f\"Code generation for the project '{project_name}' is complete. You can find all the generated files at:\\n{project_path}.\\n\\n\\n*** Enjoy It! :) ***\\nhadalipoor@gmail.com\\nOStad.wiki\",\n            'project_path' : project_path,\n            'project_name' : project_name\n    }\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\postman.py",
        "content": "import json\nimport os\nfrom sys_apis import system_apis\n\n\ninput_json_path = ''\nouput_postman_json_path = ''\ndef generate_postman_json(data):\n\n    # Define default server\n    default_server = \"192.168.4.1\"\n\n    # Parse system_apis JSON and extract Ostad folder\n    system_apis_data = json.loads(system_apis)\n    ostad_folder = next((item for item in system_apis_data[\"item\"] if item[\"name\"] == \"Ostad\"), None)\n\n    # Define the skeleton of Postman import JSON\n    postman_data = {\n        \"info\": {\n            \"_postman_id\": \"0c52ebe2-3143-4c45-b132-8e0746146595\",\n            \"name\": data[\"ProjectName\"],\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": []\n    }\n\n    # Add Ostad folder if it exists\n    if ostad_folder:\n        postman_data[\"item\"].append(ostad_folder)\n\n    # Create CRUD operations for each entity\n    for entity in data[\"Entities\"]:\n        entity_item = {\n            \"name\": entity[\"name\"],\n            \"item\": []\n        }\n        crud_operations = [\"getAll\", \"getById\", \"create\", \"update\", \"delete\"]\n        http_methods = [\"GET\", \"GET\", \"POST\", \"PUT\", \"DELETE\"]\n        for operation, http_method in zip(crud_operations, http_methods):\n            query_params = []\n            if operation in [\"update\", \"create\"]:\n                query_params = [{\"key\": column['name'], \"value\": \"SAMPLE\"} for column in entity['columns']]\n                if operation == \"update\":\n                    query_params.append({\"key\": \"id\", \"value\": \"SAMPLE\"})\n            elif operation == \"getById\":\n                query_params = [{\"key\": \"id\", \"value\": \"SAMPLE\"}]\n            entity_item[\"item\"].append({\n                \"name\": operation,\n                \"request\": {\n                    \"method\": http_method,\n                    \"header\": [],\n                    \"url\": {\n                        \"raw\": f\"http://{default_server}/{entity['name'].lower()}/{operation}\",\n                        \"protocol\": \"http\",\n                        \"host\": [default_server],\n                        \"path\": [entity[\"name\"].lower(), operation],\n                        \"query\": query_params\n                    }\n                },\n                \"response\": []\n            })\n        postman_data[\"item\"].append(entity_item)\n\n    # Add APIs from the input file\n    for api in data[\"Apis\"]:\n        api_item = {\n            \"name\": api[\"name\"],\n            \"item\": []\n        }\n        for api_sub in api[\"Apis\"]:\n            query_params = [{\"key\": k, \"value\": str(v)} for k, v in api_sub[\"Data\"].items()]\n            api_item[\"item\"].append({\n                \"name\": api_sub[\"ApiName\"],\n                \"request\": {\n                    \"method\": api_sub[\"Method\"],\n                    \"header\": [],\n                    \"body\": {\n                        \"mode\": \"raw\",\n                        \"raw\": json.dumps(api_sub[\"Data\"])\n                    },\n                    \"url\": {\n                        \"raw\": f\"http://{default_server}{api_sub['EndPoint']}\",\n                        \"protocol\": \"http\",\n                        \"host\": [default_server],\n                        \"path\": api_sub['EndPoint'].split('/')[1:],\n                        \"query\": query_params\n                    }\n                },\n                \"response\": []\n            })\n        postman_data[\"item\"].append(api_item)\n    # # Write to Postman import JSON file\n    # with open(ouput_postman_json_path, 'w') as file:\n    #     json.dump(postman_data, file, indent=4)\n\n    print(\"Postman import JSON file has been successfully created!\")\n    return postman_data\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\project_class.py",
        "content": "def generate_project_class(project_name):\n\n    iproject_code = f\"\"\"\\\n#ifndef I{project_name.upper()}\n#define I{project_name.upper()}\n\nclass I{project_name} {{\npublic:\n    virtual void update() = 0;\n    virtual void initialize() = 0;\n}};\n\n#endif // I{project_name.upper()}\n\"\"\"\n\n    project_code = f\"\"\"\\\n#ifndef {project_name.upper()}_H\n#define {project_name.upper()}_H\n\n#include \"I{project_name}.h\"\n#include \"../AppContext.h\"\n#include \"../Config/Default{project_name}Configs.h\"\n\nclass {project_name} : public I{project_name} {{\nprivate:\n    AppContext* context;\n\npublic:\n    {project_name}(AppContext* context);\n    \n    void initialize() override;\n    void update() override;\n}};\n\n{project_name}::{project_name}(AppContext* context)\n    : context(context) {{}}\n\nvoid {project_name}::initialize() {{\n\n}}\n\nvoid {project_name}::update() {{\n\n}}\n\n#endif //{project_name.upper()}_H\n\"\"\"\n    return {'iproject_code': iproject_code, 'project_code': project_code}\n\ndef generate_main_classes(project_name):\n    appcontext_code = f\"\"\"\\\n#ifndef APPCONTEXT_H\n#define APPCONTEXT_H\n\n#include <Context.h>\n#include \"DeviceManager/IDeviceManager.h\"\n#include \"{project_name}/I{project_name}.h\"\n\nclass AppContext\n{{\nprivate:\n    IDeviceManager* _deviceManager;\n    IConfig* {project_name.lower()}Config;\n    I{project_name}* {project_name.lower()};\n\npublic:\n    AppContext(Context* context): systemContext(context){{}}\n    ~AppContext(){{}}\n\n    IDeviceManager* getDeviceManager() {{ return _deviceManager; }}\n    void setDeviceManager(IDeviceManager* deviceManager) {{ _deviceManager = deviceManager; }}\n\n    IConfig* get{project_name}Config() {{ return {project_name.lower()}Config; }}\n    void set{project_name}Config(IConfig* config) {{ {project_name.lower()}Config = config; }}\n    \n    I{project_name}* get{project_name}() {{ return {project_name.lower()}; }}\n    void set{project_name.lower()}(I{project_name}* _{project_name.lower()}) {{ {project_name.lower()} = _{project_name.lower()}; }}\n    \n    Context* systemContext;\n}};\n\n#endif //APPCONTEXT_H\n\"\"\"\n\n\n    runtime_code = f\"\"\"\n#ifndef RUNTIME_H\n#define RUNTIME_H\n\n#define LOG_LEVEL_DEBUG\n#define LOG_LEVEL_INFO\n#define LOG_LEVEL_WARNING\n#define LOG_LEVEL_ERROR\n#define OSTAD_NETWORK_ENABLE\n\n#include \"AppContext.h\"\n#include \"DeviceManager/DeviceManager.h\"\n#include \"Config/{project_name}Config.h\"\n#include \"{project_name}/{project_name}.h\"\n#include \"Apis/Apis.h\"\n#include \"cert_key.h\"\n\n// LogLevel definition\n#define LOG_LEVEL_DEBUG\n#define LOG_LEVEL_INFO\n#define LOG_LEVEL_WARNING\n#define LOG_LEVEL_ERROR\n\nclass Runtime\n{{\nprivate:\n    OStad* ostad;\n    {project_name}Config* {project_name.lower()}Config;\n    DeviceManager* deviceManager;\n    {project_name}* {project_name.lower()};\n\npublic:\n    Runtime();\n    void update();\n\n    AppContext* appContext;\n    Context* systemContext;\n}};\n\nRuntime::Runtime()\n{{\n    // CertificateData certificateData;\n    // certificateData.certificate = const_cast<unsigned char*>(certificate);\n    // certificateData.privatekey = const_cast<unsigned char*>(private_key);\n    // certificateData.certificate_length = sizeof(certificate);\n    // certificateData.privateky_length = sizeof(private_key);\n\n    // ostad = new OStad(StorageType::SPIFFS_TYPE, certificateData);\n    // If you want to use HTTPS on ESP32 server, add certificate and private_key and uncomment above code and comment below line\n    ostad = new OStad(StorageType::SPIFFS_TYPE);\n\n    \n    systemContext = ostad->getContext();\n    appContext = new AppContext(systemContext);\n\n    {project_name.lower()}Config = new {project_name}Config(appContext);\n    deviceManager = new DeviceManager(appContext);\n    {project_name.lower()} = new {project_name}(appContext);\n\n    appContext->set{project_name}Config({project_name.lower()}Config);    \n    appContext->setDeviceManager(deviceManager);\n\n    appContext->set{project_name.lower()}({project_name.lower()});\n\n    //initialize {project_name.lower()}Config first of all initialization\n    {project_name.lower()}Config->initialize();\n    deviceManager->initialize();\n    {project_name.lower()}->initialize();\n\n    createApis(appContext);\n\n    Permissions::addPermissions(systemContext);\n    \n    ostad->begin();\n}}\n\nvoid Runtime::update()\n{{\n    ostad->update();\n    deviceManager->update();\n    {project_name.lower()}->update();\n}}\n\n#endif //RUNTIME_H\n\"\"\"\n\n    main_ino_code = f\"\"\"\\\n#include \"src/Runtime.h\"\n\nRuntime* runtime;\n\nvoid setup() {{\n  Serial.begin(115200);\n  LittleFS.begin(true);\n  runtime = new Runtime();\n}}\nvoid loop() {{\n  runtime->update();\n}}\n\"\"\"\n    return {'appcontext_code': appcontext_code, 'runtime_code': runtime_code, 'main_ino_code': main_ino_code}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\generator\\sys_apis.py",
        "content": "system_apis = \"\"\"\n{\n\t\"info\": {\n\t\t\"_postman_id\": \"2a331397-a133-4d9c-9937-a09a939a7511\",\n\t\t\"name\": \"ESP\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\n\t\t\"_exporter_id\": \"935248\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Ostad\",\n\t\t\t\"item\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Clock\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"now\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/now\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"now\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"now Jalali\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/nowJalali\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"nowJalali\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"syncTime\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/syncTime\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"syncTime\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"adjustTime\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/adjustTime?date=11/19/2023 07:33:00\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"adjustTime\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"date\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"11/19/2023 07:33:00\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"WiFi\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Broadcast\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/broadcast?broadcast=SampleMessage\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"broadcast\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"broadcast\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleMessage\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Restart\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/restart\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"restart\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Disconnect WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/disconnect_wifi\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"disconnect_wifi\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Forget WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/forget_wifi?ssid=SAMPLE\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"forget_wifi\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SAMPLE\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Connect WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/connect_wifi?ssid=Molkat\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"connect_wifi\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Molkat\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Add SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/add_ssid?ssid=SAMPLE&password=PASSWORD\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"add_ssid\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SAMPLE\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"PASSWORD\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get All SSIDs\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/get_all_ssids\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"get_all_ssids\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"File\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Browse Folder\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/fileApi/browse_folder?path=/\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"browse_folder\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Open File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/fileApi/open?path=/system_config.db\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"open\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/system_config.db\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Delete File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/delete?path=SamplePath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Write File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://10.168.221.1/fileApi/write?path=/db/student/db&content=1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"221\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"write\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/db/student/db\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"content\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Format File System\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/format\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"format\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Rename File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/rename?path=SamplePath&new_name=NewName\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"rename\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"new_name\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"NewName\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Move File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/move?source_path=SampleSourcePath&destination_path=SampleDestinationPath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"move\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"source_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSourcePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"destination_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleDestinationPath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Copy File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/copy?source_path=SampleSourcePath&destination_path=SampleDestinationPath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"copy\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"source_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSourcePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"destination_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleDestinationPath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Duplicate File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/fileApi/duplicate?path=SamplePath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"duplicate\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Make Folder\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/fileApi/mkdir?path=/Test\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"mkdir\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/Test\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"SSID\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Create SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.4.1/ssid/create?SSID=Molkat&Password=Bo!2bjaq\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"SSID\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Molkat\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"Password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Bo!2bjaq\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Update SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/update?id=1&SSID=SampleSSID&Password=SamplePassword\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"SSID\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSSID\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"Password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePassword\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Delete SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/delete?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/get?query=SampleQuery\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"get\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"query\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleQuery\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get SSID By ID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get All SSIDs\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/getAll\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"AutenticationConfig\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"delete\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.102/authenticationConfig/delete?id=5\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"102\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"5\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"create\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.4.1/authenticationConfig/create?key=db_change_info_save&value=false\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"db_change_info_save\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"update\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/authenticationConfig/update?id=4&key=wifi_mode_mesh&value=true\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"4\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"wifi_mode_mesh\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"submit\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/submit?key=mesh_root&value=false\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"submit\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"mesh_root\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getAll\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.101/authenticationConfig/getAll\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getById\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"get\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"SystemConfig\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"delete\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/systemConfig/delete?id=5\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"5\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"create\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.4.1/systemConfig/create?key=db_change_info_save&value=false\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"db_change_info_save\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"update\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/systemConfig/update?id=4&key=wifi_mode_mesh&value=true\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"4\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"wifi_mode_mesh\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"submit\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/systemConfig/submit?key=mesh_root&value=false\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"submit\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"mesh_root\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getAll\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"auth\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"bearer\",\n\t\t\t\t\t\t\t\t\t\"bearer\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"token\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"qdv66/UtLWjJCeWXodHijy9l4vfnrE6l/e8U6Fx/aAM=\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.101/systemConfig/getAll\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getById\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/systemConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"get\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/systemConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\"\"\"\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\authentication.json",
        "content": "{\n    \"ProjectName\" : \"Authentication\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"User\",\n            \"columns\": [\n                {\n                    \"name\": \"Username\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Password\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Email\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PhoneNumber\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"RoleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"TwoFactorAuth\",\n                    \"type\": \"bool\"\n                },\n                {\n                    \"name\": \"ApiKey\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Token\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"TokenExpiryTime\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Role\",\n            \"columns\": [\n                {\n                    \"name\": \"RoleName\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Permission\",\n            \"columns\": [\n                {\n                    \"name\": \"PermissionName\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PermissionGroup\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"RolePermission\",\n            \"columns\": [\n                {\n                    \"name\": \"RoleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"PermissionId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"UserResetPass\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"ResetToken\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"ExpiryTime\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SecurityQuestion\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"SecurityQuestionTitleId\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Answer\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SecurityQuestionTitle\",\n            \"columns\": [\n                {\n                    \"name\": \"QuestionTitle\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"LoginAttempt\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Timestamp\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        },\n        {\n            \"name\": \"AccountLockout\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LockoutStartTime\",\n                    \"type\": \"EBPDateTime\"\n                },\n                {\n                    \"name\": \"LockoutEndTime\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        },\n        {\n            \"name\": \"TwoFactorAuth\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"OtpCode\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"ExpiryTime\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        },\n        {\n            \"name\": \"AccountActivityLog\",\n            \"columns\": [\n                {\n                    \"name\": \"UserId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Activity\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Timestamp\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        }\n    ],\n    \"Apis\": [\n        {\n            \"name\": \"Authentication\",\n            \"Url\": \"/authentication\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"Login\",\n                    \"EndPoint\": \"/authentication/login\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"password\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"PasswordReset\",\n                    \"EndPoint\": \"/authentication/password_reset\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"PasswordResetConfirm\",\n                    \"EndPoint\": \"/authentication/password_reset/confirm\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"reset_token\": \"token\",\n                        \"new_password\": \"new_password\"\n                    }\n                },\n                {\n                    \"ApiName\": \"TwoFactorAuth\",\n                    \"EndPoint\": \"/authentication/two_factor_auth\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"TwoFactorAuthConfirm\",\n                    \"EndPoint\": \"/authentication/two_factor_auth/confirm\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"otp_code\": \"otp_code\"\n                    }\n                },\n                {\n                    \"ApiName\": \"AccountLock\",\n                    \"EndPoint\": \"/account/lock\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"AccountUnlock\",\n                    \"EndPoint\": \"/account/unlock\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"SecurityQuestionAnswer\",\n                    \"EndPoint\": \"/account/security_question/answer\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"question_id\": \"question_id\",\n                        \"answer\": \"answer\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"TestRequests\",\n            \"Url\": \"/testrequests\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"AddData\",\n                    \"EndPoint\": \"/testrequests/adddata\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"data\": \"data\"\n                    }\n                },\n                {\n                    \"ApiName\": \"GetData\",\n                    \"EndPoint\": \"/testrequests/getdata\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                    }\n                },\n                {\n                    \"ApiName\": \"PublicRequest\",\n                    \"EndPoint\": \"/testrequests/publicrequest\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                    }\n                }\n            ]\n        }\n    ],\n    \"Configs\": [\n        {\n            \"Key\": \"authentication_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"two_factor_authentication_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"two_factor_authentication_email_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"two_factor_authentication_sms_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"access_with_api_key\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"reset_password_with_sms\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"reset_password_with_email\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"reset_password_with_button\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"reset_password_with_security_question\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"reset_password_expire_hour\",\n            \"DefaultValue\": \"24\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"login_attempt_count\",\n            \"DefaultValue\": \"10\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"lock_user_login_attempt\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"lock_user_minute\",\n            \"DefaultValue\": \"30\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"two_factor_auth_expire_hour\",\n            \"DefaultValue\": \"24\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"log_account_activity\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        }\n    ],\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"SetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n        ],\n        \"Relays\": [\n        ],\n        \"SoilMoistureSensors\": [\n        ]\n    }\n}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\data.json",
        "content": "{\n    \"ProjectName\" : \"SmartGrowth\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\" : \"PlantsType\",\n            \"columns\" : [\n                {\n                    \"name\" : \"type\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"condition_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"TemperatureCondition\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"min_temperature\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"max_temperature\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"cooler_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"hitter_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"HumidityCondition\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"min_humidity\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"max_humidity\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"drying_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"humidifying_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"SoilMoistureCondition\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"min_soil_moisture\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"max_soil_moisture\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"pump_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"soil_moisture_warning_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"LightCondition\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"start_time\",\n                    \"type\" : \"EBPDateTime\"\n                },\n                {\n                    \"name\" : \"end_time\",\n                    \"type\" : \"EBPDateTime\"\n                },\n                {\n                    \"name\" : \"led_module_name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"Condition\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"temperature_condition_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"humidity_condition_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"soilMoistureC_condition_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"light_condition_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"description\",\n                    \"type\" : \"string\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"Plants\",\n            \"columns\" : [\n                {\n                    \"name\" : \"plants_type_id\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"string\"\n                },\n                {\n                    \"name\" : \"active\",\n                    \"type\" : \"bool\"\n                },\n                {\n                    \"name\" : \"condition_id\",\n                    \"type\" : \"int\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\" : [\n        {\n            \"name\" : \"Plants\",\n            \"Url\" : \"/plants/\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"disableCondition\",\n                    \"EndPoint\": \"/plants/disable_condition\",\n                    \"Method\": \"POST\",\n                    \"summary\": \"Returns a list of users.\",\n                    \"description\": \"Optional description in Markdown.\",\n                    \"Data\": {\n                        \"condition_id\": \"1\"\n                    },\n                    \"response_description\": \"A JSON array of user names\"\n\n                }\n            ]\n        }\n        \n    ],\n\n    \"Configs\" : [\n        {\n            \"Key\" : \"system_enable\",\n            \"DefaultValue\" : \"true\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"pumpRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"soilMoisture\",\n                \"ConnectionType\": \"PIN\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\data_sample_full.json",
        "content": "{\n    \"ProjectName\" : \"RoomLight2\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\" : \"Relay\",\n            \"columns\" : [\n                {\n                    \"name\" : \"name\",\n                    \"type\" : \"String\"\n                },\n                {\n                    \"name\" : \"pin_number\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"normally_open\",\n                    \"type\" : \"bool\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"RoomState\",\n            \"columns\" : [\n                {\n                    \"name\" : \"state_name\",\n                    \"type\" : \"String\"\n                },\n                {\n                    \"name\" : \"min_temperature\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"max_temperature\",\n                    \"type\" : \"int\"\n                },\n                {\n                    \"name\" : \"active\",\n                    \"type\" : \"bool\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\" : [\n        {\n            \"name\" : \"RoomLight\",\n            \"Url\" : \"/roomlight/\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"setLightMode\",\n                    \"EndPoint\": \"/roomlight/setLightMode\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"lightMode\": \"mode_example\",\n                        \"enable\" : false\n                    }\n                },\n                {\n                    \"ApiName\": \"changeSpeed\",\n                    \"EndPoint\": \"/roomlight/changeSpeed\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"speed\": 50\n                    }\n                },\n                {\n                    \"ApiName\": \"setPrimaryColor\",\n                    \"EndPoint\": \"/roomlight/setPrimaryColor\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"color\": \"255,255,255\",\n                        \"speed\": 50\n                    }\n                },\n                {\n                    \"ApiName\": \"setSecondaryColor\",\n                    \"EndPoint\": \"/roomlight/setSecondaryColor\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"color\": \"100,200,150\",\n                        \"type\" : \"new\"\n                    }\n                },\n                {\n                    \"ApiName\": \"getLightMode\",\n                    \"EndPoint\": \"/roomlight/getLightMode\",\n                    \"Method\": \"GET\"\n                },\n                {\n                    \"ApiName\": \"getSpeed\",\n                    \"EndPoint\": \"/roomlight/getSpeed\",\n                    \"Method\": \"GET\"\n                },\n                {\n                    \"ApiName\": \"getPrimaryColor\",\n                    \"EndPoint\": \"/roomlight/getPrimaryColor\",\n                    \"Method\": \"GET\"\n                },\n                {\n                    \"ApiName\": \"getSecondaryColor\",\n                    \"EndPoint\": \"/roomlight/getSecondaryColor\",\n                    \"Method\": \"GET\"\n                }\n            ]\n        },\n        {\n            \"name\" : \"RoomState\",\n            \"Url\" : \"/roomstate/\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"create\",\n                    \"EndPoint\": \"/roomstate/create\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"state_name\": \"new state\",\n                        \"min_temperature\" : 20,\n                        \"max_temperature\" : 40,\n                        \"active\" : true\n                    }\n                },\n                {\n                    \"ApiName\": \"update\",\n                    \"EndPoint\": \"/roomstate/update\",\n                    \"Method\": \"PUT\",\n                    \"Data\": {\n                        \"id\": 1,\n                        \"state_name\": \"my state\",\n                        \"min_temperature\" : 20,\n                        \"max_temperature\" : 40,\n                        \"active\" : true\n                    }\n                },\n                {\n                    \"ApiName\": \"delete\",\n                    \"EndPoint\": \"/roomstate/delete\",\n                    \"Method\": \"DELETE\",\n                    \"Data\": {\n                        \"id\": 1\n                    }\n                },\n                {\n                    \"ApiName\": \"getAll\",\n                    \"EndPoint\": \"/roomstate/getAll\",\n                    \"Method\": \"GET\"\n                },\n                {\n                    \"ApiName\": \"getById\",\n                    \"EndPoint\": \"/roomstate/getById\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"id\": 1\n                    }\n                },\n                {\n                    \"ApiName\": \"get\",\n                    \"EndPoint\": \"/roomstate/get\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"query\": \"state_name=my_state\"\n                    }\n                }\n\n            ]\n        }\n        \n    ],\n\n    \"Configs\" : [\n        {\n            \"Key\" : \"light_mode\",\n            \"DefaultValue\" : \"Static\"\n        },\n        {\n            \"Key\" : \"speed\",\n            \"DefaultValue\" : \"30\"\n        },\n        {\n            \"Key\" : \"primary_color\",\n            \"DefaultValue\" : \"219-166-31\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"RESET_BUTTON_NAME\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"LCD16X2s\": [\n            {\n                \"Name\": \"LCD_NAME\",\n                \"Address\": \"0x27\",\n                \"Width\": \"16\",\n                \"Height\": \"2\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"OLED_NAME\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"BOARD_LED_NAME\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"SOIL_SENSOR_NAME\",\n                \"ConnectionType\": \"Wifi\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\elevator.json",
        "content": "{\n    \"ProjectName\" : \"ElevatorControl\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"Floor\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"AccessRestrictions\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Elevator\",\n            \"columns\": [\n                {\n                    \"name\": \"CurrentFloor\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Status\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Direction\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"LastMaintenanceDate\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"RequestLog\",\n            \"columns\": [\n                {\n                    \"name\": \"RequestFloor\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Direction\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"RequestTime\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ElevatorLog\",\n            \"columns\": [\n                {\n                    \"name\": \"Action\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"ActionTime\",\n                    \"type\": \"String\"\n                }\n            ]\n        }\n    ],\n    \"Apis\": [\n        {\n            \"name\": \"ElevatorControl\",\n            \"Url\": \"/elevatorcontrol\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"MoveUpManual\",\n                    \"EndPoint\": \"/elevatorcontrol/moveupmanual\",\n                    \"Method\": \"POST\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"MoveDownManual\",\n                    \"EndPoint\": \"/elevatorcontrol/movedownmanual\",\n                    \"Method\": \"POST\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"StopManual\",\n                    \"EndPoint\": \"/elevatorcontrol/stopmanual\",\n                    \"Method\": \"POST\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"FloorRequested\",\n                    \"EndPoint\": \"/elevatorcontrol/floorrequested\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"floor\": \"value\"\n                    }\n                },\n                {\n                    \"ApiName\": \"CalibrationRequested\",\n                    \"EndPoint\": \"/elevatorcontrol/calibrationrequested\",\n                    \"Method\": \"GET\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"EMSStopRequested\",\n                    \"EndPoint\": \"/elevatorcontrol/emsstoprequested\",\n                    \"Method\": \"GET\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"SetMovementMethod\",\n                    \"EndPoint\": \"/elevatorcontrol/setmovementmethod\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"method\": \"value\"\n                    }\n                },\n                {\n                    \"ApiName\": \"GetMovementMethod\",\n                    \"EndPoint\": \"/elevatorcontrol/getmovementmethod\",\n                    \"Method\": \"GET\",\n                    \"Data\": {}\n                },\n                {\n                    \"ApiName\": \"GetState\",\n                    \"EndPoint\": \"/elevatorcontrol/getstate\",\n                    \"Method\": \"GET\",\n                    \"Data\": {}\n                }\n            ]\n        }\n    ],\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            },\n            {\n                \"PinNumber\": \"1\",\n                \"Name\": \"EMSButton\",\n                \"ActiveHigh\": \"true\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            },\n            {\n                \"PinNumber\": \"2\",\n                \"Name\": \"floorSensor1\",\n                \"ActiveHigh\": \"true\",\n                \"PullUpActive\": \"true\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            },\n            {\n                \"PinNumber\": \"2\",\n                \"Name\": \"floorSensor2\",\n                \"ActiveHigh\": \"true\",\n                \"PullUpActive\": \"true\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            },\n            {\n                \"PinNumber\": \"2\",\n                \"Name\": \"floorSensor3\",\n                \"ActiveHigh\": \"true\",\n                \"PullUpActive\": \"true\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            },\n            {\n                \"PinNumber\": \"2\",\n                \"Name\": \"floorSensor4\",\n                \"ActiveHigh\": \"true\",\n                \"PullUpActive\": \"true\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"4\",\n                \"Name\": \"upRelay\",\n                \"NormallyOpen\": \"true\"\n            },\n            {\n                \"PinNumber\": \"5\",\n                \"Name\": \"downRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ]\n    },\n    \"Configs\": [\n        {\n            \"Key\": \"elevator_max_capacity\",\n            \"DefaultValue\": \"10\",\n            \"Comment\": \"Defines the maximum capacity of the elevator.\"\n        },\n        {\n            \"Key\": \"emergency_button_enabled\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the emergency stop button.\"\n        },\n        {\n            \"Key\": \"floor_sensor_interval\",\n            \"DefaultValue\": \"5\",\n            \"Comment\": \"Defines the frequency (in seconds) at which floor sensor data is gathered.\"\n        },\n        {\n            \"Key\": \"calibration_sensor_interval\",\n            \"DefaultValue\": \"60\",\n            \"Comment\": \"Specifies the time interval (in minutes) for calibration sensor check.\"\n        },\n        {\n            \"Key\": \"parking_floor\",\n            \"DefaultValue\": \"1\",\n            \"Comment\": \"Defines the floor where the elevator parks when not in use.\"\n        },\n        {\n            \"Key\": \"wait_time\",\n            \"DefaultValue\": \"500\",\n            \"Comment\": \"Specifies the time (in milliseconds) the elevator waits at each floor.\"\n        },\n        {\n            \"Key\": \"relay_start_delay\",\n            \"DefaultValue\": \"500\",\n            \"Comment\": \"Defines the start delay (in milliseconds) for the relays.\"\n        },\n        {\n            \"Key\": \"number_of_floors\",\n            \"DefaultValue\": \"5\",\n            \"Comment\": \"Specifies the total number of floors in the building.\"\n        },\n        {\n            \"Key\": \"calibration_sensor_position\",\n            \"DefaultValue\": \"top\",\n            \"Comment\": \"Specifies the position of the calibration sensor (top or bottom).\"\n        },\n        {\n            \"Key\": \"admin_phone_number\",\n            \"DefaultValue\": \"\",\n            \"Comment\": \"\"\n        },\n        {\n            \"Key\": \"send_error_data\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"\"\n        },\n        {\n            \"Key\": \"calibration_on_startup\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"\"\n        },\n        {\n            \"Key\": \"calibration_sensor_with_floor\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"\"\n        }\n    ]\n}\n\n\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\growify.json",
        "content": "{\n    \"ProjectName\" : \"Growify\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"TemperatureCondition\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"MinTemperature\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"MaxTemperature\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LowTempAlertThreshold\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HighTempAlertThreshold\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"HumidityCondition\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"MinHumidity\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"MaxHumidity\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LowHumidityAlertThreshold\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HighHumidityAlertThreshold\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"LightCondition\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"MinLightIntensity\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"MaxLightIntensity\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LowLightIntensityAlertThreshold\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HighLightIntensityAlertThreshold\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SoilMoistureCondition\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"MinSoilMoisture\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"MaxSoilMoisture\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LowSoilMoistureAlertThreshold\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HighSoilMoistureAlertThreshold\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Condition\",\n            \"columns\": [\n                {\n                    \"name\": \"TemperatureConditionId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HumidityConditionId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LightConditionId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"SoilMoistureConditionId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Greenhouse\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"ConditionId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"PlantType\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Plant\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PlantTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"GreenhouseSensor\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"SensorModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Role\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"GreenhouseControl\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"ControlModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Role\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"TemperatureLog\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"TemperatureReading\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"CoolerState\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"HeaterState\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"HumidityLog\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"HumidityReading\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"DryerState\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"HumidifierState\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"LightLog\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LightIntensityReading\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"LightState\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SoilMoistureLog\",\n            \"columns\": [\n                {\n                    \"name\": \"GreenhouseId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"SoilMoistureReading\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"WaterPumpState\",\n                    \"type\": \"String\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\": [\n        {\n            \"name\": \"Greenhouses\",\n            \"Url\": \"/greenhouses\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SwitchModule\",\n                    \"EndPoint\": \"/greenhouses/switch_module\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"module_id\": \"1\",\n                        \"status\": \"on/off\"\n                    }\n                },\n                {\n                    \"ApiName\": \"SetCondition\",\n                    \"EndPoint\": \"/greenhouses/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Plants\",\n            \"Url\": \"/plants\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SetPlantCondition\",\n                    \"EndPoint\": \"/plants/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"plant_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"GetPlantLog\",\n                    \"EndPoint\": \"/plants/get_log\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"plant_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Logs\",\n            \"Url\": \"/logs\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetLogsByDateRange\",\n                    \"EndPoint\": \"/logs/get_by_date_range\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"start_date\": \"2023-01-01\",\n                        \"end_date\": \"2023-01-31\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Conditions\",\n            \"Url\": \"/conditions\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetCurrentConditions\",\n                    \"EndPoint\": \"/conditions/get_current\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\"\n                    }\n                }\n            ]\n        }\n    ],\n\n    \"Configs\": [\n        {\n            \"Key\": \"system_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"polling_interval\",\n            \"DefaultValue\": \"5\",\n            \"Comment\": \"Defines the frequency (in seconds) at which sensor data is gathered.\"\n        },\n        {\n            \"Key\": \"data_aggregation_interval\",\n            \"DefaultValue\": \"60\",\n            \"Comment\": \"Specifies the time interval (in minutes) for data aggregation.\"\n        },\n        {\n            \"Key\": \"alert_threshold_temperature\",\n            \"DefaultValue\": \"30\",\n            \"Comment\": \"Sets the temperature alert threshold (in degrees Celsius).\"\n        },\n        {\n            \"Key\": \"alert_threshold_humidity\",\n            \"DefaultValue\": \"70\",\n            \"Comment\": \"Sets the humidity alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"alert_threshold_light\",\n            \"DefaultValue\": \"800\",\n            \"Comment\": \"Sets the light intensity alert threshold (in lux).\"\n        },\n        {\n            \"Key\": \"alert_threshold_soil_moisture\",\n            \"DefaultValue\": \"40\",\n            \"Comment\": \"Sets the soil moisture alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"SMS_alerts_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables SMS alerts.\"\n        },\n        {\n            \"Key\": \"SMS_message_temperature\",\n            \"DefaultValue\": \"Warning! Temperature is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for temperature condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_humidity\",\n            \"DefaultValue\": \"Warning! Humidity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for humidity condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_light\",\n            \"DefaultValue\": \"Warning! Light intensity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for light condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_soil_moisture\",\n            \"DefaultValue\": \"Warning! Soil moisture is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for soil moisture condition.\"\n        },\n        {\n            \"Key\": \"SMS_alerts_number\",\n            \"DefaultValue\": \"\",\n            \"Comment\": \"Defines the phone number to which SMS alerts are sent.\"\n        },\n        {\n            \"Key\": \"database_size_limit\",\n            \"DefaultValue\": \"1000\",\n            \"Comment\": \"Defines the size limit (in MB) of the database.\"\n        },\n        {\n            \"Key\": \"automatic_updates_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_updates_interval\",\n            \"DefaultValue\": \"168\",\n            \"Comment\": \"Sets the interval (in hours) between automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_condition_adjustments_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic adjustments of condition thresholds based on plant needs.\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"pumpRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"soilMoisture\",\n                \"ConnectionType\": \"PIN\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\home_security.json",
        "content": "{\n    \"ProjectName\" : \"HomeSecurity\",\n    \"ProjectPath\" : \"C:\\\\Projects\\\\Arduino\",\n    \"Entities\" : [\n        {\n            \"name\": \"DoorOpenLog\",\n            \"columns\": [\n                {\n                    \"name\": \"key\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"type\": \"String\"\n                }\n            ]\n        }\n    ],\n    \"Apis\": [\n        {\n            \"name\": \"DoorControl\",\n            \"Url\": \"/doorcontrol\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"open\",\n                    \"EndPoint\": \"/doorcontrol/open\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                    }\n                }\n            ]\n        }\n    ],\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"openDoorButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"14\",\n                \"Name\": \"DoorRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ]\n    },\n    \"Configs\": [\n        {\n            \"Key\": \"password\",\n            \"DefaultValue\": \"aivwa1402\",\n            \"Comment\": \"Defines the maximum capacity of the elevator.\"\n        },\n        {\n            \"Key\": \"door_active\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the emergency stop button.\"\n        }\n    ]\n}\n\n\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\inkjet_printer.json",
        "content": "{\n    \"ProjectName\": \"InkjetPrinter\",\n    \"ProjectPath\": \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\": [\n        {\n            \"name\": \"RecentActivities\",\n            \"columns\": [\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                }\n            ]\n        }\n    ],\n    \"Apis\": [\n        {\n            \"name\": \"Printer\",\n            \"Url\": \"/printer\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"getPrinterStatus\",\n                    \"EndPoint\": \"/printer/getPrinterStatus\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },            \n                {\n                    \"ApiName\": \"getactiveWiFi\",\n                    \"EndPoint\": \"/printer/getactiveWiFi\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"getFrimwareInfo\",\n                    \"EndPoint\": \"/printer/getFrimwareInfo\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"getRecentActivity\",\n                    \"EndPoint\": \"/printer/getRecentActivity\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"count\": \"10\"\n                    }\n                },\n                {\n                    \"ApiName\": \"getPrinterSettings\",\n                    \"EndPoint\": \"/printer/getPrinterSettings\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"setPrinterSettings\",\n                    \"EndPoint\": \"/printer/setPrinterSettings\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"setting\": \"printer_status\",\n                        \"value\": \"on\"\n                    }\n                },\n                {\n                    \"ApiName\": \"getPrinterInfo\",\n                    \"EndPoint\": \"/printer/getPrinterInfo\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                }\n            ]},{\n                \"name\": \"Templates\",\n                \"Url\": \"/templates\",\n                \"Apis\": [\n                {\n                    \"ApiName\": \"getActiveTemplate\",\n                    \"EndPoint\": \"/templates/getActiveTemplate\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"getAllTemplates\",\n                    \"EndPoint\": \"/templates/getAllTemplates\",\n                    \"Method\": \"GET\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"getTemplateSettings\",\n                    \"EndPoint\": \"/templates/getTemplateSettings\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"setTemplateSettings\",\n                    \"EndPoint\": \"/templates/setTemplateSettings\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"delay_before_print\": \"2\",\n                        \"quantity\": \"1\",\n                        \"quantity_delay\": \"5\",\n                        \"name\": \"template1\",\n                        \"repeat_template\": \"3\"\n                    }\n                },\n                {\n                    \"ApiName\": \"exportTemplate\",\n                    \"EndPoint\": \"/templates/exportTemplate\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"importTemplate\",\n                    \"EndPoint\": \"/templates/importTemplate\",\n                    \"Method\": \"POST\",\n                    \"Data\":{}\n                },\n                {\n                    \"ApiName\": \"setActiveTemplate\",\n                    \"EndPoint\": \"/templates/setActiveTemplate\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"saveTemplate\",\n                    \"EndPoint\": \"/templates/saveTemplate\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"id\": \"1\",\n                        \"data\": \"{json data}\"\n                    }\n                },\n                {\n                    \"ApiName\": \"previewTemplate\",\n                    \"EndPoint\": \"/templates/previewTemplate\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"loadTemplate\",\n                    \"EndPoint\": \"/templates/loadTemplate\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"id\": \"1\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"Configs\": [\n        {\n            \"Key\": \"active_template\",\n            \"DefaultValue\": \"\",\n            \"Comment\": \"The status of the printer (on/off)\"\n        },\n        {\n            \"Key\": \"printer_status\",\n            \"DefaultValue\": \"on\",\n            \"Comment\": \"The status of the printer (on/off)\"\n        },\n        {\n            \"Key\": \"printer_auto_on\",\n            \"DefaultValue\": \"off\"\n        },\n        {\n            \"Key\": \"encoder_mode\",\n            \"DefaultValue\": \"internal\"\n        },\n        {\n            \"Key\": \"printspeed\",\n            \"DefaultValue\": \"300\",\n            \"Comment\": \"Print speed\"\n        },\n        {\n            \"Key\": \"encoder_steps\",\n            \"DefaultValue\": \"40\"\n        },\n        {\n            \"Key\": \"print_mirror\",\n            \"DefaultValue\": \"off\"\n        },\n        {\n            \"Key\": \"ink_opacity\",\n            \"DefaultValue\": \"3\"\n        },\n        {\n            \"Key\": \"login_required\",\n            \"DefaultValue\": \"false\"\n        },\n        {\n            \"Key\": \"login_username\",\n            \"DefaultValue\": \"admin\"\n        },\n        {\n            \"Key\": \"login_password\",\n            \"DefaultValue\": \"admin\"\n        },\n        {\n            \"Key\": \"total_print_count\",\n            \"DefaultValue\": \"0\"\n        },\n        {\n            \"Key\": \"frimware_version\",\n            \"DefaultValue\": \"1.0.0\"\n        },\n        {\n            \"Key\": \"frimware_update_date\",\n            \"DefaultValue\": \"2023-08-10 12:57:10\"\n        },\n        {\n            \"Key\": \"printer_name\",\n            \"DefaultValue\": \"AIVWA Industrial Inkjet Printer - Serie H\"\n        },\n        {\n            \"Key\": \"printer_serial\",\n            \"DefaultValue\": \"0\"\n        },\n        {\n            \"Key\": \"repeat_line_print\",\n            \"DefaultValue\": \"5\"\n        },\n        {\n            \"Key\": \"delay_afte_printhead_enable\",\n            \"DefaultValue\": \"1000\"\n        },\n        {\n            \"Key\": \"delay_between_lines\",\n            \"DefaultValue\": \"1000\"\n        },\n        {\n            \"Key\": \"delay_between_left_right\",\n            \"DefaultValue\": \"100\"\n        },\n        {\n            \"Key\": \"delay_between_documents\",\n            \"DefaultValue\": \"500000\"\n        }\n    ],\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            \n        ],\n        \"SoilMoistureSensors\": [\n            \n        ]\n    }\n}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\module_apis.json",
        "content": "{\n    \"ProjectName\": \"ModuleApis\",\n    \"ProjectPath\": \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\": [\n        {\n            \"name\": \"Button\",\n            \"columns\": [\n                {\"name\": \"ModuleId\", \"type\": \"int\"},\n                {\"name\": \"ButtonType\", \"type\": \"String\"},\n                {\"name\": \"ActiveHigh\", \"type\": \"bool\"},\n                {\"name\": \"PullupActive\", \"type\": \"bool\"},\n                {\"name\": \"DebounceDelay\", \"type\": \"int\"}\n            ]\n        },\n        {\n            \"name\": \"Module\",\n            \"columns\": [\n                {\"name\": \"Name\", \"type\": \"String\"},\n                {\"name\": \"ModuleType\", \"type\": \"String\"},\n                {\"name\": \"ConnectionType\", \"type\": \"String\"},\n                {\"name\": \"NodeId\", \"type\": \"int\"},\n                {\"name\": \"PinNumber\", \"type\": \"int\"}\n            ]\n        },\n        {\n            \"name\": \"Relay\",\n            \"columns\": [\n                {\"name\": \"ModuleId\", \"type\": \"int\"},\n                {\"name\": \"NormallyOpen\", \"type\": \"bool\"}\n            ]\n        },\n        {\n            \"name\": \"LCD\",\n            \"columns\": [\n                {\"name\": \"ModuleId\", \"type\": \"int\"},\n                {\"name\": \"Address\", \"type\": \"int\"},\n                {\"name\": \"Rows\", \"type\": \"int\"},\n                {\"name\": \"Cols\", \"type\": \"int\"},\n                {\"name\": \"Type\", \"type\": \"String\"}\n            ]\n        },\n        {\n            \"name\": \"DHT\",\n            \"columns\": [\n                {\"name\": \"Type\", \"type\": \"String\"},\n                {\"name\": \"DryTreshold\", \"type\": \"int\"},\n                {\"name\": \"WetTreshold\", \"type\": \"int\"},\n                {\"name\": \"CoolTreshold\", \"type\": \"int\"},\n                {\"name\": \"HotTreshold\", \"type\": \"int\"}\n            ]\n        },\n        {\n            \"name\": \"Photoresistor\",\n            \"columns\": [\n                {\"name\": \"LowTreshold\", \"type\": \"int\"},\n                {\"name\": \"HighTreshold\", \"type\": \"int\"}\n            ]\n        },\n        {\n            \"name\": \"RGB\",\n            \"columns\": [\n                {\"name\": \"Type\", \"type\": \"String\"},\n                {\"name\": \"Rpin\", \"type\": \"int\"},\n                {\"name\": \"Gpin\", \"type\": \"int\"},\n                {\"name\": \"Bpin\", \"type\": \"int\"}\n            ]\n        },\n        {\n            \"name\": \"SoilMoisture\",\n            \"columns\": [\n                {\"name\": \"DryTreshold\", \"type\": \"int\"},\n                {\"name\": \"WetTreshold\", \"type\": \"int\"},\n                {\"name\": \"Type\", \"type\": \"String\"}\n            ]\n        }\n    ],\n    \"Apis\": [\n    ],\n    \"Configs\": [\n    ],\n    \"Modules\": {\n        \"Buttons\": [\n        ],\n        \"OLEDLCDs\": [\n        ],\n        \"Relays\": [\n        ],\n        \"SoilMoistureSensors\": [\n        ]\n    }\n}\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\monitorify.json",
        "content": "{\n    \"ProjectName\" : \"Monitroify\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"SensorType\",\n            \"columns\": [\n                {\n                    \"name\"\n                    : \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ModuleType\",\n            \"columns\": [\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Sensor\",\n            \"columns\": [\n                {\n                    \"name\": \"SensorTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PinNumber\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Module\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PinNumber\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ConditionType\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ConditionTitle\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"SensorTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"ModuleTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"TriggerValue\",\n                    \"type\": \"float\"\n                },\n                {\n                    \"name\": \"OperationType\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Condition\",\n            \"columns\": [\n                {\n                    \"name\": \"ConditionTitleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"CustomName\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"isEnable\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Condition_Sensors\",\n            \"columns\": [\n                {\n                    \"name\": \"ConditionId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"SensorId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Condition_Modules\",\n            \"columns\": [\n                {\n                    \"name\": \"ConditionId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"ModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Schedule\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"StartTime\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"name\": \"EndTime\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"name\": \"DayOfWeek\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SensorLog\",\n            \"columns\": [\n                {\n                    \"name\": \"SensorId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"type\": \"float\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ModuleLog\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Status\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ConditionLog\",\n            \"columns\": [\n                {\n                    \"name\": \"ConditionId\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ScheduleLog\",\n            \"columns\": [\n                {\n                    \"name\": \"ScheduleId\",\n                    \"type\": \"int\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\": [\n        {\n            \"name\": \"Greenhouses\",\n            \"Url\": \"/greenhouses\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SwitchModule\",\n                    \"EndPoint\": \"/greenhouses/switch_module\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"module_id\": \"1\",\n                        \"status\": \"on/off\"\n                    }\n                },\n                {\n                    \"ApiName\": \"SetCondition\",\n                    \"EndPoint\": \"/greenhouses/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Plants\",\n            \"Url\": \"/plants\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SetPlantCondition\",\n                    \"EndPoint\": \"/plants/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"plant_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"GetPlantLog\",\n                    \"EndPoint\": \"/plants/get_log\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"plant_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Logs\",\n            \"Url\": \"/logs\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetLogsByDateRange\",\n                    \"EndPoint\": \"/logs/get_by_date_range\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"start_date\": \"2023-01-01\",\n                        \"end_date\": \"2023-01-31\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Conditions\",\n            \"Url\": \"/conditions\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetCurrentConditions\",\n                    \"EndPoint\": \"/conditions/get_current\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\"\n                    }\n                }\n            ]\n        }\n    ],\n\n    \"Configs\": [\n        {\n            \"Key\": \"system_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"polling_interval\",\n            \"DefaultValue\": \"5\",\n            \"Comment\": \"Defines the frequency (in seconds) at which sensor data is gathered.\"\n        },\n        {\n            \"Key\": \"data_aggregation_interval\",\n            \"DefaultValue\": \"60\",\n            \"Comment\": \"Specifies the time interval (in minutes) for data aggregation.\"\n        },\n        {\n            \"Key\": \"alert_threshold_temperature\",\n            \"DefaultValue\": \"30\",\n            \"Comment\": \"Sets the temperature alert threshold (in degrees Celsius).\"\n        },\n        {\n            \"Key\": \"alert_threshold_humidity\",\n            \"DefaultValue\": \"70\",\n            \"Comment\": \"Sets the humidity alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"alert_threshold_light\",\n            \"DefaultValue\": \"800\",\n            \"Comment\": \"Sets the light intensity alert threshold (in lux).\"\n        },\n        {\n            \"Key\": \"alert_threshold_soil_moisture\",\n            \"DefaultValue\": \"40\",\n            \"Comment\": \"Sets the soil moisture alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"SMS_alerts_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables SMS alerts.\"\n        },\n        {\n            \"Key\": \"SMS_message_temperature\",\n            \"DefaultValue\": \"Warning! Temperature is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for temperature condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_humidity\",\n            \"DefaultValue\": \"Warning! Humidity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for humidity condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_light\",\n            \"DefaultValue\": \"Warning! Light intensity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for light condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_soil_moisture\",\n            \"DefaultValue\": \"Warning! Soil moisture is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for soil moisture condition.\"\n        },\n        {\n            \"Key\": \"SMS_alerts_number\",\n            \"DefaultValue\": \"\",\n            \"Comment\": \"Defines the phone number to which SMS alerts are sent.\"\n        },\n        {\n            \"Key\": \"database_size_limit\",\n            \"DefaultValue\": \"1000\",\n            \"Comment\": \"Defines the size limit (in MB) of the database.\"\n        },\n        {\n            \"Key\": \"automatic_updates_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_updates_interval\",\n            \"DefaultValue\": \"168\",\n            \"Comment\": \"Sets the interval (in hours) between automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_condition_adjustments_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic adjustments of condition thresholds based on plant needs.\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"pumpRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"soilMoisture\",\n                \"ConnectionType\": \"PIN\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\Ostad_postman_collection.json",
        "content": "{\n\t\"info\": {\n\t\t\"_postman_id\": \"2a331397-a133-4d9c-9937-a09a939a7511\",\n\t\t\"name\": \"ESP\",\n\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\",\n\t\t\"_exporter_id\": \"935248\"\n\t},\n\t\"item\": [\n\t\t{\n\t\t\t\"name\": \"Ostad\",\n\t\t\t\"item\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Clock\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"now\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/now\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"now\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"now Jalali\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/nowJalali\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"nowJalali\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"syncTime\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/syncTime\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"syncTime\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"adjustTime\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.103/clock/adjustTime?date=11/19/2023 07:33:00\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"clock\",\n\t\t\t\t\t\t\t\t\t\t\"adjustTime\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"date\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"11/19/2023 07:33:00\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"WiFi\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Broadcast\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/broadcast?broadcast=SampleMessage\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"broadcast\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"broadcast\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleMessage\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Restart\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/restart\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"restart\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Disconnect WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/disconnect_wifi\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"disconnect_wifi\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Forget WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/forget_wifi?ssid=SAMPLE\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"forget_wifi\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SAMPLE\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Connect WiFi\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/connect_wifi?ssid=Molkat\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"connect_wifi\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Molkat\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Add SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/add_ssid?ssid=SAMPLE&password=PASSWORD\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"add_ssid\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"ssid\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SAMPLE\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"PASSWORD\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get All SSIDs\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/wifi/get_all_ssids\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"wifi\",\n\t\t\t\t\t\t\t\t\t\t\"get_all_ssids\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"File\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Browse Folder\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/fileApi/browse_folder?path=/\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"browse_folder\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Open File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/fileApi/open?path=/system_config.db\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"open\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/system_config.db\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Delete File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/delete?path=SamplePath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Write File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://10.168.221.1/fileApi/write?path=/db/student/db&content=1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"221\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"write\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/db/student/db\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"content\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Format File System\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/format\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"format\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Rename File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/rename?path=SamplePath&new_name=NewName\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"rename\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"new_name\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"NewName\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Move File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/move?source_path=SampleSourcePath&destination_path=SampleDestinationPath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"move\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"source_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSourcePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"destination_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleDestinationPath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Copy File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/fileApi/copy?source_path=SampleSourcePath&destination_path=SampleDestinationPath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"copy\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"source_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSourcePath\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"destination_path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleDestinationPath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Duplicate File\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/fileApi/duplicate?path=SamplePath\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"duplicate\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePath\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Make Folder\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/fileApi/mkdir?path=/Test\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"fileApi\",\n\t\t\t\t\t\t\t\t\t\t\"mkdir\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"path\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/Test\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"SSID\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Create SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.4.1/ssid/create?SSID=Molkat&Password=Bo!2bjaq\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"SSID\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Molkat\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"Password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Bo!2bjaq\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Update SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/update?id=1&SSID=SampleSSID&Password=SamplePassword\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"SSID\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleSSID\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"Password\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SamplePassword\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Delete SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/delete?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get SSID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/get?query=SampleQuery\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"get\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"query\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"SampleQuery\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get SSID By ID\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"Get All SSIDs\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/ssid/getAll\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"ssid\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"AutenticationConfig\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"delete\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.102/authenticationConfig/delete?id=5\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"102\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"5\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"create\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.4.1/authenticationConfig/create?key=db_change_info_save&value=false\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"db_change_info_save\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"update\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/authenticationConfig/update?id=4&key=wifi_mode_mesh&value=true\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"4\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"wifi_mode_mesh\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"submit\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/submit?key=mesh_root&value=false\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"submit\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"mesh_root\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getAll\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.101/authenticationConfig/getAll\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getById\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"get\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"authenticationConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"SystemConfig\",\n\t\t\t\t\t\"item\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"delete\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"DELETE\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.103/systemConfig/delete?id=5\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"103\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"delete\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"5\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"create\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.4.1/systemConfig/create?key=db_change_info_save&value=false\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"4\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"create\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"db_change_info_save\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"update\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.109/systemConfig/update?id=4&key=wifi_mode_mesh&value=true\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"109\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"update\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"4\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"wifi_mode_mesh\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"submit\",\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"10.21.249.1/systemConfig/submit?key=mesh_root&value=false\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"10\",\n\t\t\t\t\t\t\t\t\t\t\"21\",\n\t\t\t\t\t\t\t\t\t\t\"249\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"submit\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"key\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"mesh_root\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"false\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getAll\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"auth\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"bearer\",\n\t\t\t\t\t\t\t\t\t\"bearer\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"token\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"qdv66/UtLWjJCeWXodHijy9l4vfnrE6l/e8U6Fx/aAM=\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"http://192.168.1.101/systemConfig/getAll\",\n\t\t\t\t\t\t\t\t\t\"protocol\": \"http\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getAll\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"getById\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/systemConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"name\": \"get\",\n\t\t\t\t\t\t\t\"protocolProfileBehavior\": {\n\t\t\t\t\t\t\t\t\"disableBodyPruning\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"request\": {\n\t\t\t\t\t\t\t\t\"method\": \"GET\",\n\t\t\t\t\t\t\t\t\"header\": [],\n\t\t\t\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\t\t\t\"mode\": \"raw\",\n\t\t\t\t\t\t\t\t\t\"raw\": \"\",\n\t\t\t\t\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\t\t\t\t\"raw\": {\n\t\t\t\t\t\t\t\t\t\t\t\"language\": \"javascript\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"url\": {\n\t\t\t\t\t\t\t\t\t\"raw\": \"192.168.1.101/systemConfig/getById?id=1\",\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"192\",\n\t\t\t\t\t\t\t\t\t\t\"168\",\n\t\t\t\t\t\t\t\t\t\t\"1\",\n\t\t\t\t\t\t\t\t\t\t\"101\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"path\": [\n\t\t\t\t\t\t\t\t\t\t\"systemConfig\",\n\t\t\t\t\t\t\t\t\t\t\"getById\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"query\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"key\": \"id\",\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"1\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"response\": []\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\ScannerBoard.json",
        "content": "{\n    \"ProjectName\" : \"Monitroify\",\n    \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"ScannerConfigs\",\n            \"columns\": [\n                {\n                    \"name\": \"Key\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Value\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SensorType\",\n            \"columns\": [\n                {\n                    \"name\"\n                    : \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ModuleType\",\n            \"columns\": [\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Sensor\",\n            \"columns\": [\n                {\n                    \"name\": \"SensorTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PinNumber\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Module\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleTypeId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Title\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"PinNumber\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"Schedule\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"StartTime\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"name\": \"EndTime\",\n                    \"type\": \"DateTime\"\n                },\n                {\n                    \"name\": \"DayOfWeek\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"UniqueId\",\n                    \"type\": \"String\"\n                }\n            ]\n        },\n        {\n            \"name\": \"SensorLog\",\n            \"columns\": [\n                {\n                    \"name\": \"SensorId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"value\",\n                    \"type\": \"float\"\n                },\n                {\n                    \"name\": \"sent\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\":\"LightSensorLogs\",\n            \"columns\": [\n                {\n                    \"name\": \"SensorLog\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"CheckPassed\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"sent\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ModuleLog\",\n            \"columns\": [\n                {\n                    \"name\": \"ModuleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"Status\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"sent\",\n                    \"type\": \"int\"\n                }\n            ]\n        },\n        {\n            \"name\": \"ScheduleLog\",\n            \"columns\": [\n                {\n                    \"name\": \"ScheduleId\",\n                    \"type\": \"int\"\n                },\n                {\n                    \"name\": \"sent\",\n                    \"type\": \"int\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\": [\n        {\n            \"name\": \"Greenhouses\",\n            \"Url\": \"/greenhouses\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SwitchModule\",\n                    \"EndPoint\": \"/greenhouses/switch_module\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"module_id\": \"1\",\n                        \"status\": \"on/off\"\n                    }\n                },\n                {\n                    \"ApiName\": \"SetCondition\",\n                    \"EndPoint\": \"/greenhouses/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Plants\",\n            \"Url\": \"/plants\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"SetPlantCondition\",\n                    \"EndPoint\": \"/plants/set_condition\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"plant_id\": \"1\",\n                        \"condition_id\": \"1\"\n                    }\n                },\n                {\n                    \"ApiName\": \"GetPlantLog\",\n                    \"EndPoint\": \"/plants/get_log\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"plant_id\": \"1\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Logs\",\n            \"Url\": \"/logs\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetLogsByDateRange\",\n                    \"EndPoint\": \"/logs/get_by_date_range\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"start_date\": \"2023-01-01\",\n                        \"end_date\": \"2023-01-31\"\n                    }\n                }\n            ]\n        },\n        {\n            \"name\": \"Conditions\",\n            \"Url\": \"/conditions\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"GetCurrentConditions\",\n                    \"EndPoint\": \"/conditions/get_current\",\n                    \"Method\": \"GET\",\n                    \"Data\": {\n                        \"greenhouse_id\": \"1\"\n                    }\n                }\n            ]\n        }\n    ],\n\n    \"Configs\": [\n        {\n            \"Key\": \"system_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        },\n        {\n            \"Key\": \"polling_interval\",\n            \"DefaultValue\": \"5\",\n            \"Comment\": \"Defines the frequency (in seconds) at which sensor data is gathered.\"\n        },\n        {\n            \"Key\": \"data_aggregation_interval\",\n            \"DefaultValue\": \"60\",\n            \"Comment\": \"Specifies the time interval (in minutes) for data aggregation.\"\n        },\n        {\n            \"Key\": \"alert_threshold_temperature\",\n            \"DefaultValue\": \"30\",\n            \"Comment\": \"Sets the temperature alert threshold (in degrees Celsius).\"\n        },\n        {\n            \"Key\": \"alert_threshold_humidity\",\n            \"DefaultValue\": \"70\",\n            \"Comment\": \"Sets the humidity alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"alert_threshold_light\",\n            \"DefaultValue\": \"800\",\n            \"Comment\": \"Sets the light intensity alert threshold (in lux).\"\n        },\n        {\n            \"Key\": \"alert_threshold_soil_moisture\",\n            \"DefaultValue\": \"40\",\n            \"Comment\": \"Sets the soil moisture alert threshold (in percentage).\"\n        },\n        {\n            \"Key\": \"SMS_alerts_enable\",\n            \"DefaultValue\": \"false\",\n            \"Comment\": \"Enables or disables SMS alerts.\"\n        },\n        {\n            \"Key\": \"SMS_message_temperature\",\n            \"DefaultValue\": \"Warning! Temperature is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for temperature condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_humidity\",\n            \"DefaultValue\": \"Warning! Humidity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for humidity condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_light\",\n            \"DefaultValue\": \"Warning! Light intensity is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for light condition.\"\n        },\n        {\n            \"Key\": \"SMS_message_soil_moisture\",\n            \"DefaultValue\": \"Warning! Soil moisture is outside of the defined threshold.\",\n            \"Comment\": \"Customizable SMS alert message for soil moisture condition.\"\n        },\n        {\n            \"Key\": \"SMS_alerts_number\",\n            \"DefaultValue\": \"\",\n            \"Comment\": \"Defines the phone number to which SMS alerts are sent.\"\n        },\n        {\n            \"Key\": \"database_size_limit\",\n            \"DefaultValue\": \"1000\",\n            \"Comment\": \"Defines the size limit (in MB) of the database.\"\n        },\n        {\n            \"Key\": \"automatic_updates_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_updates_interval\",\n            \"DefaultValue\": \"168\",\n            \"Comment\": \"Sets the interval (in hours) between automatic updates.\"\n        },\n        {\n            \"Key\": \"automatic_condition_adjustments_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables automatic adjustments of condition thresholds based on plant needs.\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"pumpRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"soilMoisture\",\n                \"ConnectionType\": \"PIN\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\code_generator\\imports\\test.json",
        "content": "{\n    \"ProjectName\" : \"Test\",\n        \"ProjectPath\" : \"C:\\\\Users\\\\AIVWA 1\\\\Documents\\\\Arduino\\\\libraries\\\\OStad\\\\Examples\",\n    \"Entities\" : [\n        {\n            \"name\": \"User\",\n            \"columns\": [\n                {\n                    \"name\": \"Name\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Username\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Password\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"Token\",\n                    \"type\": \"String\"\n                },\n                {\n                    \"name\": \"LastLoginDateTime\",\n                    \"type\": \"EBPDateTime\"\n                },\n                {\n                    \"name\": \"TokenDateTime\",\n                    \"type\": \"EBPDateTime\"\n                }\n            ]\n        }\n    ],\n\n    \"Apis\": [\n        {\n            \"name\": \"Authentication\",\n            \"Url\": \"/authentication\",\n            \"Apis\": [\n                {\n                    \"ApiName\": \"Login\",\n                    \"EndPoint\": \"/authentication/login\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"password\": \"admin\"\n                    }\n                },\n                {\n                    \"ApiName\": \"Signup\",\n                    \"EndPoint\": \"/authentication/signup\",\n                    \"Method\": \"POST\",\n                    \"Data\": {\n                        \"username\": \"admin\",\n                        \"password\": \"admin\",\n                        \"role_id\": \"1\",\n                        \"name\" : \"My Name\"\n                    }\n                }\n            ]\n        }\n    ],\n\n    \"Configs\": [\n        {\n            \"Key\": \"system_enable\",\n            \"DefaultValue\": \"true\",\n            \"Comment\": \"Enables or disables the entire system.\"\n        }\n    ],\n\n    \"Modules\": {\n        \"Buttons\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"resetButton\",\n                \"ActiveHigh\": \"false\",\n                \"PullUpActive\": \"false\",\n                \"ButtonType\": \"ButtonType::PIN\"\n            }\n        ],\n        \"OLEDLCDs\": [\n            {\n                \"Name\": \"mainLCD\",\n                \"Address\": \"0x3C\",\n                \"Columns\": \"128\",\n                \"Rows\": \"64\"\n            }\n        ],\n        \"Relays\": [\n            {\n                \"PinNumber\": \"0\",\n                \"Name\": \"pumpRelay\",\n                \"NormallyOpen\": \"true\"\n            }\n        ],\n        \"SoilMoistureSensors\": [\n            {\n                \"Name\": \"soilMoisture\",\n                \"ConnectionType\": \"PIN\",\n                \"NodeId\": \"1\",\n                \"SensorPin\": \"A0\",\n                \"DryThreshold\": \"300\",\n                \"WetThreshold\": \"700\"\n            }\n        ]\n    }\n   \n\n}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\postman_import\\Growify.json",
        "content": "{\"info\": {\"_postman_id\": \"0c52ebe2-3143-4c45-b132-8e0746146595\", \"name\": \"Growify\", \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"}, \"item\": [{\"name\": \"Ostad\", \"item\": [{\"name\": \"Clock\", \"item\": [{\"name\": \"now\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.1.103/clock/now\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"clock\", \"now\"]}}, \"response\": []}, {\"name\": \"now Jalali\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.1.103/clock/nowJalali\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"clock\", \"nowJalali\"]}}, \"response\": []}, {\"name\": \"syncTime\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.1.103/clock/syncTime\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"clock\", \"syncTime\"]}}, \"response\": []}, {\"name\": \"adjustTime\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.1.103/clock/adjustTime?date=11/19/2023 07:33:00\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"clock\", \"adjustTime\"], \"query\": [{\"key\": \"date\", \"value\": \"11/19/2023 07:33:00\"}]}}, \"response\": []}]}, {\"name\": \"WiFi\", \"item\": [{\"name\": \"Broadcast\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/broadcast?broadcast=SampleMessage\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"broadcast\"], \"query\": [{\"key\": \"broadcast\", \"value\": \"SampleMessage\"}]}}, \"response\": []}, {\"name\": \"Restart\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/restart\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"restart\"]}}, \"response\": []}, {\"name\": \"Disconnect WiFi\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/disconnect_wifi\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"disconnect_wifi\"]}}, \"response\": []}, {\"name\": \"Forget WiFi\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/forget_wifi?ssid=SAMPLE\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"forget_wifi\"], \"query\": [{\"key\": \"ssid\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"Connect WiFi\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/connect_wifi?ssid=Molkat\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"connect_wifi\"], \"query\": [{\"key\": \"ssid\", \"value\": \"Molkat\"}]}}, \"response\": []}, {\"name\": \"Add SSID\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/add_ssid?ssid=SAMPLE&password=PASSWORD\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"add_ssid\"], \"query\": [{\"key\": \"ssid\", \"value\": \"SAMPLE\"}, {\"key\": \"password\", \"value\": \"PASSWORD\"}]}}, \"response\": []}, {\"name\": \"Get All SSIDs\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/wifi/get_all_ssids\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"wifi\", \"get_all_ssids\"]}}, \"response\": []}]}, {\"name\": \"File\", \"item\": [{\"name\": \"Browse Folder\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"192.168.1.103/fileApi/browse_folder?path=/\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"fileApi\", \"browse_folder\"], \"query\": [{\"key\": \"path\", \"value\": \"/\"}]}}, \"response\": []}, {\"name\": \"Open File\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"192.168.1.103/fileApi/open?path=/system_config.db\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"fileApi\", \"open\"], \"query\": [{\"key\": \"path\", \"value\": \"/system_config.db\"}]}}, \"response\": []}, {\"name\": \"Delete File\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/fileApi/delete?path=SamplePath\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"fileApi\", \"delete\"], \"query\": [{\"key\": \"path\", \"value\": \"SamplePath\"}]}}, \"response\": []}, {\"name\": \"Write File\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://10.168.221.1/fileApi/write?path=/db/student/db&content=1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\", \"protocol\": \"http\", \"host\": [\"10\", \"168\", \"221\", \"1\"], \"path\": [\"fileApi\", \"write\"], \"query\": [{\"key\": \"path\", \"value\": \"/db/student/db\"}, {\"key\": \"content\", \"value\": \"1,key=db_change_info_save,value=true, 3,key=mesh_root,value=false, 4,key=ap_ssid,value=ESP2, 5,key=wifi_mode_mesh,value=false, 6,key=wifi_mode_wifi,value=true, 7,key=wifi_mode_ap,value=false,\"}]}}, \"response\": []}, {\"name\": \"Format File System\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/fileApi/format\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"fileApi\", \"format\"]}}, \"response\": []}, {\"name\": \"Rename File\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/fileApi/rename?path=SamplePath&new_name=NewName\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"fileApi\", \"rename\"], \"query\": [{\"key\": \"path\", \"value\": \"SamplePath\"}, {\"key\": \"new_name\", \"value\": \"NewName\"}]}}, \"response\": []}, {\"name\": \"Move File\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/fileApi/move?source_path=SampleSourcePath&destination_path=SampleDestinationPath\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"fileApi\", \"move\"], \"query\": [{\"key\": \"source_path\", \"value\": \"SampleSourcePath\"}, {\"key\": \"destination_path\", \"value\": \"SampleDestinationPath\"}]}}, \"response\": []}, {\"name\": \"Copy File\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/fileApi/copy?source_path=SampleSourcePath&destination_path=SampleDestinationPath\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"fileApi\", \"copy\"], \"query\": [{\"key\": \"source_path\", \"value\": \"SampleSourcePath\"}, {\"key\": \"destination_path\", \"value\": \"SampleDestinationPath\"}]}}, \"response\": []}, {\"name\": \"Duplicate File\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"192.168.1.109/fileApi/duplicate?path=SamplePath\", \"host\": [\"192\", \"168\", \"1\", \"109\"], \"path\": [\"fileApi\", \"duplicate\"], \"query\": [{\"key\": \"path\", \"value\": \"SamplePath\"}]}}, \"response\": []}, {\"name\": \"Make Folder\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"192.168.1.109/fileApi/mkdir?path=/Test\", \"host\": [\"192\", \"168\", \"1\", \"109\"], \"path\": [\"fileApi\", \"mkdir\"], \"query\": [{\"key\": \"path\", \"value\": \"/Test\"}]}}, \"response\": []}]}, {\"name\": \"SSID\", \"item\": [{\"name\": \"Create SSID\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"192.168.4.1/ssid/create?SSID=Molkat&Password=Bo!2bjaq\", \"host\": [\"192\", \"168\", \"4\", \"1\"], \"path\": [\"ssid\", \"create\"], \"query\": [{\"key\": \"SSID\", \"value\": \"Molkat\"}, {\"key\": \"Password\", \"value\": \"Bo!2bjaq\"}]}}, \"response\": []}, {\"name\": \"Update SSID\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/ssid/update?id=1&SSID=SampleSSID&Password=SamplePassword\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"ssid\", \"update\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}, {\"key\": \"SSID\", \"value\": \"SampleSSID\"}, {\"key\": \"Password\", \"value\": \"SamplePassword\"}]}}, \"response\": []}, {\"name\": \"Delete SSID\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/ssid/delete?id=1\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"ssid\", \"delete\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}, {\"name\": \"Get SSID\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/ssid/get?query=SampleQuery\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"ssid\", \"get\"], \"query\": [{\"key\": \"query\", \"value\": \"SampleQuery\"}]}}, \"response\": []}, {\"name\": \"Get SSID By ID\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/ssid/getById?id=1\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"ssid\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}, {\"name\": \"Get All SSIDs\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"10.21.249.1/ssid/getAll\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"ssid\", \"getAll\"]}}, \"response\": []}]}, {\"name\": \"AutenticationConfig\", \"item\": [{\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.102/authenticationConfig/delete?id=5\", \"host\": [\"192\", \"168\", \"1\", \"102\"], \"path\": [\"authenticationConfig\", \"delete\"], \"query\": [{\"key\": \"id\", \"value\": \"5\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"http://192.168.4.1/authenticationConfig/create?key=db_change_info_save&value=false\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"4\", \"1\"], \"path\": [\"authenticationConfig\", \"create\"], \"query\": [{\"key\": \"key\", \"value\": \"db_change_info_save\"}, {\"key\": \"value\", \"value\": \"false\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.109/authenticationConfig/update?id=4&key=wifi_mode_mesh&value=true\", \"host\": [\"192\", \"168\", \"1\", \"109\"], \"path\": [\"authenticationConfig\", \"update\"], \"query\": [{\"key\": \"id\", \"value\": \"4\"}, {\"key\": \"key\", \"value\": \"wifi_mode_mesh\"}, {\"key\": \"value\", \"value\": \"true\"}]}}, \"response\": []}, {\"name\": \"submit\", \"request\": {\"method\": \"PUT\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.101/authenticationConfig/submit?key=mesh_root&value=false\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"authenticationConfig\", \"submit\"], \"query\": [{\"key\": \"key\", \"value\": \"mesh_root\"}, {\"key\": \"value\", \"value\": \"false\"}]}}, \"response\": []}, {\"name\": \"getAll\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"http://192.168.1.101/authenticationConfig/getAll\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"authenticationConfig\", \"getAll\"]}}, \"response\": []}, {\"name\": \"getById\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"authenticationConfig\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}, {\"name\": \"get\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.101/authenticationConfig/getById?id=1\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"authenticationConfig\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}]}, {\"name\": \"SystemConfig\", \"item\": [{\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.103/systemConfig/delete?id=5\", \"host\": [\"192\", \"168\", \"1\", \"103\"], \"path\": [\"systemConfig\", \"delete\"], \"query\": [{\"key\": \"id\", \"value\": \"5\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"http://192.168.4.1/systemConfig/create?key=db_change_info_save&value=false\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"4\", \"1\"], \"path\": [\"systemConfig\", \"create\"], \"query\": [{\"key\": \"key\", \"value\": \"db_change_info_save\"}, {\"key\": \"value\", \"value\": \"false\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.109/systemConfig/update?id=4&key=wifi_mode_mesh&value=true\", \"host\": [\"192\", \"168\", \"1\", \"109\"], \"path\": [\"systemConfig\", \"update\"], \"query\": [{\"key\": \"id\", \"value\": \"4\"}, {\"key\": \"key\", \"value\": \"wifi_mode_mesh\"}, {\"key\": \"value\", \"value\": \"true\"}]}}, \"response\": []}, {\"name\": \"submit\", \"request\": {\"method\": \"PUT\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"10.21.249.1/systemConfig/submit?key=mesh_root&value=false\", \"host\": [\"10\", \"21\", \"249\", \"1\"], \"path\": [\"systemConfig\", \"submit\"], \"query\": [{\"key\": \"key\", \"value\": \"mesh_root\"}, {\"key\": \"value\", \"value\": \"false\"}]}}, \"response\": []}, {\"name\": \"getAll\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"auth\": {\"type\": \"bearer\", \"bearer\": [{\"key\": \"token\", \"value\": \"qdv66/UtLWjJCeWXodHijy9l4vfnrE6l/e8U6Fx/aAM=\", \"type\": \"string\"}]}, \"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"http://192.168.1.101/systemConfig/getAll\", \"protocol\": \"http\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"systemConfig\", \"getAll\"]}}, \"response\": []}, {\"name\": \"getById\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.101/systemConfig/getById?id=1\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"systemConfig\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}, {\"name\": \"get\", \"protocolProfileBehavior\": {\"disableBodyPruning\": true}, \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"\", \"options\": {\"raw\": {\"language\": \"javascript\"}}}, \"url\": {\"raw\": \"192.168.1.101/systemConfig/getById?id=1\", \"host\": [\"192\", \"168\", \"1\", \"101\"], \"path\": [\"systemConfig\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"1\"}]}}, \"response\": []}]}]}, {\"name\": \"TemperatureCondition\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturecondition/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturecondition\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturecondition/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturecondition\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturecondition/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturecondition\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinTemperature\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxTemperature\", \"value\": \"SAMPLE\"}, {\"key\": \"LowTempAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighTempAlertThreshold\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturecondition/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturecondition\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinTemperature\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxTemperature\", \"value\": \"SAMPLE\"}, {\"key\": \"LowTempAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighTempAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturecondition/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturecondition\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"HumidityCondition\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditycondition/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditycondition\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditycondition/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditycondition\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditycondition/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditycondition\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinHumidity\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxHumidity\", \"value\": \"SAMPLE\"}, {\"key\": \"LowHumidityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighHumidityAlertThreshold\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditycondition/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditycondition\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinHumidity\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxHumidity\", \"value\": \"SAMPLE\"}, {\"key\": \"LowHumidityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighHumidityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditycondition/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditycondition\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"LightCondition\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightcondition/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightcondition\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightcondition/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightcondition\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightcondition/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightcondition\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinLightIntensity\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxLightIntensity\", \"value\": \"SAMPLE\"}, {\"key\": \"LowLightIntensityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighLightIntensityAlertThreshold\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightcondition/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightcondition\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinLightIntensity\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxLightIntensity\", \"value\": \"SAMPLE\"}, {\"key\": \"LowLightIntensityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighLightIntensityAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightcondition/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightcondition\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"SoilMoistureCondition\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturecondition/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturecondition\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturecondition/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturecondition\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturecondition/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturecondition\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinSoilMoisture\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxSoilMoisture\", \"value\": \"SAMPLE\"}, {\"key\": \"LowSoilMoistureAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighSoilMoistureAlertThreshold\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturecondition/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturecondition\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"MinSoilMoisture\", \"value\": \"SAMPLE\"}, {\"key\": \"MaxSoilMoisture\", \"value\": \"SAMPLE\"}, {\"key\": \"LowSoilMoistureAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"HighSoilMoistureAlertThreshold\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturecondition/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturecondition\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"Condition\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/condition/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"condition\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/condition/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"condition\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/condition/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"condition\", \"create\"], \"query\": [{\"key\": \"TemperatureConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidityConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"LightConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"SoilMoistureConditionId\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/condition/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"condition\", \"update\"], \"query\": [{\"key\": \"TemperatureConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidityConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"LightConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"SoilMoistureConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/condition/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"condition\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"Greenhouse\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhouse/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouse\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhouse/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouse\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhouse/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouse\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"ConditionId\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhouse/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouse\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"ConditionId\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhouse/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouse\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"PlantType\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/planttype/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"planttype\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/planttype/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"planttype\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/planttype/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"planttype\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/planttype/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"planttype\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/planttype/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"planttype\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"Plant\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/plant/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plant\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/plant/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plant\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/plant/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plant\", \"create\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"PlantTypeId\", \"value\": \"SAMPLE\"}, {\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/plant/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plant\", \"update\"], \"query\": [{\"key\": \"Name\", \"value\": \"SAMPLE\"}, {\"key\": \"PlantTypeId\", \"value\": \"SAMPLE\"}, {\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/plant/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plant\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"GreenhouseSensor\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousesensor/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousesensor\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousesensor/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousesensor\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousesensor/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousesensor\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"SensorModuleId\", \"value\": \"SAMPLE\"}, {\"key\": \"Role\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousesensor/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousesensor\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"SensorModuleId\", \"value\": \"SAMPLE\"}, {\"key\": \"Role\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousesensor/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousesensor\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"GreenhouseControl\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousecontrol/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousecontrol\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousecontrol/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousecontrol\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousecontrol/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousecontrol\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"ControlModuleId\", \"value\": \"SAMPLE\"}, {\"key\": \"Role\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousecontrol/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousecontrol\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"ControlModuleId\", \"value\": \"SAMPLE\"}, {\"key\": \"Role\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/greenhousecontrol/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhousecontrol\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"TemperatureLog\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturelog/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturelog\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturelog/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturelog\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturelog/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturelog\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"TemperatureReading\", \"value\": \"SAMPLE\"}, {\"key\": \"CoolerState\", \"value\": \"SAMPLE\"}, {\"key\": \"HeaterState\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturelog/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturelog\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"TemperatureReading\", \"value\": \"SAMPLE\"}, {\"key\": \"CoolerState\", \"value\": \"SAMPLE\"}, {\"key\": \"HeaterState\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/temperaturelog/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"temperaturelog\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"HumidityLog\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditylog/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditylog\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditylog/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditylog\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditylog/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditylog\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidityReading\", \"value\": \"SAMPLE\"}, {\"key\": \"DryerState\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidifierState\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditylog/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditylog\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidityReading\", \"value\": \"SAMPLE\"}, {\"key\": \"DryerState\", \"value\": \"SAMPLE\"}, {\"key\": \"HumidifierState\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/humiditylog/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"humiditylog\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"LightLog\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightlog/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightlog\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightlog/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightlog\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightlog/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightlog\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"LightIntensityReading\", \"value\": \"SAMPLE\"}, {\"key\": \"LightState\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightlog/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightlog\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"LightIntensityReading\", \"value\": \"SAMPLE\"}, {\"key\": \"LightState\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/lightlog/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"lightlog\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"SoilMoistureLog\", \"item\": [{\"name\": \"getAll\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturelog/getAll\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturelog\", \"getAll\"], \"query\": []}}, \"response\": []}, {\"name\": \"getById\", \"request\": {\"method\": \"GET\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturelog/getById\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturelog\", \"getById\"], \"query\": [{\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"create\", \"request\": {\"method\": \"POST\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturelog/create\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturelog\", \"create\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"SoilMoistureReading\", \"value\": \"SAMPLE\"}, {\"key\": \"WaterPumpState\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"update\", \"request\": {\"method\": \"PUT\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturelog/update\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturelog\", \"update\"], \"query\": [{\"key\": \"GreenhouseId\", \"value\": \"SAMPLE\"}, {\"key\": \"SoilMoistureReading\", \"value\": \"SAMPLE\"}, {\"key\": \"WaterPumpState\", \"value\": \"SAMPLE\"}, {\"key\": \"id\", \"value\": \"SAMPLE\"}]}}, \"response\": []}, {\"name\": \"delete\", \"request\": {\"method\": \"DELETE\", \"header\": [], \"url\": {\"raw\": \"http://192.168.4.1/soilmoisturelog/delete\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"soilmoisturelog\", \"delete\"], \"query\": []}}, \"response\": []}]}, {\"name\": \"Greenhouses\", \"item\": [{\"name\": \"SwitchModule\", \"request\": {\"method\": \"POST\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"module_id\\\": \\\"1\\\", \\\"status\\\": \\\"on/off\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/greenhouses/switch_module\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouses\", \"switch_module\"], \"query\": [{\"key\": \"module_id\", \"value\": \"1\"}, {\"key\": \"status\", \"value\": \"on/off\"}]}}, \"response\": []}, {\"name\": \"SetCondition\", \"request\": {\"method\": \"POST\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"greenhouse_id\\\": \\\"1\\\", \\\"condition_id\\\": \\\"1\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/greenhouses/set_condition\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"greenhouses\", \"set_condition\"], \"query\": [{\"key\": \"greenhouse_id\", \"value\": \"1\"}, {\"key\": \"condition_id\", \"value\": \"1\"}]}}, \"response\": []}]}, {\"name\": \"Plants\", \"item\": [{\"name\": \"SetPlantCondition\", \"request\": {\"method\": \"POST\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"plant_id\\\": \\\"1\\\", \\\"condition_id\\\": \\\"1\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/plants/set_condition\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plants\", \"set_condition\"], \"query\": [{\"key\": \"plant_id\", \"value\": \"1\"}, {\"key\": \"condition_id\", \"value\": \"1\"}]}}, \"response\": []}, {\"name\": \"GetPlantLog\", \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"plant_id\\\": \\\"1\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/plants/get_log\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"plants\", \"get_log\"], \"query\": [{\"key\": \"plant_id\", \"value\": \"1\"}]}}, \"response\": []}]}, {\"name\": \"Logs\", \"item\": [{\"name\": \"GetLogsByDateRange\", \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"start_date\\\": \\\"2023-01-01\\\", \\\"end_date\\\": \\\"2023-01-31\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/logs/get_by_date_range\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"logs\", \"get_by_date_range\"], \"query\": [{\"key\": \"start_date\", \"value\": \"2023-01-01\"}, {\"key\": \"end_date\", \"value\": \"2023-01-31\"}]}}, \"response\": []}]}, {\"name\": \"Conditions\", \"item\": [{\"name\": \"GetCurrentConditions\", \"request\": {\"method\": \"GET\", \"header\": [], \"body\": {\"mode\": \"raw\", \"raw\": \"{\\\"greenhouse_id\\\": \\\"1\\\"}\"}, \"url\": {\"raw\": \"http://192.168.4.1/conditions/get_current\", \"protocol\": \"http\", \"host\": [\"192.168.4.1\"], \"path\": [\"conditions\", \"get_current\"], \"query\": [{\"key\": \"greenhouse_id\", \"value\": \"1\"}]}}, \"response\": []}]}]}"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\AppContext.h",
        "content": "#ifndef APPCONTEXT_H\n#define APPCONTEXT_H\n\n#include <Context.h>\n#include \"DeviceManager/IDeviceManager.h\"\n#include \"Growify/IGrowify.h\"\n\nclass AppContext\n{\nprivate:\n    IDeviceManager* _deviceManager;\n    IConfig* growifyConfig;\n    IGrowify* growify;\n\npublic:\n    AppContext(Context* context): systemContext(context){}\n    ~AppContext(){}\n\n    IDeviceManager* getDeviceManager() { return _deviceManager; }\n    void setDeviceManager(IDeviceManager* deviceManager) { _deviceManager = deviceManager; }\n\n    IConfig* getGrowifyConfig() { return growifyConfig; }\n    void setGrowifyConfig(IConfig* config) { growifyConfig = config; }\n    \n    IGrowify* getGrowify() { return growify; }\n    void setgrowify(IGrowify* _growify) { growify = _growify; }\n    \n    Context* systemContext;\n};\n\n#endif //APPCONTEXT_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\cert_key.h",
        "content": "uint8_t certificate[] = {45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 13, 10, 77, 73, 73, 68, 68, 84, 67, 67, 65, 102, 87, 103, 65, 119, 73, 66, 65, 103, 73, 85, 83, 106, 84, 51, 78, 89, 115, 121, 118, 111, 75, 117, 103, 86, 114, 43, 106, 82, 113, 100, 79, 111, 74, 82, 102, 85, 77, 119, 68, 81, 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 76, 13, 10, 66, 81, 65, 119, 70, 106, 69, 85, 77, 66, 73, 71, 65, 49, 85, 69, 65, 119, 119, 76, 90, 88, 104, 104, 98, 88, 66, 115, 90, 83, 53, 106, 98, 50, 48, 119, 72, 104, 99, 78, 77, 106, 77, 120, 77, 84, 73, 120, 77, 68, 65, 49, 78, 68, 65, 51, 87, 104, 99, 78, 77, 106, 81, 120, 13, 10, 77, 84, 73, 119, 77, 68, 65, 49, 78, 68, 65, 51, 87, 106, 65, 87, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 68, 68, 65, 116, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118, 98, 84, 67, 67, 65, 83, 73, 119, 68, 81, 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 13, 10, 65, 81, 69, 66, 66, 81, 65, 68, 103, 103, 69, 80, 65, 68, 67, 67, 65, 81, 111, 67, 103, 103, 69, 66, 65, 77, 72, 66, 108, 83, 90, 82, 102, 48, 53, 48, 106, 67, 54, 70, 109, 74, 66, 122, 72, 111, 83, 80, 43, 53, 101, 73, 111, 111, 120, 47, 116, 55, 86, 111, 78, 119, 83, 109, 13, 10, 110, 121, 47, 112, 111, 43, 102, 121, 67, 51, 113, 70, 101, 113, 90, 97, 100, 118, 50, 104, 83, 110, 71, 82, 78, 109, 66, 65, 98, 74, 56, 67, 78, 90, 118, 89, 104, 86, 74, 67, 78, 89, 110, 112, 118, 52, 97, 73, 88, 67, 54, 100, 84, 50, 103, 73, 100, 99, 88, 50, 71, 55, 74, 66, 13, 10, 97, 88, 120, 120, 106, 99, 68, 115, 118, 84, 77, 104, 78, 68, 97, 52, 111, 105, 81, 73, 107, 71, 50, 65, 105, 51, 85, 79, 89, 43, 57, 120, 88, 54, 52, 71, 120, 105, 56, 84, 100, 87, 52, 72, 78, 85, 86, 53, 49, 74, 83, 75, 54, 110, 116, 114, 54, 111, 103, 49, 85, 88, 78, 112, 13, 10, 74, 84, 65, 55, 67, 54, 75, 106, 89, 57, 105, 103, 121, 87, 69, 116, 52, 111, 97, 56, 56, 105, 113, 73, 71, 121, 108, 100, 74, 48, 100, 87, 108, 68, 50, 82, 111, 89, 120, 107, 87, 80, 78, 51, 108, 74, 117, 77, 77, 120, 83, 83, 81, 52, 47, 110, 72, 105, 112, 73, 100, 118, 118, 88, 13, 10, 115, 108, 105, 77, 65, 49, 121, 83, 83, 106, 115, 51, 43, 85, 52, 86, 117, 100, 88, 68, 47, 70, 108, 83, 110, 110, 69, 79, 87, 120, 97, 90, 74, 53, 87, 65, 104, 103, 75, 83, 74, 57, 65, 97, 47, 102, 86, 69, 97, 78, 77, 85, 49, 116, 104, 70, 49, 67, 72, 67, 65, 77, 50, 48, 13, 10, 90, 110, 85, 88, 108, 71, 103, 52, 86, 110, 113, 103, 108, 105, 81, 114, 101, 120, 117, 74, 90, 50, 103, 74, 108, 84, 82, 66, 67, 105, 81, 70, 103, 108, 74, 99, 81, 83, 101, 103, 78, 99, 48, 112, 71, 56, 77, 67, 65, 119, 69, 65, 65, 97, 78, 84, 77, 70, 69, 119, 72, 81, 89, 68, 13, 10, 86, 82, 48, 79, 66, 66, 89, 69, 70, 68, 69, 74, 53, 111, 97, 82, 75, 102, 86, 47, 97, 106, 49, 121, 102, 56, 51, 120, 66, 50, 89, 115, 76, 103, 70, 115, 77, 66, 56, 71, 65, 49, 85, 100, 73, 119, 81, 89, 77, 66, 97, 65, 70, 68, 69, 74, 53, 111, 97, 82, 75, 102, 86, 47, 13, 10, 97, 106, 49, 121, 102, 56, 51, 120, 66, 50, 89, 115, 76, 103, 70, 115, 77, 65, 56, 71, 65, 49, 85, 100, 69, 119, 69, 66, 47, 119, 81, 70, 77, 65, 77, 66, 65, 102, 56, 119, 68, 81, 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 76, 66, 81, 65, 68, 103, 103, 69, 66, 13, 10, 65, 69, 104, 106, 115, 101, 117, 80, 71, 68, 98, 48, 88, 43, 100, 97, 50, 86, 113, 121, 108, 113, 109, 72, 75, 53, 55, 104, 112, 86, 57, 77, 71, 74, 65, 121, 78, 100, 117, 52, 73, 77, 56, 97, 105, 67, 66, 69, 85, 78, 107, 77, 102, 102, 88, 89, 89, 102, 81, 102, 105, 87, 109, 112, 13, 10, 111, 73, 97, 97, 78, 51, 87, 72, 114, 82, 87, 99, 111, 66, 77, 85, 98, 118, 97, 66, 56, 55, 77, 109, 73, 107, 43, 81, 48, 50, 103, 110, 56, 121, 83, 98, 70, 74, 101, 111, 73, 77, 117, 105, 98, 71, 120, 68, 99, 113, 84, 80, 86, 52, 69, 55, 51, 110, 67, 83, 106, 88, 100, 98, 13, 10, 75, 98, 97, 101, 97, 118, 71, 68, 43, 116, 112, 114, 53, 81, 100, 100, 52, 73, 78, 51, 55, 122, 87, 88, 121, 53, 49, 89, 75, 105, 82, 52, 75, 114, 72, 87, 109, 71, 89, 71, 80, 50, 70, 57, 88, 65, 68, 117, 47, 117, 65, 97, 107, 104, 47, 68, 71, 83, 70, 106, 112, 117, 78, 51, 13, 10, 116, 71, 103, 121, 49, 54, 76, 117, 70, 68, 98, 68, 48, 111, 116, 97, 101, 54, 110, 84, 71, 87, 111, 49, 88, 76, 72, 47, 86, 97, 47, 111, 122, 74, 106, 104, 114, 83, 81, 74, 109, 68, 107, 121, 51, 107, 72, 109, 85, 65, 70, 50, 71, 82, 67, 109, 70, 80, 51, 100, 52, 68, 90, 109, 13, 10, 112, 78, 66, 89, 106, 101, 48, 109, 76, 121, 78, 90, 53, 89, 120, 52, 86, 74, 114, 49, 87, 70, 86, 89, 97, 65, 90, 81, 116, 71, 114, 47, 122, 77, 121, 86, 75, 82, 85, 101, 54, 89, 116, 67, 97, 78, 105, 107, 122, 78, 76, 81, 85, 101, 101, 99, 86, 113, 97, 112, 67, 122, 98, 106, 13, 10, 106, 108, 69, 55, 99, 54, 78, 111, 109, 112, 99, 52, 85, 116, 109, 88, 83, 66, 104, 73, 102, 76, 65, 61, 13, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 13, 10};\nuint8_t private_key[] = {45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 13, 10, 77, 73, 73, 69, 117, 119, 73, 66, 65, 68, 65, 78, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 65, 81, 69, 70, 65, 65, 83, 67, 66, 75, 85, 119, 103, 103, 83, 104, 65, 103, 69, 65, 65, 111, 73, 66, 65, 81, 68, 66, 119, 90, 85, 109, 85, 88, 57, 79, 100, 73, 119, 117, 13, 10, 104, 90, 105, 81, 99, 120, 54, 69, 106, 47, 117, 88, 105, 75, 75, 77, 102, 55, 101, 49, 97, 68, 99, 69, 112, 112, 56, 118, 54, 97, 80, 110, 56, 103, 116, 54, 104, 88, 113, 109, 87, 110, 98, 57, 111, 85, 112, 120, 107, 84, 90, 103, 81, 71, 121, 102, 65, 106, 87, 98, 50, 73, 86, 83, 13, 10, 81, 106, 87, 74, 54, 98, 43, 71, 105, 70, 119, 117, 110, 85, 57, 111, 67, 72, 88, 70, 57, 104, 117, 121, 81, 87, 108, 56, 99, 89, 51, 65, 55, 76, 48, 122, 73, 84, 81, 50, 117, 75, 73, 107, 67, 74, 66, 116, 103, 73, 116, 49, 68, 109, 80, 118, 99, 86, 43, 117, 66, 115, 89, 118, 13, 10, 69, 51, 86, 117, 66, 122, 86, 70, 101, 100, 83, 85, 105, 117, 112, 55, 97, 43, 113, 73, 78, 86, 70, 122, 97, 83, 85, 119, 79, 119, 117, 105, 111, 50, 80, 89, 111, 77, 108, 104, 76, 101, 75, 71, 118, 80, 73, 113, 105, 66, 115, 112, 88, 83, 100, 72, 86, 112, 81, 57, 107, 97, 71, 77, 13, 10, 90, 70, 106, 122, 100, 53, 83, 98, 106, 68, 77, 85, 107, 107, 79, 80, 53, 120, 52, 113, 83, 72, 98, 55, 49, 55, 74, 89, 106, 65, 78, 99, 107, 107, 111, 55, 78, 47, 108, 79, 70, 98, 110, 86, 119, 47, 120, 90, 85, 112, 53, 120, 68, 108, 115, 87, 109, 83, 101, 86, 103, 73, 89, 67, 13, 10, 107, 105, 102, 81, 71, 118, 51, 49, 82, 71, 106, 84, 70, 78, 98, 89, 82, 100, 81, 104, 119, 103, 68, 78, 116, 71, 90, 49, 70, 53, 82, 111, 79, 70, 90, 54, 111, 74, 89, 107, 75, 51, 115, 98, 105, 87, 100, 111, 67, 90, 85, 48, 81, 81, 111, 107, 66, 89, 74, 83, 88, 69, 69, 110, 13, 10, 111, 68, 88, 78, 75, 82, 118, 68, 65, 103, 77, 66, 65, 65, 69, 67, 103, 102, 56, 68, 73, 52, 71, 75, 121, 111, 114, 121, 108, 77, 79, 83, 100, 100, 80, 79, 75, 79, 73, 82, 54, 86, 74, 65, 111, 105, 113, 48, 111, 51, 115, 104, 113, 101, 70, 89, 90, 113, 88, 105, 78, 50, 97, 48, 13, 10, 70, 50, 120, 106, 101, 83, 66, 115, 54, 56, 52, 66, 113, 67, 112, 73, 121, 115, 50, 108, 119, 89, 79, 73, 101, 85, 118, 55, 110, 68, 78, 57, 111, 97, 81, 65, 74, 118, 51, 114, 118, 119, 50, 67, 47, 120, 104, 118, 50, 115, 74, 74, 52, 53, 119, 108, 49, 105, 87, 113, 109, 113, 84, 72, 13, 10, 122, 104, 48, 71, 82, 104, 74, 55, 51, 52, 72, 80, 57, 89, 67, 55, 122, 79, 104, 88, 84, 43, 118, 108, 71, 114, 120, 98, 100, 122, 107, 90, 65, 112, 109, 82, 107, 74, 116, 105, 53, 112, 51, 100, 121, 105, 89, 82, 85, 106, 49, 70, 114, 69, 119, 108, 101, 43, 70, 105, 71, 48, 57, 67, 13, 10, 74, 113, 102, 70, 73, 98, 103, 119, 43, 50, 50, 109, 119, 74, 76, 53, 118, 48, 57, 73, 48, 86, 86, 74, 65, 114, 48, 69, 116, 89, 47, 113, 66, 71, 103, 113, 52, 47, 74, 121, 70, 65, 77, 65, 84, 77, 85, 54, 117, 69, 106, 105, 118, 113, 57, 97, 53, 79, 66, 99, 97, 73, 117, 79, 13, 10, 67, 68, 104, 119, 101, 98, 73, 89, 72, 99, 107, 75, 111, 110, 66, 54, 50, 80, 67, 106, 119, 85, 81, 77, 79, 90, 51, 69, 75, 55, 79, 89, 65, 65, 54, 82, 110, 80, 100, 82, 121, 82, 87, 84, 70, 109, 108, 104, 122, 48, 104, 89, 79, 53, 100, 100, 50, 67, 47, 107, 98, 110, 115, 75, 13, 10, 77, 68, 86, 79, 117, 112, 80, 114, 101, 66, 74, 80, 55, 98, 100, 76, 118, 120, 52, 53, 119, 47, 102, 89, 83, 102, 112, 100, 81, 82, 122, 67, 47, 88, 80, 56, 99, 79, 48, 67, 103, 89, 69, 65, 43, 106, 70, 88, 84, 115, 56, 71, 105, 54, 80, 101, 86, 101, 53, 111, 68, 43, 112, 115, 13, 10, 85, 120, 80, 107, 87, 105, 80, 80, 65, 117, 99, 105, 98, 68, 78, 81, 114, 115, 101, 89, 117, 47, 82, 47, 121, 109, 55, 49, 47, 55, 115, 48, 69, 111, 68, 54, 66, 105, 105, 56, 52, 106, 83, 70, 116, 53, 114, 69, 103, 111, 71, 99, 105, 67, 114, 116, 75, 122, 84, 56, 114, 118, 69, 56, 13, 10, 82, 51, 83, 109, 66, 53, 74, 88, 122, 69, 54, 73, 105, 77, 47, 118, 88, 72, 102, 74, 73, 43, 98, 100, 53, 68, 108, 85, 80, 117, 77, 71, 100, 89, 68, 43, 112, 57, 90, 86, 70, 54, 105, 68, 65, 71, 80, 100, 43, 56, 80, 115, 75, 101, 43, 73, 121, 71, 117, 56, 99, 77, 50, 47, 13, 10, 88, 77, 90, 53, 104, 55, 69, 54, 68, 48, 70, 50, 86, 110, 82, 71, 66, 48, 55, 114, 55, 84, 99, 67, 103, 89, 69, 65, 120, 107, 68, 107, 101, 70, 75, 112, 97, 86, 102, 109, 72, 113, 51, 100, 113, 74, 122, 86, 104, 77, 77, 113, 117, 43, 83, 76, 106, 52, 113, 120, 67, 122, 121, 83, 13, 10, 54, 84, 84, 65, 75, 50, 88, 120, 47, 104, 78, 73, 85, 108, 49, 52, 69, 54, 115, 99, 114, 54, 90, 73, 99, 73, 77, 68, 65, 53, 98, 111, 88, 73, 122, 87, 83, 73, 101, 53, 43, 117, 86, 70, 119, 99, 52, 50, 104, 83, 120, 74, 50, 86, 100, 116, 115, 118, 87, 48, 43, 50, 87, 54, 13, 10, 76, 77, 73, 70, 81, 104, 76, 88, 108, 73, 67, 101, 56, 115, 120, 90, 104, 69, 52, 99, 111, 114, 103, 112, 75, 74, 81, 56, 77, 101, 48, 51, 69, 108, 105, 77, 83, 50, 50, 111, 114, 103, 106, 67, 74, 75, 108, 80, 105, 68, 99, 56, 100, 70, 57, 75, 108, 83, 52, 104, 100, 89, 78, 70, 13, 10, 113, 90, 120, 102, 113, 57, 85, 67, 103, 89, 69, 65, 120, 77, 65, 99, 109, 114, 115, 118, 117, 73, 121, 114, 103, 103, 81, 48, 68, 97, 65, 97, 103, 57, 75, 50, 49, 122, 81, 108, 122, 88, 67, 97, 110, 50, 66, 84, 97, 76, 57, 75, 71, 122, 85, 82, 99, 99, 54, 69, 52, 104, 69, 68, 13, 10, 121, 68, 70, 112, 98, 89, 75, 72, 49, 53, 80, 97, 80, 67, 77, 88, 117, 108, 72, 88, 71, 84, 89, 52, 119, 75, 117, 119, 115, 112, 113, 43, 47, 113, 112, 55, 68, 113, 86, 70, 75, 107, 80, 119, 70, 122, 98, 43, 85, 48, 100, 89, 66, 69, 87, 47, 53, 89, 81, 51, 47, 105, 82, 109, 13, 10, 112, 101, 49, 70, 86, 104, 79, 49, 89, 120, 57, 47, 116, 99, 84, 84, 103, 118, 80, 50, 79, 112, 120, 71, 103, 117, 90, 71, 107, 75, 99, 99, 103, 65, 99, 77, 57, 50, 113, 108, 55, 43, 49, 89, 57, 72, 65, 72, 121, 105, 79, 69, 89, 85, 48, 67, 103, 89, 66, 118, 103, 98, 52, 47, 13, 10, 81, 116, 99, 81, 98, 105, 84, 55, 97, 110, 85, 54, 121, 103, 78, 54, 75, 98, 43, 87, 99, 77, 82, 105, 86, 118, 75, 102, 84, 70, 71, 104, 73, 48, 57, 87, 50, 88, 56, 84, 108, 99, 114, 101, 115, 76, 51, 66, 54, 107, 77, 51, 78, 69, 75, 89, 76, 99, 102, 55, 77, 57, 121, 55, 13, 10, 101, 87, 100, 111, 52, 104, 89, 106, 51, 79, 75, 119, 85, 65, 106, 119, 80, 71, 110, 73, 43, 100, 105, 48, 105, 71, 104, 106, 52, 101, 75, 109, 71, 47, 97, 84, 74, 68, 47, 109, 119, 98, 85, 108, 65, 80, 84, 48, 97, 109, 55, 71, 119, 117, 103, 55, 98, 54, 121, 118, 116, 67, 108, 43, 13, 10, 103, 120, 108, 100, 114, 50, 55, 112, 101, 47, 109, 101, 88, 122, 66, 104, 103, 66, 102, 98, 113, 71, 69, 116, 113, 81, 87, 101, 114, 57, 102, 49, 118, 119, 77, 56, 104, 81, 75, 66, 103, 70, 102, 65, 99, 115, 111, 111, 99, 67, 50, 116, 101, 87, 50, 113, 103, 101, 57, 122, 105, 80, 48, 117, 13, 10, 69, 75, 114, 76, 82, 110, 43, 47, 98, 97, 120, 82, 66, 72, 86, 121, 85, 90, 68, 70, 90, 75, 65, 122, 87, 66, 81, 73, 122, 79, 82, 99, 121, 89, 69, 54, 103, 49, 77, 97, 112, 86, 51, 106, 84, 76, 106, 90, 81, 105, 90, 80, 50, 52, 43, 105, 47, 53, 87, 121, 83, 113, 90, 67, 13, 10, 105, 101, 122, 72, 102, 56, 120, 78, 48, 53, 101, 87, 109, 118, 68, 108, 67, 56, 121, 110, 118, 104, 68, 114, 68, 76, 82, 56, 116, 50, 65, 55, 83, 76, 69, 86, 86, 111, 115, 105, 118, 98, 111, 83, 106, 68, 101, 66, 104, 99, 87, 97, 73, 51, 117, 106, 89, 88, 101, 70, 52, 50, 98, 107, 13, 10, 76, 97, 49, 113, 111, 57, 75, 79, 87, 70, 69, 109, 68, 103, 106, 115, 107, 121, 87, 97, 13, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 13, 10};"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Runtime.h",
        "content": "\n#ifndef RUNTIME_H\n#define RUNTIME_H\n\n#define LOG_LEVEL_DEBUG\n#define LOG_LEVEL_INFO\n#define LOG_LEVEL_WARNING\n#define LOG_LEVEL_ERROR\n#define OSTAD_NETWORK_ENABLE\n\n#include \"AppContext.h\"\n#include \"DeviceManager/DeviceManager.h\"\n#include \"Config/GrowifyConfig.h\"\n#include \"Growify/Growify.h\"\n#include \"Apis/Apis.h\"\n#include \"cert_key.h\"\n\n// LogLevel definition\n#define LOG_LEVEL_DEBUG\n#define LOG_LEVEL_INFO\n#define LOG_LEVEL_WARNING\n#define LOG_LEVEL_ERROR\n\nclass Runtime\n{\nprivate:\n    OStad* ostad;\n    GrowifyConfig* growifyConfig;\n    DeviceManager* deviceManager;\n    Growify* growify;\n\npublic:\n    Runtime();\n    void update();\n\n    AppContext* appContext;\n    Context* systemContext;\n};\n\nRuntime::Runtime()\n{\n    // CertificateData certificateData;\n    // certificateData.certificate = const_cast<unsigned char*>(certificate);\n    // certificateData.privatekey = const_cast<unsigned char*>(private_key);\n    // certificateData.certificate_length = sizeof(certificate);\n    // certificateData.privateky_length = sizeof(private_key);\n\n    // ostad = new OStad(StorageType::SPIFFS_TYPE, certificateData);\n    // If you want to use HTTPS on ESP32 server, add certificate and private_key and uncomment above code and comment below line\n    ostad = new OStad(StorageType::SPIFFS_TYPE);\n\n    \n    systemContext = ostad->getContext();\n    appContext = new AppContext(systemContext);\n\n    growifyConfig = new GrowifyConfig(appContext);\n    deviceManager = new DeviceManager(appContext);\n    growify = new Growify(appContext);\n\n    appContext->setGrowifyConfig(growifyConfig);    \n    appContext->setDeviceManager(deviceManager);\n\n    appContext->setgrowify(growify);\n\n    //initialize growifyConfig first of all initialization\n    growifyConfig->initialize();\n    deviceManager->initialize();\n    growify->initialize();\n\n    createApis(appContext);\n\n    Permissions::addPermissions(systemContext);\n    \n    ostad->begin();\n}\n\nvoid Runtime::update()\n{\n    ostad->update();\n    deviceManager->update();\n    growify->update();\n}\n\n#endif //RUNTIME_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\Apis.h",
        "content": "\n#ifndef APIS_H\n#define APIS_H\n\n#include \"Permissions.h\"\n#include \"GreenhousesApis.h\"\n#include \"PlantsApis.h\"\n#include \"LogsApis.h\"\n#include \"ConditionsApis.h\"\n#include \"TemperatureConditionApis.h\"\n#include \"HumidityConditionApis.h\"\n#include \"LightConditionApis.h\"\n#include \"SoilMoistureConditionApis.h\"\n#include \"ConditionApis.h\"\n#include \"GreenhouseApis.h\"\n#include \"PlantTypeApis.h\"\n#include \"PlantApis.h\"\n#include \"GreenhouseSensorApis.h\"\n#include \"GreenhouseControlApis.h\"\n#include \"TemperatureLogApis.h\"\n#include \"HumidityLogApis.h\"\n#include \"LightLogApis.h\"\n#include \"SoilMoistureLogApis.h\"\n\n\nvoid createApis(AppContext* appContext)\n{\n    std::vector<ApiInterface*> apis = std::vector<ApiInterface*>();\n\n    \n    GreenhousesApis* greenhousesApis = new GreenhousesApis(appContext, true);\n    apis.push_back(greenhousesApis);\n    \n    PlantsApis* plantsApis = new PlantsApis(appContext, true);\n    apis.push_back(plantsApis);\n    \n    LogsApis* logsApis = new LogsApis(appContext, true);\n    apis.push_back(logsApis);\n    \n    ConditionsApis* conditionsApis = new ConditionsApis(appContext, true);\n    apis.push_back(conditionsApis);\n    \n    TemperatureConditionApis* temperatureconditionApis = new TemperatureConditionApis(appContext, true);\n    apis.push_back(temperatureconditionApis);\n    \n    HumidityConditionApis* humidityconditionApis = new HumidityConditionApis(appContext, true);\n    apis.push_back(humidityconditionApis);\n    \n    LightConditionApis* lightconditionApis = new LightConditionApis(appContext, true);\n    apis.push_back(lightconditionApis);\n    \n    SoilMoistureConditionApis* soilmoistureconditionApis = new SoilMoistureConditionApis(appContext, true);\n    apis.push_back(soilmoistureconditionApis);\n    \n    ConditionApis* conditionApis = new ConditionApis(appContext, true);\n    apis.push_back(conditionApis);\n    \n    GreenhouseApis* greenhouseApis = new GreenhouseApis(appContext, true);\n    apis.push_back(greenhouseApis);\n    \n    PlantTypeApis* planttypeApis = new PlantTypeApis(appContext, true);\n    apis.push_back(planttypeApis);\n    \n    PlantApis* plantApis = new PlantApis(appContext, true);\n    apis.push_back(plantApis);\n    \n    GreenhouseSensorApis* greenhousesensorApis = new GreenhouseSensorApis(appContext, true);\n    apis.push_back(greenhousesensorApis);\n    \n    GreenhouseControlApis* greenhousecontrolApis = new GreenhouseControlApis(appContext, true);\n    apis.push_back(greenhousecontrolApis);\n    \n    TemperatureLogApis* temperaturelogApis = new TemperatureLogApis(appContext, true);\n    apis.push_back(temperaturelogApis);\n    \n    HumidityLogApis* humiditylogApis = new HumidityLogApis(appContext, true);\n    apis.push_back(humiditylogApis);\n    \n    LightLogApis* lightlogApis = new LightLogApis(appContext, true);\n    apis.push_back(lightlogApis);\n    \n    SoilMoistureLogApis* soilmoisturelogApis = new SoilMoistureLogApis(appContext, true);\n    apis.push_back(soilmoisturelogApis);\n    \n\n    appContext->systemContext->getNetwork()->addApis(apis);\n}\n\n#endif //APIS_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\ConditionApis.h",
        "content": "#ifndef CONDITIONAPIS_h\n#define CONDITIONAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/ConditionController.h\"\n#include \"Permissions.h\"\n\nclass ConditionApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    ConditionController* conditionController;\n    std::string class_path = \"/condition\";\n\npublic:\n    ConditionApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int TemperatureConditionId, int HumidityConditionId, int LightConditionId, int SoilMoistureConditionId);\n    String handleupdate(int id, int TemperatureConditionId, int HumidityConditionId, int LightConditionId, int SoilMoistureConditionId);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nConditionApis::ConditionApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    conditionController = new ConditionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"TemperatureConditionId\") || !req->getParams()->isQueryParameterSet(\"HumidityConditionId\") || !req->getParams()->isQueryParameterSet(\"LightConditionId\") || !req->getParams()->isQueryParameterSet(\"SoilMoistureConditionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int TemperatureConditionId = getQueryParameterint(req, \"TemperatureConditionId\");\n    int HumidityConditionId = getQueryParameterint(req, \"HumidityConditionId\");\n    int LightConditionId = getQueryParameterint(req, \"LightConditionId\");\n    int SoilMoistureConditionId = getQueryParameterint(req, \"SoilMoistureConditionId\");\n\n        response(res, handlecreate(TemperatureConditionId, HumidityConditionId, LightConditionId, SoilMoistureConditionId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"TemperatureConditionId\") || !req->getParams()->isQueryParameterSet(\"HumidityConditionId\") || !req->getParams()->isQueryParameterSet(\"LightConditionId\") || !req->getParams()->isQueryParameterSet(\"SoilMoistureConditionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int TemperatureConditionId = getQueryParameterint(req, \"TemperatureConditionId\");\n    int HumidityConditionId = getQueryParameterint(req, \"HumidityConditionId\");\n    int LightConditionId = getQueryParameterint(req, \"LightConditionId\");\n    int SoilMoistureConditionId = getQueryParameterint(req, \"SoilMoistureConditionId\");\n        \n        response(res, handleupdate(id, TemperatureConditionId, HumidityConditionId, LightConditionId, SoilMoistureConditionId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString ConditionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString ConditionApis::handlecreate(int TemperatureConditionId, int HumidityConditionId, int LightConditionId, int SoilMoistureConditionId) {\n    ConditionEntity* conditionEntity = new ConditionEntity(TemperatureConditionId, HumidityConditionId, LightConditionId, SoilMoistureConditionId);\n    int id = conditionController->Add(*conditionEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString ConditionApis::handleupdate(int id, int TemperatureConditionId, int HumidityConditionId, int LightConditionId, int SoilMoistureConditionId) {\n    ConditionEntity* conditionEntity = new ConditionEntity(id, TemperatureConditionId, HumidityConditionId, LightConditionId, SoilMoistureConditionId);\n    \n    if (conditionController->Update(*conditionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString ConditionApis::handledelete(int id) {\n    \n    if (conditionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString ConditionApis::handlegetAll() {\n    return conditionController->GetAllJson();\n}\nString ConditionApis::handlegetById(int id) {\n    return conditionController->GetById(id).toJson();\n}\nString ConditionApis::handleget(String query) {\n    return conditionController->GetJson(query);\n}\n\nString ConditionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"TemperatureConditionId\"].toInt(), parameters[\"HumidityConditionId\"].toInt(), parameters[\"LightConditionId\"].toInt(), parameters[\"SoilMoistureConditionId\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"TemperatureConditionId\"].toInt(), parameters[\"HumidityConditionId\"].toInt(), parameters[\"LightConditionId\"].toInt(), parameters[\"SoilMoistureConditionId\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //CONDITIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\ConditionsApis.h",
        "content": "\n#ifndef ConditionsApis_h\n#define ConditionsApis_h\n\n\n#include \"../AppContext.h\"\n#include \"Permissions.h\"\nclass ConditionsApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    std::string class_path = \"/conditions\";\n\npublic:\n    ConditionsApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlegetCurrentConditions(String greenhouse_id);\n};\n\nConditionsApis::ConditionsApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    if (!add_apis) return;\n\n    \n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getCurrentConditions\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::CONDITIONS_GETCURRENTCONDITIONS) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"greenhouse_id\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String greenhouse_id = getQueryParameterString(req, \"greenhouse_id\");\n        \n        response(res, handlegetCurrentConditions(greenhouse_id));\n    }));\n}\n\nString ConditionsApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\n\nString ConditionsApis::handlegetCurrentConditions(String greenhouse_id) {\n    return \"\";\n}\n\nString ConditionsApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlegetCurrentConditions\") {\n        handlegetCurrentConditions(parameters[\"greenhouse_id\"]);\n        return \"OK\";\n    }\n    return \"\";\n}\n\n#endif //ConditionsApis_h\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\GreenhouseApis.h",
        "content": "#ifndef GREENHOUSEAPIS_h\n#define GREENHOUSEAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/GreenhouseController.h\"\n#include \"Permissions.h\"\n\nclass GreenhouseApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    GreenhouseController* greenhouseController;\n    std::string class_path = \"/greenhouse\";\n\npublic:\n    GreenhouseApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int ConditionId);\n    String handleupdate(int id, String Name, int ConditionId);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nGreenhouseApis::GreenhouseApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    greenhouseController = new GreenhouseController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"ConditionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int ConditionId = getQueryParameterint(req, \"ConditionId\");\n\n        response(res, handlecreate(Name, ConditionId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"ConditionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int ConditionId = getQueryParameterint(req, \"ConditionId\");\n        \n        response(res, handleupdate(id, Name, ConditionId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString GreenhouseApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString GreenhouseApis::handlecreate(String Name, int ConditionId) {\n    GreenhouseEntity* greenhouseEntity = new GreenhouseEntity(Name, ConditionId);\n    int id = greenhouseController->Add(*greenhouseEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString GreenhouseApis::handleupdate(int id, String Name, int ConditionId) {\n    GreenhouseEntity* greenhouseEntity = new GreenhouseEntity(id, Name, ConditionId);\n    \n    if (greenhouseController->Update(*greenhouseEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString GreenhouseApis::handledelete(int id) {\n    \n    if (greenhouseController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString GreenhouseApis::handlegetAll() {\n    return greenhouseController->GetAllJson();\n}\nString GreenhouseApis::handlegetById(int id) {\n    return greenhouseController->GetById(id).toJson();\n}\nString GreenhouseApis::handleget(String query) {\n    return greenhouseController->GetJson(query);\n}\n\nString GreenhouseApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"ConditionId\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"ConditionId\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //GREENHOUSEApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\GreenhouseControlApis.h",
        "content": "#ifndef GREENHOUSECONTROLAPIS_h\n#define GREENHOUSECONTROLAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/GreenhouseControlController.h\"\n#include \"Permissions.h\"\n\nclass GreenhouseControlApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    GreenhouseControlController* greenhousecontrolController;\n    std::string class_path = \"/greenhousecontrol\";\n\npublic:\n    GreenhouseControlApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int ControlModuleId, String Role);\n    String handleupdate(int id, int GreenhouseId, int ControlModuleId, String Role);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nGreenhouseControlApis::GreenhouseControlApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    greenhousecontrolController = new GreenhouseControlController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"ControlModuleId\") || !req->getParams()->isQueryParameterSet(\"Role\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int ControlModuleId = getQueryParameterint(req, \"ControlModuleId\");\n    String Role = getQueryParameterString(req, \"Role\");\n\n        response(res, handlecreate(GreenhouseId, ControlModuleId, Role));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"ControlModuleId\") || !req->getParams()->isQueryParameterSet(\"Role\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int ControlModuleId = getQueryParameterint(req, \"ControlModuleId\");\n    String Role = getQueryParameterString(req, \"Role\");\n        \n        response(res, handleupdate(id, GreenhouseId, ControlModuleId, Role));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSECONTROL_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString GreenhouseControlApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString GreenhouseControlApis::handlecreate(int GreenhouseId, int ControlModuleId, String Role) {\n    GreenhouseControlEntity* greenhousecontrolEntity = new GreenhouseControlEntity(GreenhouseId, ControlModuleId, Role);\n    int id = greenhousecontrolController->Add(*greenhousecontrolEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString GreenhouseControlApis::handleupdate(int id, int GreenhouseId, int ControlModuleId, String Role) {\n    GreenhouseControlEntity* greenhousecontrolEntity = new GreenhouseControlEntity(id, GreenhouseId, ControlModuleId, Role);\n    \n    if (greenhousecontrolController->Update(*greenhousecontrolEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString GreenhouseControlApis::handledelete(int id) {\n    \n    if (greenhousecontrolController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString GreenhouseControlApis::handlegetAll() {\n    return greenhousecontrolController->GetAllJson();\n}\nString GreenhouseControlApis::handlegetById(int id) {\n    return greenhousecontrolController->GetById(id).toJson();\n}\nString GreenhouseControlApis::handleget(String query) {\n    return greenhousecontrolController->GetJson(query);\n}\n\nString GreenhouseControlApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"ControlModuleId\"].toInt(), parameters[\"Role\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"ControlModuleId\"].toInt(), parameters[\"Role\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //GREENHOUSECONTROLApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\GreenhousesApis.h",
        "content": "\n#ifndef GreenhousesApis_h\n#define GreenhousesApis_h\n\n\n#include \"../AppContext.h\"\n#include \"Permissions.h\"\nclass GreenhousesApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    std::string class_path = \"/greenhouses\";\n\npublic:\n    GreenhousesApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handleswitchModule(String module_id, String status);\n    String handlesetCondition(String greenhouse_id, String condition_id);\n};\n\nGreenhousesApis::GreenhousesApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    if (!add_apis) return;\n\n    \n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/switchModule\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSES_SWITCHMODULE) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"module_id\") || !req->getParams()->isQueryParameterSet(\"status\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String module_id = getQueryParameterString(req, \"module_id\");\n        String status = getQueryParameterString(req, \"status\");\n        \n        response(res, handleswitchModule(module_id, status));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/setCondition\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSES_SETCONDITION) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"greenhouse_id\") || !req->getParams()->isQueryParameterSet(\"condition_id\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String greenhouse_id = getQueryParameterString(req, \"greenhouse_id\");\n        String condition_id = getQueryParameterString(req, \"condition_id\");\n        \n        response(res, handlesetCondition(greenhouse_id, condition_id));\n    }));\n}\n\nString GreenhousesApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\n\nString GreenhousesApis::handleswitchModule(String module_id, String status) {\n    return \"\";\n}\nString GreenhousesApis::handlesetCondition(String greenhouse_id, String condition_id) {\n    return \"\";\n}\n\nString GreenhousesApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handleswitchModule\") {\n        handleswitchModule(parameters[\"module_id\"], parameters[\"status\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handlesetCondition\") {\n        handlesetCondition(parameters[\"greenhouse_id\"], parameters[\"condition_id\"]);\n        return \"OK\";\n    }\n    return \"\";\n}\n\n#endif //GreenhousesApis_h\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\GreenhouseSensorApis.h",
        "content": "#ifndef GREENHOUSESENSORAPIS_h\n#define GREENHOUSESENSORAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/GreenhouseSensorController.h\"\n#include \"Permissions.h\"\n\nclass GreenhouseSensorApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    GreenhouseSensorController* greenhousesensorController;\n    std::string class_path = \"/greenhousesensor\";\n\npublic:\n    GreenhouseSensorApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int SensorModuleId, String Role);\n    String handleupdate(int id, int GreenhouseId, int SensorModuleId, String Role);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nGreenhouseSensorApis::GreenhouseSensorApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    greenhousesensorController = new GreenhouseSensorController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"SensorModuleId\") || !req->getParams()->isQueryParameterSet(\"Role\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int SensorModuleId = getQueryParameterint(req, \"SensorModuleId\");\n    String Role = getQueryParameterString(req, \"Role\");\n\n        response(res, handlecreate(GreenhouseId, SensorModuleId, Role));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"SensorModuleId\") || !req->getParams()->isQueryParameterSet(\"Role\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int SensorModuleId = getQueryParameterint(req, \"SensorModuleId\");\n    String Role = getQueryParameterString(req, \"Role\");\n        \n        response(res, handleupdate(id, GreenhouseId, SensorModuleId, Role));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::GREENHOUSESENSOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString GreenhouseSensorApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString GreenhouseSensorApis::handlecreate(int GreenhouseId, int SensorModuleId, String Role) {\n    GreenhouseSensorEntity* greenhousesensorEntity = new GreenhouseSensorEntity(GreenhouseId, SensorModuleId, Role);\n    int id = greenhousesensorController->Add(*greenhousesensorEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString GreenhouseSensorApis::handleupdate(int id, int GreenhouseId, int SensorModuleId, String Role) {\n    GreenhouseSensorEntity* greenhousesensorEntity = new GreenhouseSensorEntity(id, GreenhouseId, SensorModuleId, Role);\n    \n    if (greenhousesensorController->Update(*greenhousesensorEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString GreenhouseSensorApis::handledelete(int id) {\n    \n    if (greenhousesensorController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString GreenhouseSensorApis::handlegetAll() {\n    return greenhousesensorController->GetAllJson();\n}\nString GreenhouseSensorApis::handlegetById(int id) {\n    return greenhousesensorController->GetById(id).toJson();\n}\nString GreenhouseSensorApis::handleget(String query) {\n    return greenhousesensorController->GetJson(query);\n}\n\nString GreenhouseSensorApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"SensorModuleId\"].toInt(), parameters[\"Role\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"SensorModuleId\"].toInt(), parameters[\"Role\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //GREENHOUSESENSORApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\HumidityConditionApis.h",
        "content": "#ifndef HUMIDITYCONDITIONAPIS_h\n#define HUMIDITYCONDITIONAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/HumidityConditionController.h\"\n#include \"Permissions.h\"\n\nclass HumidityConditionApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    HumidityConditionController* humidityconditionController;\n    std::string class_path = \"/humiditycondition\";\n\npublic:\n    HumidityConditionApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int MinHumidity, int MaxHumidity, int LowHumidityAlertThreshold, int HighHumidityAlertThreshold);\n    String handleupdate(int id, String Name, int MinHumidity, int MaxHumidity, int LowHumidityAlertThreshold, int HighHumidityAlertThreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nHumidityConditionApis::HumidityConditionApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    humidityconditionController = new HumidityConditionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinHumidity\") || !req->getParams()->isQueryParameterSet(\"MaxHumidity\") || !req->getParams()->isQueryParameterSet(\"LowHumidityAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighHumidityAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int MinHumidity = getQueryParameterint(req, \"MinHumidity\");\n    int MaxHumidity = getQueryParameterint(req, \"MaxHumidity\");\n    int LowHumidityAlertThreshold = getQueryParameterint(req, \"LowHumidityAlertThreshold\");\n    int HighHumidityAlertThreshold = getQueryParameterint(req, \"HighHumidityAlertThreshold\");\n\n        response(res, handlecreate(Name, MinHumidity, MaxHumidity, LowHumidityAlertThreshold, HighHumidityAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinHumidity\") || !req->getParams()->isQueryParameterSet(\"MaxHumidity\") || !req->getParams()->isQueryParameterSet(\"LowHumidityAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighHumidityAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int MinHumidity = getQueryParameterint(req, \"MinHumidity\");\n    int MaxHumidity = getQueryParameterint(req, \"MaxHumidity\");\n    int LowHumidityAlertThreshold = getQueryParameterint(req, \"LowHumidityAlertThreshold\");\n    int HighHumidityAlertThreshold = getQueryParameterint(req, \"HighHumidityAlertThreshold\");\n        \n        response(res, handleupdate(id, Name, MinHumidity, MaxHumidity, LowHumidityAlertThreshold, HighHumidityAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString HumidityConditionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString HumidityConditionApis::handlecreate(String Name, int MinHumidity, int MaxHumidity, int LowHumidityAlertThreshold, int HighHumidityAlertThreshold) {\n    HumidityConditionEntity* humidityconditionEntity = new HumidityConditionEntity(Name, MinHumidity, MaxHumidity, LowHumidityAlertThreshold, HighHumidityAlertThreshold);\n    int id = humidityconditionController->Add(*humidityconditionEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString HumidityConditionApis::handleupdate(int id, String Name, int MinHumidity, int MaxHumidity, int LowHumidityAlertThreshold, int HighHumidityAlertThreshold) {\n    HumidityConditionEntity* humidityconditionEntity = new HumidityConditionEntity(id, Name, MinHumidity, MaxHumidity, LowHumidityAlertThreshold, HighHumidityAlertThreshold);\n    \n    if (humidityconditionController->Update(*humidityconditionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString HumidityConditionApis::handledelete(int id) {\n    \n    if (humidityconditionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString HumidityConditionApis::handlegetAll() {\n    return humidityconditionController->GetAllJson();\n}\nString HumidityConditionApis::handlegetById(int id) {\n    return humidityconditionController->GetById(id).toJson();\n}\nString HumidityConditionApis::handleget(String query) {\n    return humidityconditionController->GetJson(query);\n}\n\nString HumidityConditionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"MinHumidity\"].toInt(), parameters[\"MaxHumidity\"].toInt(), parameters[\"LowHumidityAlertThreshold\"].toInt(), parameters[\"HighHumidityAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"MinHumidity\"].toInt(), parameters[\"MaxHumidity\"].toInt(), parameters[\"LowHumidityAlertThreshold\"].toInt(), parameters[\"HighHumidityAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //HUMIDITYCONDITIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\HumidityLogApis.h",
        "content": "#ifndef HUMIDITYLOGAPIS_h\n#define HUMIDITYLOGAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/HumidityLogController.h\"\n#include \"Permissions.h\"\n\nclass HumidityLogApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    HumidityLogController* humiditylogController;\n    std::string class_path = \"/humiditylog\";\n\npublic:\n    HumidityLogApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int HumidityReading, String DryerState, String HumidifierState);\n    String handleupdate(int id, int GreenhouseId, int HumidityReading, String DryerState, String HumidifierState);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nHumidityLogApis::HumidityLogApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    humiditylogController = new HumidityLogController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"HumidityReading\") || !req->getParams()->isQueryParameterSet(\"DryerState\") || !req->getParams()->isQueryParameterSet(\"HumidifierState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int HumidityReading = getQueryParameterint(req, \"HumidityReading\");\n    String DryerState = getQueryParameterString(req, \"DryerState\");\n    String HumidifierState = getQueryParameterString(req, \"HumidifierState\");\n\n        response(res, handlecreate(GreenhouseId, HumidityReading, DryerState, HumidifierState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"HumidityReading\") || !req->getParams()->isQueryParameterSet(\"DryerState\") || !req->getParams()->isQueryParameterSet(\"HumidifierState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int HumidityReading = getQueryParameterint(req, \"HumidityReading\");\n    String DryerState = getQueryParameterString(req, \"DryerState\");\n    String HumidifierState = getQueryParameterString(req, \"HumidifierState\");\n        \n        response(res, handleupdate(id, GreenhouseId, HumidityReading, DryerState, HumidifierState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::HUMIDITYLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString HumidityLogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString HumidityLogApis::handlecreate(int GreenhouseId, int HumidityReading, String DryerState, String HumidifierState) {\n    HumidityLogEntity* humiditylogEntity = new HumidityLogEntity(GreenhouseId, HumidityReading, DryerState, HumidifierState);\n    int id = humiditylogController->Add(*humiditylogEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString HumidityLogApis::handleupdate(int id, int GreenhouseId, int HumidityReading, String DryerState, String HumidifierState) {\n    HumidityLogEntity* humiditylogEntity = new HumidityLogEntity(id, GreenhouseId, HumidityReading, DryerState, HumidifierState);\n    \n    if (humiditylogController->Update(*humiditylogEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString HumidityLogApis::handledelete(int id) {\n    \n    if (humiditylogController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString HumidityLogApis::handlegetAll() {\n    return humiditylogController->GetAllJson();\n}\nString HumidityLogApis::handlegetById(int id) {\n    return humiditylogController->GetById(id).toJson();\n}\nString HumidityLogApis::handleget(String query) {\n    return humiditylogController->GetJson(query);\n}\n\nString HumidityLogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"HumidityReading\"].toInt(), parameters[\"DryerState\"], parameters[\"HumidifierState\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"HumidityReading\"].toInt(), parameters[\"DryerState\"], parameters[\"HumidifierState\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //HUMIDITYLOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\LightConditionApis.h",
        "content": "#ifndef LIGHTCONDITIONAPIS_h\n#define LIGHTCONDITIONAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/LightConditionController.h\"\n#include \"Permissions.h\"\n\nclass LightConditionApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    LightConditionController* lightconditionController;\n    std::string class_path = \"/lightcondition\";\n\npublic:\n    LightConditionApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int MinLightIntensity, int MaxLightIntensity, int LowLightIntensityAlertThreshold, int HighLightIntensityAlertThreshold);\n    String handleupdate(int id, String Name, int MinLightIntensity, int MaxLightIntensity, int LowLightIntensityAlertThreshold, int HighLightIntensityAlertThreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nLightConditionApis::LightConditionApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    lightconditionController = new LightConditionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinLightIntensity\") || !req->getParams()->isQueryParameterSet(\"MaxLightIntensity\") || !req->getParams()->isQueryParameterSet(\"LowLightIntensityAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighLightIntensityAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int MinLightIntensity = getQueryParameterint(req, \"MinLightIntensity\");\n    int MaxLightIntensity = getQueryParameterint(req, \"MaxLightIntensity\");\n    int LowLightIntensityAlertThreshold = getQueryParameterint(req, \"LowLightIntensityAlertThreshold\");\n    int HighLightIntensityAlertThreshold = getQueryParameterint(req, \"HighLightIntensityAlertThreshold\");\n\n        response(res, handlecreate(Name, MinLightIntensity, MaxLightIntensity, LowLightIntensityAlertThreshold, HighLightIntensityAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinLightIntensity\") || !req->getParams()->isQueryParameterSet(\"MaxLightIntensity\") || !req->getParams()->isQueryParameterSet(\"LowLightIntensityAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighLightIntensityAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int MinLightIntensity = getQueryParameterint(req, \"MinLightIntensity\");\n    int MaxLightIntensity = getQueryParameterint(req, \"MaxLightIntensity\");\n    int LowLightIntensityAlertThreshold = getQueryParameterint(req, \"LowLightIntensityAlertThreshold\");\n    int HighLightIntensityAlertThreshold = getQueryParameterint(req, \"HighLightIntensityAlertThreshold\");\n        \n        response(res, handleupdate(id, Name, MinLightIntensity, MaxLightIntensity, LowLightIntensityAlertThreshold, HighLightIntensityAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTCONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString LightConditionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString LightConditionApis::handlecreate(String Name, int MinLightIntensity, int MaxLightIntensity, int LowLightIntensityAlertThreshold, int HighLightIntensityAlertThreshold) {\n    LightConditionEntity* lightconditionEntity = new LightConditionEntity(Name, MinLightIntensity, MaxLightIntensity, LowLightIntensityAlertThreshold, HighLightIntensityAlertThreshold);\n    int id = lightconditionController->Add(*lightconditionEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString LightConditionApis::handleupdate(int id, String Name, int MinLightIntensity, int MaxLightIntensity, int LowLightIntensityAlertThreshold, int HighLightIntensityAlertThreshold) {\n    LightConditionEntity* lightconditionEntity = new LightConditionEntity(id, Name, MinLightIntensity, MaxLightIntensity, LowLightIntensityAlertThreshold, HighLightIntensityAlertThreshold);\n    \n    if (lightconditionController->Update(*lightconditionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString LightConditionApis::handledelete(int id) {\n    \n    if (lightconditionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString LightConditionApis::handlegetAll() {\n    return lightconditionController->GetAllJson();\n}\nString LightConditionApis::handlegetById(int id) {\n    return lightconditionController->GetById(id).toJson();\n}\nString LightConditionApis::handleget(String query) {\n    return lightconditionController->GetJson(query);\n}\n\nString LightConditionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"MinLightIntensity\"].toInt(), parameters[\"MaxLightIntensity\"].toInt(), parameters[\"LowLightIntensityAlertThreshold\"].toInt(), parameters[\"HighLightIntensityAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"MinLightIntensity\"].toInt(), parameters[\"MaxLightIntensity\"].toInt(), parameters[\"LowLightIntensityAlertThreshold\"].toInt(), parameters[\"HighLightIntensityAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //LIGHTCONDITIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\LightLogApis.h",
        "content": "#ifndef LIGHTLOGAPIS_h\n#define LIGHTLOGAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/LightLogController.h\"\n#include \"Permissions.h\"\n\nclass LightLogApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    LightLogController* lightlogController;\n    std::string class_path = \"/lightlog\";\n\npublic:\n    LightLogApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int LightIntensityReading, String LightState);\n    String handleupdate(int id, int GreenhouseId, int LightIntensityReading, String LightState);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nLightLogApis::LightLogApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    lightlogController = new LightLogController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"LightIntensityReading\") || !req->getParams()->isQueryParameterSet(\"LightState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int LightIntensityReading = getQueryParameterint(req, \"LightIntensityReading\");\n    String LightState = getQueryParameterString(req, \"LightState\");\n\n        response(res, handlecreate(GreenhouseId, LightIntensityReading, LightState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"LightIntensityReading\") || !req->getParams()->isQueryParameterSet(\"LightState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int LightIntensityReading = getQueryParameterint(req, \"LightIntensityReading\");\n    String LightState = getQueryParameterString(req, \"LightState\");\n        \n        response(res, handleupdate(id, GreenhouseId, LightIntensityReading, LightState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LIGHTLOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString LightLogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString LightLogApis::handlecreate(int GreenhouseId, int LightIntensityReading, String LightState) {\n    LightLogEntity* lightlogEntity = new LightLogEntity(GreenhouseId, LightIntensityReading, LightState);\n    int id = lightlogController->Add(*lightlogEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString LightLogApis::handleupdate(int id, int GreenhouseId, int LightIntensityReading, String LightState) {\n    LightLogEntity* lightlogEntity = new LightLogEntity(id, GreenhouseId, LightIntensityReading, LightState);\n    \n    if (lightlogController->Update(*lightlogEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString LightLogApis::handledelete(int id) {\n    \n    if (lightlogController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString LightLogApis::handlegetAll() {\n    return lightlogController->GetAllJson();\n}\nString LightLogApis::handlegetById(int id) {\n    return lightlogController->GetById(id).toJson();\n}\nString LightLogApis::handleget(String query) {\n    return lightlogController->GetJson(query);\n}\n\nString LightLogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"LightIntensityReading\"].toInt(), parameters[\"LightState\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"LightIntensityReading\"].toInt(), parameters[\"LightState\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //LIGHTLOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\LogsApis.h",
        "content": "\n#ifndef LogsApis_h\n#define LogsApis_h\n\n\n#include \"../AppContext.h\"\n#include \"Permissions.h\"\nclass LogsApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    std::string class_path = \"/logs\";\n\npublic:\n    LogsApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlegetLogsByDateRange(String start_date, String end_date);\n};\n\nLogsApis::LogsApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    if (!add_apis) return;\n\n    \n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getLogsByDateRange\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::LOGS_GETLOGSBYDATERANGE) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"start_date\") || !req->getParams()->isQueryParameterSet(\"end_date\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String start_date = getQueryParameterString(req, \"start_date\");\n        String end_date = getQueryParameterString(req, \"end_date\");\n        \n        response(res, handlegetLogsByDateRange(start_date, end_date));\n    }));\n}\n\nString LogsApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\n\nString LogsApis::handlegetLogsByDateRange(String start_date, String end_date) {\n    return \"\";\n}\n\nString LogsApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlegetLogsByDateRange\") {\n        handlegetLogsByDateRange(parameters[\"start_date\"], parameters[\"end_date\"]);\n        return \"OK\";\n    }\n    return \"\";\n}\n\n#endif //LogsApis_h\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\Permissions.h",
        "content": "#ifndef PERMISSIONS_H\n#define PERMISSIONS_H\n\nclass Permissions\n{\npublic:\n    static const String TEMPERATURECONDITION_CREATE;\n    static const String TEMPERATURECONDITION_UPDATE;\n    static const String TEMPERATURECONDITION_DELETE;\n    static const String TEMPERATURECONDITION_GET;\n    static const String HUMIDITYCONDITION_CREATE;\n    static const String HUMIDITYCONDITION_UPDATE;\n    static const String HUMIDITYCONDITION_DELETE;\n    static const String HUMIDITYCONDITION_GET;\n    static const String LIGHTCONDITION_CREATE;\n    static const String LIGHTCONDITION_UPDATE;\n    static const String LIGHTCONDITION_DELETE;\n    static const String LIGHTCONDITION_GET;\n    static const String SOILMOISTURECONDITION_CREATE;\n    static const String SOILMOISTURECONDITION_UPDATE;\n    static const String SOILMOISTURECONDITION_DELETE;\n    static const String SOILMOISTURECONDITION_GET;\n    static const String CONDITION_CREATE;\n    static const String CONDITION_UPDATE;\n    static const String CONDITION_DELETE;\n    static const String CONDITION_GET;\n    static const String GREENHOUSE_CREATE;\n    static const String GREENHOUSE_UPDATE;\n    static const String GREENHOUSE_DELETE;\n    static const String GREENHOUSE_GET;\n    static const String PLANTTYPE_CREATE;\n    static const String PLANTTYPE_UPDATE;\n    static const String PLANTTYPE_DELETE;\n    static const String PLANTTYPE_GET;\n    static const String PLANT_CREATE;\n    static const String PLANT_UPDATE;\n    static const String PLANT_DELETE;\n    static const String PLANT_GET;\n    static const String GREENHOUSESENSOR_CREATE;\n    static const String GREENHOUSESENSOR_UPDATE;\n    static const String GREENHOUSESENSOR_DELETE;\n    static const String GREENHOUSESENSOR_GET;\n    static const String GREENHOUSECONTROL_CREATE;\n    static const String GREENHOUSECONTROL_UPDATE;\n    static const String GREENHOUSECONTROL_DELETE;\n    static const String GREENHOUSECONTROL_GET;\n    static const String TEMPERATURELOG_CREATE;\n    static const String TEMPERATURELOG_UPDATE;\n    static const String TEMPERATURELOG_DELETE;\n    static const String TEMPERATURELOG_GET;\n    static const String HUMIDITYLOG_CREATE;\n    static const String HUMIDITYLOG_UPDATE;\n    static const String HUMIDITYLOG_DELETE;\n    static const String HUMIDITYLOG_GET;\n    static const String LIGHTLOG_CREATE;\n    static const String LIGHTLOG_UPDATE;\n    static const String LIGHTLOG_DELETE;\n    static const String LIGHTLOG_GET;\n    static const String SOILMOISTURELOG_CREATE;\n    static const String SOILMOISTURELOG_UPDATE;\n    static const String SOILMOISTURELOG_DELETE;\n    static const String SOILMOISTURELOG_GET;\n    static const String GREENHOUSES_SWITCHMODULE;\n    static const String GREENHOUSES_SETCONDITION;\n    static const String PLANTS_SETPLANTCONDITION;\n    static const String PLANTS_GETPLANTLOG;\n    static const String LOGS_GETLOGSBYDATERANGE;\n    static const String CONDITIONS_GETCURRENTCONDITIONS;\n\n\n    static void addPermissions(Context* context);\n};\n\nvoid Permissions::addPermissions(Context* context)\n{\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURECONDITION_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURECONDITION_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURECONDITION_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURECONDITION_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYCONDITION_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYCONDITION_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYCONDITION_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYCONDITION_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTCONDITION_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTCONDITION_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTCONDITION_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTCONDITION_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURECONDITION_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURECONDITION_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURECONDITION_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURECONDITION_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CONDITION_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CONDITION_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CONDITION_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CONDITION_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSE_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSE_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSE_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSE_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTTYPE_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTTYPE_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTTYPE_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTTYPE_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANT_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANT_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANT_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANT_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSESENSOR_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSESENSOR_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSESENSOR_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSESENSOR_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSECONTROL_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSECONTROL_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSECONTROL_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSECONTROL_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURELOG_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURELOG_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURELOG_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(TEMPERATURELOG_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYLOG_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYLOG_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYLOG_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(HUMIDITYLOG_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTLOG_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTLOG_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTLOG_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LIGHTLOG_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURELOG_CREATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURELOG_UPDATE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURELOG_DELETE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURELOG_GET, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSES_SWITCHMODULE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(GREENHOUSES_SETCONDITION, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTS_SETPLANTCONDITION, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PLANTS_GETPLANTLOG, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LOGS_GETLOGSBYDATERANGE, \"Growify Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CONDITIONS_GETCURRENTCONDITIONS, \"Growify Permissions\");\n\n}\n\nconst String Permissions::TEMPERATURECONDITION_CREATE = \"temperaturecondition_create\";\nconst String Permissions::TEMPERATURECONDITION_UPDATE = \"temperaturecondition_update\";\nconst String Permissions::TEMPERATURECONDITION_DELETE = \"temperaturecondition_delete\";\nconst String Permissions::TEMPERATURECONDITION_GET = \"temperaturecondition_get\";\nconst String Permissions::HUMIDITYCONDITION_CREATE = \"humiditycondition_create\";\nconst String Permissions::HUMIDITYCONDITION_UPDATE = \"humiditycondition_update\";\nconst String Permissions::HUMIDITYCONDITION_DELETE = \"humiditycondition_delete\";\nconst String Permissions::HUMIDITYCONDITION_GET = \"humiditycondition_get\";\nconst String Permissions::LIGHTCONDITION_CREATE = \"lightcondition_create\";\nconst String Permissions::LIGHTCONDITION_UPDATE = \"lightcondition_update\";\nconst String Permissions::LIGHTCONDITION_DELETE = \"lightcondition_delete\";\nconst String Permissions::LIGHTCONDITION_GET = \"lightcondition_get\";\nconst String Permissions::SOILMOISTURECONDITION_CREATE = \"soilmoisturecondition_create\";\nconst String Permissions::SOILMOISTURECONDITION_UPDATE = \"soilmoisturecondition_update\";\nconst String Permissions::SOILMOISTURECONDITION_DELETE = \"soilmoisturecondition_delete\";\nconst String Permissions::SOILMOISTURECONDITION_GET = \"soilmoisturecondition_get\";\nconst String Permissions::CONDITION_CREATE = \"condition_create\";\nconst String Permissions::CONDITION_UPDATE = \"condition_update\";\nconst String Permissions::CONDITION_DELETE = \"condition_delete\";\nconst String Permissions::CONDITION_GET = \"condition_get\";\nconst String Permissions::GREENHOUSE_CREATE = \"greenhouse_create\";\nconst String Permissions::GREENHOUSE_UPDATE = \"greenhouse_update\";\nconst String Permissions::GREENHOUSE_DELETE = \"greenhouse_delete\";\nconst String Permissions::GREENHOUSE_GET = \"greenhouse_get\";\nconst String Permissions::PLANTTYPE_CREATE = \"planttype_create\";\nconst String Permissions::PLANTTYPE_UPDATE = \"planttype_update\";\nconst String Permissions::PLANTTYPE_DELETE = \"planttype_delete\";\nconst String Permissions::PLANTTYPE_GET = \"planttype_get\";\nconst String Permissions::PLANT_CREATE = \"plant_create\";\nconst String Permissions::PLANT_UPDATE = \"plant_update\";\nconst String Permissions::PLANT_DELETE = \"plant_delete\";\nconst String Permissions::PLANT_GET = \"plant_get\";\nconst String Permissions::GREENHOUSESENSOR_CREATE = \"greenhousesensor_create\";\nconst String Permissions::GREENHOUSESENSOR_UPDATE = \"greenhousesensor_update\";\nconst String Permissions::GREENHOUSESENSOR_DELETE = \"greenhousesensor_delete\";\nconst String Permissions::GREENHOUSESENSOR_GET = \"greenhousesensor_get\";\nconst String Permissions::GREENHOUSECONTROL_CREATE = \"greenhousecontrol_create\";\nconst String Permissions::GREENHOUSECONTROL_UPDATE = \"greenhousecontrol_update\";\nconst String Permissions::GREENHOUSECONTROL_DELETE = \"greenhousecontrol_delete\";\nconst String Permissions::GREENHOUSECONTROL_GET = \"greenhousecontrol_get\";\nconst String Permissions::TEMPERATURELOG_CREATE = \"temperaturelog_create\";\nconst String Permissions::TEMPERATURELOG_UPDATE = \"temperaturelog_update\";\nconst String Permissions::TEMPERATURELOG_DELETE = \"temperaturelog_delete\";\nconst String Permissions::TEMPERATURELOG_GET = \"temperaturelog_get\";\nconst String Permissions::HUMIDITYLOG_CREATE = \"humiditylog_create\";\nconst String Permissions::HUMIDITYLOG_UPDATE = \"humiditylog_update\";\nconst String Permissions::HUMIDITYLOG_DELETE = \"humiditylog_delete\";\nconst String Permissions::HUMIDITYLOG_GET = \"humiditylog_get\";\nconst String Permissions::LIGHTLOG_CREATE = \"lightlog_create\";\nconst String Permissions::LIGHTLOG_UPDATE = \"lightlog_update\";\nconst String Permissions::LIGHTLOG_DELETE = \"lightlog_delete\";\nconst String Permissions::LIGHTLOG_GET = \"lightlog_get\";\nconst String Permissions::SOILMOISTURELOG_CREATE = \"soilmoisturelog_create\";\nconst String Permissions::SOILMOISTURELOG_UPDATE = \"soilmoisturelog_update\";\nconst String Permissions::SOILMOISTURELOG_DELETE = \"soilmoisturelog_delete\";\nconst String Permissions::SOILMOISTURELOG_GET = \"soilmoisturelog_get\";\nconst String Permissions::GREENHOUSES_SWITCHMODULE = \"greenhouses_switchmodule\";\nconst String Permissions::GREENHOUSES_SETCONDITION = \"greenhouses_setcondition\";\nconst String Permissions::PLANTS_SETPLANTCONDITION = \"plants_setplantcondition\";\nconst String Permissions::PLANTS_GETPLANTLOG = \"plants_getplantlog\";\nconst String Permissions::LOGS_GETLOGSBYDATERANGE = \"logs_getlogsbydaterange\";\nconst String Permissions::CONDITIONS_GETCURRENTCONDITIONS = \"conditions_getcurrentconditions\";\n\n\n#endif // PERMISSIONS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\PlantApis.h",
        "content": "#ifndef PLANTAPIS_h\n#define PLANTAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/PlantController.h\"\n#include \"Permissions.h\"\n\nclass PlantApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    PlantController* plantController;\n    std::string class_path = \"/plant\";\n\npublic:\n    PlantApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int PlantTypeId, int GreenhouseId);\n    String handleupdate(int id, String Name, int PlantTypeId, int GreenhouseId);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nPlantApis::PlantApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    plantController = new PlantController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"PlantTypeId\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int PlantTypeId = getQueryParameterint(req, \"PlantTypeId\");\n    int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n\n        response(res, handlecreate(Name, PlantTypeId, GreenhouseId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"PlantTypeId\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int PlantTypeId = getQueryParameterint(req, \"PlantTypeId\");\n    int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n        \n        response(res, handleupdate(id, Name, PlantTypeId, GreenhouseId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString PlantApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString PlantApis::handlecreate(String Name, int PlantTypeId, int GreenhouseId) {\n    PlantEntity* plantEntity = new PlantEntity(Name, PlantTypeId, GreenhouseId);\n    int id = plantController->Add(*plantEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString PlantApis::handleupdate(int id, String Name, int PlantTypeId, int GreenhouseId) {\n    PlantEntity* plantEntity = new PlantEntity(id, Name, PlantTypeId, GreenhouseId);\n    \n    if (plantController->Update(*plantEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString PlantApis::handledelete(int id) {\n    \n    if (plantController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString PlantApis::handlegetAll() {\n    return plantController->GetAllJson();\n}\nString PlantApis::handlegetById(int id) {\n    return plantController->GetById(id).toJson();\n}\nString PlantApis::handleget(String query) {\n    return plantController->GetJson(query);\n}\n\nString PlantApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"PlantTypeId\"].toInt(), parameters[\"GreenhouseId\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"PlantTypeId\"].toInt(), parameters[\"GreenhouseId\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //PLANTApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\PlantsApis.h",
        "content": "\n#ifndef PlantsApis_h\n#define PlantsApis_h\n\n\n#include \"../AppContext.h\"\n#include \"Permissions.h\"\nclass PlantsApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    std::string class_path = \"/plants\";\n\npublic:\n    PlantsApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlesetPlantCondition(String plant_id, String condition_id);\n    String handlegetPlantLog(String plant_id);\n};\n\nPlantsApis::PlantsApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    if (!add_apis) return;\n\n    \n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/setPlantCondition\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTS_SETPLANTCONDITION) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"plant_id\") || !req->getParams()->isQueryParameterSet(\"condition_id\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String plant_id = getQueryParameterString(req, \"plant_id\");\n        String condition_id = getQueryParameterString(req, \"condition_id\");\n        \n        response(res, handlesetPlantCondition(plant_id, condition_id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getPlantLog\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTS_GETPLANTLOG) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if(!req->getParams()->isQueryParameterSet(\"plant_id\")){\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n        \n        String plant_id = getQueryParameterString(req, \"plant_id\");\n        \n        response(res, handlegetPlantLog(plant_id));\n    }));\n}\n\nString PlantsApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\n\nString PlantsApis::handlesetPlantCondition(String plant_id, String condition_id) {\n    return \"\";\n}\nString PlantsApis::handlegetPlantLog(String plant_id) {\n    return \"\";\n}\n\nString PlantsApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlesetPlantCondition\") {\n        handlesetPlantCondition(parameters[\"plant_id\"], parameters[\"condition_id\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handlegetPlantLog\") {\n        handlegetPlantLog(parameters[\"plant_id\"]);\n        return \"OK\";\n    }\n    return \"\";\n}\n\n#endif //PlantsApis_h\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\PlantTypeApis.h",
        "content": "#ifndef PLANTTYPEAPIS_h\n#define PLANTTYPEAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/PlantTypeController.h\"\n#include \"Permissions.h\"\n\nclass PlantTypeApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    PlantTypeController* planttypeController;\n    std::string class_path = \"/planttype\";\n\npublic:\n    PlantTypeApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int GreenhouseId);\n    String handleupdate(int id, String Name, int GreenhouseId);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nPlantTypeApis::PlantTypeApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    planttypeController = new PlantTypeController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n\n        response(res, handlecreate(Name, GreenhouseId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n        \n        response(res, handleupdate(id, Name, GreenhouseId));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::PLANTTYPE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString PlantTypeApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString PlantTypeApis::handlecreate(String Name, int GreenhouseId) {\n    PlantTypeEntity* planttypeEntity = new PlantTypeEntity(Name, GreenhouseId);\n    int id = planttypeController->Add(*planttypeEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString PlantTypeApis::handleupdate(int id, String Name, int GreenhouseId) {\n    PlantTypeEntity* planttypeEntity = new PlantTypeEntity(id, Name, GreenhouseId);\n    \n    if (planttypeController->Update(*planttypeEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString PlantTypeApis::handledelete(int id) {\n    \n    if (planttypeController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString PlantTypeApis::handlegetAll() {\n    return planttypeController->GetAllJson();\n}\nString PlantTypeApis::handlegetById(int id) {\n    return planttypeController->GetById(id).toJson();\n}\nString PlantTypeApis::handleget(String query) {\n    return planttypeController->GetJson(query);\n}\n\nString PlantTypeApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"GreenhouseId\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"GreenhouseId\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //PLANTTYPEApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\SoilMoistureConditionApis.h",
        "content": "#ifndef SOILMOISTURECONDITIONAPIS_h\n#define SOILMOISTURECONDITIONAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/SoilMoistureConditionController.h\"\n#include \"Permissions.h\"\n\nclass SoilMoistureConditionApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    SoilMoistureConditionController* soilmoistureconditionController;\n    std::string class_path = \"/soilmoisturecondition\";\n\npublic:\n    SoilMoistureConditionApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int MinSoilMoisture, int MaxSoilMoisture, int LowSoilMoistureAlertThreshold, int HighSoilMoistureAlertThreshold);\n    String handleupdate(int id, String Name, int MinSoilMoisture, int MaxSoilMoisture, int LowSoilMoistureAlertThreshold, int HighSoilMoistureAlertThreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nSoilMoistureConditionApis::SoilMoistureConditionApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    soilmoistureconditionController = new SoilMoistureConditionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinSoilMoisture\") || !req->getParams()->isQueryParameterSet(\"MaxSoilMoisture\") || !req->getParams()->isQueryParameterSet(\"LowSoilMoistureAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighSoilMoistureAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int MinSoilMoisture = getQueryParameterint(req, \"MinSoilMoisture\");\n    int MaxSoilMoisture = getQueryParameterint(req, \"MaxSoilMoisture\");\n    int LowSoilMoistureAlertThreshold = getQueryParameterint(req, \"LowSoilMoistureAlertThreshold\");\n    int HighSoilMoistureAlertThreshold = getQueryParameterint(req, \"HighSoilMoistureAlertThreshold\");\n\n        response(res, handlecreate(Name, MinSoilMoisture, MaxSoilMoisture, LowSoilMoistureAlertThreshold, HighSoilMoistureAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinSoilMoisture\") || !req->getParams()->isQueryParameterSet(\"MaxSoilMoisture\") || !req->getParams()->isQueryParameterSet(\"LowSoilMoistureAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighSoilMoistureAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int MinSoilMoisture = getQueryParameterint(req, \"MinSoilMoisture\");\n    int MaxSoilMoisture = getQueryParameterint(req, \"MaxSoilMoisture\");\n    int LowSoilMoistureAlertThreshold = getQueryParameterint(req, \"LowSoilMoistureAlertThreshold\");\n    int HighSoilMoistureAlertThreshold = getQueryParameterint(req, \"HighSoilMoistureAlertThreshold\");\n        \n        response(res, handleupdate(id, Name, MinSoilMoisture, MaxSoilMoisture, LowSoilMoistureAlertThreshold, HighSoilMoistureAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString SoilMoistureConditionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString SoilMoistureConditionApis::handlecreate(String Name, int MinSoilMoisture, int MaxSoilMoisture, int LowSoilMoistureAlertThreshold, int HighSoilMoistureAlertThreshold) {\n    SoilMoistureConditionEntity* soilmoistureconditionEntity = new SoilMoistureConditionEntity(Name, MinSoilMoisture, MaxSoilMoisture, LowSoilMoistureAlertThreshold, HighSoilMoistureAlertThreshold);\n    int id = soilmoistureconditionController->Add(*soilmoistureconditionEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString SoilMoistureConditionApis::handleupdate(int id, String Name, int MinSoilMoisture, int MaxSoilMoisture, int LowSoilMoistureAlertThreshold, int HighSoilMoistureAlertThreshold) {\n    SoilMoistureConditionEntity* soilmoistureconditionEntity = new SoilMoistureConditionEntity(id, Name, MinSoilMoisture, MaxSoilMoisture, LowSoilMoistureAlertThreshold, HighSoilMoistureAlertThreshold);\n    \n    if (soilmoistureconditionController->Update(*soilmoistureconditionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString SoilMoistureConditionApis::handledelete(int id) {\n    \n    if (soilmoistureconditionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString SoilMoistureConditionApis::handlegetAll() {\n    return soilmoistureconditionController->GetAllJson();\n}\nString SoilMoistureConditionApis::handlegetById(int id) {\n    return soilmoistureconditionController->GetById(id).toJson();\n}\nString SoilMoistureConditionApis::handleget(String query) {\n    return soilmoistureconditionController->GetJson(query);\n}\n\nString SoilMoistureConditionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"MinSoilMoisture\"].toInt(), parameters[\"MaxSoilMoisture\"].toInt(), parameters[\"LowSoilMoistureAlertThreshold\"].toInt(), parameters[\"HighSoilMoistureAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"MinSoilMoisture\"].toInt(), parameters[\"MaxSoilMoisture\"].toInt(), parameters[\"LowSoilMoistureAlertThreshold\"].toInt(), parameters[\"HighSoilMoistureAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //SOILMOISTURECONDITIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\SoilMoistureLogApis.h",
        "content": "#ifndef SOILMOISTURELOGAPIS_h\n#define SOILMOISTURELOGAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/SoilMoistureLogController.h\"\n#include \"Permissions.h\"\n\nclass SoilMoistureLogApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    SoilMoistureLogController* soilmoisturelogController;\n    std::string class_path = \"/soilmoisturelog\";\n\npublic:\n    SoilMoistureLogApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int SoilMoistureReading, String WaterPumpState);\n    String handleupdate(int id, int GreenhouseId, int SoilMoistureReading, String WaterPumpState);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nSoilMoistureLogApis::SoilMoistureLogApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    soilmoisturelogController = new SoilMoistureLogController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"SoilMoistureReading\") || !req->getParams()->isQueryParameterSet(\"WaterPumpState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int SoilMoistureReading = getQueryParameterint(req, \"SoilMoistureReading\");\n    String WaterPumpState = getQueryParameterString(req, \"WaterPumpState\");\n\n        response(res, handlecreate(GreenhouseId, SoilMoistureReading, WaterPumpState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"SoilMoistureReading\") || !req->getParams()->isQueryParameterSet(\"WaterPumpState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int SoilMoistureReading = getQueryParameterint(req, \"SoilMoistureReading\");\n    String WaterPumpState = getQueryParameterString(req, \"WaterPumpState\");\n        \n        response(res, handleupdate(id, GreenhouseId, SoilMoistureReading, WaterPumpState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::SOILMOISTURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString SoilMoistureLogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString SoilMoistureLogApis::handlecreate(int GreenhouseId, int SoilMoistureReading, String WaterPumpState) {\n    SoilMoistureLogEntity* soilmoisturelogEntity = new SoilMoistureLogEntity(GreenhouseId, SoilMoistureReading, WaterPumpState);\n    int id = soilmoisturelogController->Add(*soilmoisturelogEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString SoilMoistureLogApis::handleupdate(int id, int GreenhouseId, int SoilMoistureReading, String WaterPumpState) {\n    SoilMoistureLogEntity* soilmoisturelogEntity = new SoilMoistureLogEntity(id, GreenhouseId, SoilMoistureReading, WaterPumpState);\n    \n    if (soilmoisturelogController->Update(*soilmoisturelogEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString SoilMoistureLogApis::handledelete(int id) {\n    \n    if (soilmoisturelogController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString SoilMoistureLogApis::handlegetAll() {\n    return soilmoisturelogController->GetAllJson();\n}\nString SoilMoistureLogApis::handlegetById(int id) {\n    return soilmoisturelogController->GetById(id).toJson();\n}\nString SoilMoistureLogApis::handleget(String query) {\n    return soilmoisturelogController->GetJson(query);\n}\n\nString SoilMoistureLogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"SoilMoistureReading\"].toInt(), parameters[\"WaterPumpState\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"SoilMoistureReading\"].toInt(), parameters[\"WaterPumpState\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //SOILMOISTURELOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\TemperatureConditionApis.h",
        "content": "#ifndef TEMPERATURECONDITIONAPIS_h\n#define TEMPERATURECONDITIONAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/TemperatureConditionController.h\"\n#include \"Permissions.h\"\n\nclass TemperatureConditionApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    TemperatureConditionController* temperatureconditionController;\n    std::string class_path = \"/temperaturecondition\";\n\npublic:\n    TemperatureConditionApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, int MinTemperature, int MaxTemperature, int LowTempAlertThreshold, int HighTempAlertThreshold);\n    String handleupdate(int id, String Name, int MinTemperature, int MaxTemperature, int LowTempAlertThreshold, int HighTempAlertThreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nTemperatureConditionApis::TemperatureConditionApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    temperatureconditionController = new TemperatureConditionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinTemperature\") || !req->getParams()->isQueryParameterSet(\"MaxTemperature\") || !req->getParams()->isQueryParameterSet(\"LowTempAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighTempAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    int MinTemperature = getQueryParameterint(req, \"MinTemperature\");\n    int MaxTemperature = getQueryParameterint(req, \"MaxTemperature\");\n    int LowTempAlertThreshold = getQueryParameterint(req, \"LowTempAlertThreshold\");\n    int HighTempAlertThreshold = getQueryParameterint(req, \"HighTempAlertThreshold\");\n\n        response(res, handlecreate(Name, MinTemperature, MaxTemperature, LowTempAlertThreshold, HighTempAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"MinTemperature\") || !req->getParams()->isQueryParameterSet(\"MaxTemperature\") || !req->getParams()->isQueryParameterSet(\"LowTempAlertThreshold\") || !req->getParams()->isQueryParameterSet(\"HighTempAlertThreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    int MinTemperature = getQueryParameterint(req, \"MinTemperature\");\n    int MaxTemperature = getQueryParameterint(req, \"MaxTemperature\");\n    int LowTempAlertThreshold = getQueryParameterint(req, \"LowTempAlertThreshold\");\n    int HighTempAlertThreshold = getQueryParameterint(req, \"HighTempAlertThreshold\");\n        \n        response(res, handleupdate(id, Name, MinTemperature, MaxTemperature, LowTempAlertThreshold, HighTempAlertThreshold));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURECONDITION_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString TemperatureConditionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString TemperatureConditionApis::handlecreate(String Name, int MinTemperature, int MaxTemperature, int LowTempAlertThreshold, int HighTempAlertThreshold) {\n    TemperatureConditionEntity* temperatureconditionEntity = new TemperatureConditionEntity(Name, MinTemperature, MaxTemperature, LowTempAlertThreshold, HighTempAlertThreshold);\n    int id = temperatureconditionController->Add(*temperatureconditionEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString TemperatureConditionApis::handleupdate(int id, String Name, int MinTemperature, int MaxTemperature, int LowTempAlertThreshold, int HighTempAlertThreshold) {\n    TemperatureConditionEntity* temperatureconditionEntity = new TemperatureConditionEntity(id, Name, MinTemperature, MaxTemperature, LowTempAlertThreshold, HighTempAlertThreshold);\n    \n    if (temperatureconditionController->Update(*temperatureconditionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString TemperatureConditionApis::handledelete(int id) {\n    \n    if (temperatureconditionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString TemperatureConditionApis::handlegetAll() {\n    return temperatureconditionController->GetAllJson();\n}\nString TemperatureConditionApis::handlegetById(int id) {\n    return temperatureconditionController->GetById(id).toJson();\n}\nString TemperatureConditionApis::handleget(String query) {\n    return temperatureconditionController->GetJson(query);\n}\n\nString TemperatureConditionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"MinTemperature\"].toInt(), parameters[\"MaxTemperature\"].toInt(), parameters[\"LowTempAlertThreshold\"].toInt(), parameters[\"HighTempAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"MinTemperature\"].toInt(), parameters[\"MaxTemperature\"].toInt(), parameters[\"LowTempAlertThreshold\"].toInt(), parameters[\"HighTempAlertThreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //TEMPERATURECONDITIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Apis\\TemperatureLogApis.h",
        "content": "#ifndef TEMPERATURELOGAPIS_h\n#define TEMPERATURELOGAPIS_h\n\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/TemperatureLogController.h\"\n#include \"Permissions.h\"\n\nclass TemperatureLogApis : public ApiInterface\n{\nprivate:\n    AppContext* context;\n    TemperatureLogController* temperaturelogController;\n    std::string class_path = \"/temperaturelog\";\n\npublic:\n    TemperatureLogApis(AppContext* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int GreenhouseId, int TemperatureReading, String CoolerState, String HeaterState);\n    String handleupdate(int id, int GreenhouseId, int TemperatureReading, String CoolerState, String HeaterState);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nTemperatureLogApis::TemperatureLogApis(AppContext* cntxt, bool add_apis): context(cntxt) {\n    temperaturelogController = new TemperatureLogController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"TemperatureReading\") || !req->getParams()->isQueryParameterSet(\"CoolerState\") || !req->getParams()->isQueryParameterSet(\"HeaterState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int TemperatureReading = getQueryParameterint(req, \"TemperatureReading\");\n    String CoolerState = getQueryParameterString(req, \"CoolerState\");\n    String HeaterState = getQueryParameterString(req, \"HeaterState\");\n\n        response(res, handlecreate(GreenhouseId, TemperatureReading, CoolerState, HeaterState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"GreenhouseId\") || !req->getParams()->isQueryParameterSet(\"TemperatureReading\") || !req->getParams()->isQueryParameterSet(\"CoolerState\") || !req->getParams()->isQueryParameterSet(\"HeaterState\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int GreenhouseId = getQueryParameterint(req, \"GreenhouseId\");\n    int TemperatureReading = getQueryParameterint(req, \"TemperatureReading\");\n    String CoolerState = getQueryParameterString(req, \"CoolerState\");\n    String HeaterState = getQueryParameterString(req, \"HeaterState\");\n        \n        response(res, handleupdate(id, GreenhouseId, TemperatureReading, CoolerState, HeaterState));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->systemContext->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->systemContext->getSecurity()->checkAuthentication(req, res, Permissions::TEMPERATURELOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString TemperatureLogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString TemperatureLogApis::handlecreate(int GreenhouseId, int TemperatureReading, String CoolerState, String HeaterState) {\n    TemperatureLogEntity* temperaturelogEntity = new TemperatureLogEntity(GreenhouseId, TemperatureReading, CoolerState, HeaterState);\n    int id = temperaturelogController->Add(*temperaturelogEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString TemperatureLogApis::handleupdate(int id, int GreenhouseId, int TemperatureReading, String CoolerState, String HeaterState) {\n    TemperatureLogEntity* temperaturelogEntity = new TemperatureLogEntity(id, GreenhouseId, TemperatureReading, CoolerState, HeaterState);\n    \n    if (temperaturelogController->Update(*temperaturelogEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString TemperatureLogApis::handledelete(int id) {\n    \n    if (temperaturelogController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString TemperatureLogApis::handlegetAll() {\n    return temperaturelogController->GetAllJson();\n}\nString TemperatureLogApis::handlegetById(int id) {\n    return temperaturelogController->GetById(id).toJson();\n}\nString TemperatureLogApis::handleget(String query) {\n    return temperaturelogController->GetJson(query);\n}\n\nString TemperatureLogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"GreenhouseId\"].toInt(), parameters[\"TemperatureReading\"].toInt(), parameters[\"CoolerState\"], parameters[\"HeaterState\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"GreenhouseId\"].toInt(), parameters[\"TemperatureReading\"].toInt(), parameters[\"CoolerState\"], parameters[\"HeaterState\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //TEMPERATURELOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Config\\DefaultGrowifyConfigs.h",
        "content": "\n#ifndef DEFAULTGROWIFY_H\n#define DEFAULTGROWIFY_H\n\n#include <Arduino.h>\n#include <ArduinoJson.h>\n\nclass DefaultGrowifyConfigs {\n\npublic:\n    static const String jsonString;\n    static String get(String key);\n};\n\nString DefaultGrowifyConfigs::get(String key) {\n    StaticJsonDocument<512> doc;\n    DeserializationError error = deserializeJson(doc, jsonString);\n\n    if (error) {\n        Serial.println(F(\"Failed to parse jsonString\"));\n        return \"\";\n    }\n\n    if (doc.containsKey(key)) {\n        return String(doc[key].as<const char *>());\n    } else {\n        Serial.print(F(\"Key not found in Growify Config: \"));\n        Serial.println(key);\n        return \"\";\n    }\n}\n\nconst String DefaultGrowifyConfigs::jsonString = R\"(\n{\n    \"system_enable\" : \"true\",\n    \"polling_interval\" : \"5\",\n    \"data_aggregation_interval\" : \"60\",\n    \"alert_threshold_temperature\" : \"30\",\n    \"alert_threshold_humidity\" : \"70\",\n    \"alert_threshold_light\" : \"800\",\n    \"alert_threshold_soil_moisture\" : \"40\",\n    \"SMS_alerts_enable\" : \"false\",\n    \"SMS_message_temperature\" : \"Warning! Temperature is outside of the defined threshold.\",\n    \"SMS_message_humidity\" : \"Warning! Humidity is outside of the defined threshold.\",\n    \"SMS_message_light\" : \"Warning! Light intensity is outside of the defined threshold.\",\n    \"SMS_message_soil_moisture\" : \"Warning! Soil moisture is outside of the defined threshold.\",\n    \"SMS_alerts_number\" : \"\",\n    \"database_size_limit\" : \"1000\",\n    \"automatic_updates_enable\" : \"true\",\n    \"automatic_updates_interval\" : \"168\",\n    \"automatic_condition_adjustments_enable\" : \"true\"\n}\n)\";\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Config\\GrowifyConfig.h",
        "content": "\n#ifndef GROWIFYCONFIGS_H\n#define GROWIFYCONFIGS_H\n\n#include <string>\n#include \"DefaultGrowifyConfigs.h\"\n#include \"../AppContext.h\"\n#include \"../Database/Controllers/GrowifyConfigController.h\"\n#include \"GrowifyConfigKeys.h\"\n\nclass GrowifyConfig : public IConfig {\n\nprivate:\n    GrowifyConfigController* growifyConfigController;\n\npublic:\n    AppContext* appContext;\n    GrowifyConfig(AppContext* cntxt):appContext (cntxt) {\n    }\n    \n    void initialize() {\n        growifyConfigController = new GrowifyConfigController(appContext, storageType);\n    }\n\n    String get(const String& key) {\n        std::vector<KeyValueEntity> growifyConfigEntities  = growifyConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key);\n        \n        if (growifyConfigEntities.size() > 0)\n        {\n            KeyValueEntity configEntity = growifyConfigEntities.at(0);\n            configEntity.fromString(configEntity.toString());\n            if (configEntity.id == -1) {\n                return \"\";\n            } else {\n                return configEntity.getValue();\n            }\n        }\n        else\n        {\n            KeyValueEntity* keyValueEntity = new KeyValueEntity(key,DefaultGrowifyConfigs::get(key));\n            growifyConfigController->Add(*keyValueEntity);\n            return DefaultGrowifyConfigs::get(key);\n        }\n    }\n\n    void set(const String& key, const String& value) {\n        KeyValueEntity configEntity = growifyConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key).at(0);\n        if (configEntity.id == -1) { // Key does not exist\n            configEntity.setKey(key);\n            configEntity.setValue(value);\n            growifyConfigController->Add(configEntity);\n        } else { // Key exists\n            configEntity.setValue(value);\n            growifyConfigController->Update(configEntity);\n        }\n    }\n\n};\n\n#endif // GROWIFY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Config\\GrowifyConfigKeys.h",
        "content": "\n#ifndef GROWIFYCONFIGKEYS_H\n#define GROWIFYCONFIGKEYS_H\n\nclass GrowifyConfigKey\n{\nprivate:\n\npublic:\n    static const String SYSTEM_ENABLE;\n    static const String POLLING_INTERVAL;\n    static const String DATA_AGGREGATION_INTERVAL;\n    static const String ALERT_THRESHOLD_TEMPERATURE;\n    static const String ALERT_THRESHOLD_HUMIDITY;\n    static const String ALERT_THRESHOLD_LIGHT;\n    static const String ALERT_THRESHOLD_SOIL_MOISTURE;\n    static const String SMS_ALERTS_ENABLE;\n    static const String SMS_MESSAGE_TEMPERATURE;\n    static const String SMS_MESSAGE_HUMIDITY;\n    static const String SMS_MESSAGE_LIGHT;\n    static const String SMS_MESSAGE_SOIL_MOISTURE;\n    static const String SMS_ALERTS_NUMBER;\n    static const String DATABASE_SIZE_LIMIT;\n    static const String AUTOMATIC_UPDATES_ENABLE;\n    static const String AUTOMATIC_UPDATES_INTERVAL;\n    static const String AUTOMATIC_CONDITION_ADJUSTMENTS_ENABLE;\n};\n\nconst String GrowifyConfigKey::SYSTEM_ENABLE = \"system_enable\";\nconst String GrowifyConfigKey::POLLING_INTERVAL = \"polling_interval\";\nconst String GrowifyConfigKey::DATA_AGGREGATION_INTERVAL = \"data_aggregation_interval\";\nconst String GrowifyConfigKey::ALERT_THRESHOLD_TEMPERATURE = \"alert_threshold_temperature\";\nconst String GrowifyConfigKey::ALERT_THRESHOLD_HUMIDITY = \"alert_threshold_humidity\";\nconst String GrowifyConfigKey::ALERT_THRESHOLD_LIGHT = \"alert_threshold_light\";\nconst String GrowifyConfigKey::ALERT_THRESHOLD_SOIL_MOISTURE = \"alert_threshold_soil_moisture\";\nconst String GrowifyConfigKey::SMS_ALERTS_ENABLE = \"SMS_alerts_enable\";\nconst String GrowifyConfigKey::SMS_MESSAGE_TEMPERATURE = \"SMS_message_temperature\";\nconst String GrowifyConfigKey::SMS_MESSAGE_HUMIDITY = \"SMS_message_humidity\";\nconst String GrowifyConfigKey::SMS_MESSAGE_LIGHT = \"SMS_message_light\";\nconst String GrowifyConfigKey::SMS_MESSAGE_SOIL_MOISTURE = \"SMS_message_soil_moisture\";\nconst String GrowifyConfigKey::SMS_ALERTS_NUMBER = \"SMS_alerts_number\";\nconst String GrowifyConfigKey::DATABASE_SIZE_LIMIT = \"database_size_limit\";\nconst String GrowifyConfigKey::AUTOMATIC_UPDATES_ENABLE = \"automatic_updates_enable\";\nconst String GrowifyConfigKey::AUTOMATIC_UPDATES_INTERVAL = \"automatic_updates_interval\";\nconst String GrowifyConfigKey::AUTOMATIC_CONDITION_ADJUSTMENTS_ENABLE = \"automatic_condition_adjustments_enable\";\n\n#endif // GROWIFYCONFIGKEYS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\ConditionController.h",
        "content": "#ifndef CONDITIONCONTROLLER_H\n#define CONDITIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/ConditionEntity.h\"\n#include \"../../AppContext.h\"\n\nclass ConditionController : public MainController<ConditionEntity> {\npublic:\n    AppContext* appContext;\n    ConditionController(AppContext* appContext, StorageType _storageType) : MainController<ConditionEntity>(appContext->systemContext ,\"condition\", _storageType), appContext(appContext) {}\n};\n\n#endif // CONDITIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\GreenhouseControlController.h",
        "content": "#ifndef GREENHOUSECONTROLCONTROLLER_H\n#define GREENHOUSECONTROLCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/GreenhouseControlEntity.h\"\n#include \"../../AppContext.h\"\n\nclass GreenhouseControlController : public MainController<GreenhouseControlEntity> {\npublic:\n    AppContext* appContext;\n    GreenhouseControlController(AppContext* appContext, StorageType _storageType) : MainController<GreenhouseControlEntity>(appContext->systemContext ,\"greenhousecontrol\", _storageType), appContext(appContext) {}\n};\n\n#endif // GREENHOUSECONTROLCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\GreenhouseController.h",
        "content": "#ifndef GREENHOUSECONTROLLER_H\n#define GREENHOUSECONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/GreenhouseEntity.h\"\n#include \"../../AppContext.h\"\n\nclass GreenhouseController : public MainController<GreenhouseEntity> {\npublic:\n    AppContext* appContext;\n    GreenhouseController(AppContext* appContext, StorageType _storageType) : MainController<GreenhouseEntity>(appContext->systemContext ,\"greenhouse\", _storageType), appContext(appContext) {}\n};\n\n#endif // GREENHOUSECONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\GreenhouseSensorController.h",
        "content": "#ifndef GREENHOUSESENSORCONTROLLER_H\n#define GREENHOUSESENSORCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/GreenhouseSensorEntity.h\"\n#include \"../../AppContext.h\"\n\nclass GreenhouseSensorController : public MainController<GreenhouseSensorEntity> {\npublic:\n    AppContext* appContext;\n    GreenhouseSensorController(AppContext* appContext, StorageType _storageType) : MainController<GreenhouseSensorEntity>(appContext->systemContext ,\"greenhousesensor\", _storageType), appContext(appContext) {}\n};\n\n#endif // GREENHOUSESENSORCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\GrowifyConfigController.h",
        "content": "\n#ifndef GROWIFYCONFIGCONTROLLER_H\n#define GROWIFYCONFIGCONTROLLER_H\n\n#include \"../../AppContext.h\"\n\nclass GrowifyConfigController : public MainController<KeyValueEntity>{\nprotected:\npublic:\n    AppContext* appContext;\n    GrowifyConfigController(AppContext* appContext, StorageType _storageType) : MainController<KeyValueEntity>(appContext->systemContext ,\"growify_config\", _storageType), appContext(appContext) {}\n\n};\n\n#endif //GROWIFYCONFIGCONTROLLER_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\HumidityConditionController.h",
        "content": "#ifndef HUMIDITYCONDITIONCONTROLLER_H\n#define HUMIDITYCONDITIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/HumidityConditionEntity.h\"\n#include \"../../AppContext.h\"\n\nclass HumidityConditionController : public MainController<HumidityConditionEntity> {\npublic:\n    AppContext* appContext;\n    HumidityConditionController(AppContext* appContext, StorageType _storageType) : MainController<HumidityConditionEntity>(appContext->systemContext ,\"humiditycondition\", _storageType), appContext(appContext) {}\n};\n\n#endif // HUMIDITYCONDITIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\HumidityLogController.h",
        "content": "#ifndef HUMIDITYLOGCONTROLLER_H\n#define HUMIDITYLOGCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/HumidityLogEntity.h\"\n#include \"../../AppContext.h\"\n\nclass HumidityLogController : public MainController<HumidityLogEntity> {\npublic:\n    AppContext* appContext;\n    HumidityLogController(AppContext* appContext, StorageType _storageType) : MainController<HumidityLogEntity>(appContext->systemContext ,\"humiditylog\", _storageType), appContext(appContext) {}\n};\n\n#endif // HUMIDITYLOGCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\LightConditionController.h",
        "content": "#ifndef LIGHTCONDITIONCONTROLLER_H\n#define LIGHTCONDITIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/LightConditionEntity.h\"\n#include \"../../AppContext.h\"\n\nclass LightConditionController : public MainController<LightConditionEntity> {\npublic:\n    AppContext* appContext;\n    LightConditionController(AppContext* appContext, StorageType _storageType) : MainController<LightConditionEntity>(appContext->systemContext ,\"lightcondition\", _storageType), appContext(appContext) {}\n};\n\n#endif // LIGHTCONDITIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\LightLogController.h",
        "content": "#ifndef LIGHTLOGCONTROLLER_H\n#define LIGHTLOGCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/LightLogEntity.h\"\n#include \"../../AppContext.h\"\n\nclass LightLogController : public MainController<LightLogEntity> {\npublic:\n    AppContext* appContext;\n    LightLogController(AppContext* appContext, StorageType _storageType) : MainController<LightLogEntity>(appContext->systemContext ,\"lightlog\", _storageType), appContext(appContext) {}\n};\n\n#endif // LIGHTLOGCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\PlantController.h",
        "content": "#ifndef PLANTCONTROLLER_H\n#define PLANTCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/PlantEntity.h\"\n#include \"../../AppContext.h\"\n\nclass PlantController : public MainController<PlantEntity> {\npublic:\n    AppContext* appContext;\n    PlantController(AppContext* appContext, StorageType _storageType) : MainController<PlantEntity>(appContext->systemContext ,\"plant\", _storageType), appContext(appContext) {}\n};\n\n#endif // PLANTCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\PlantTypeController.h",
        "content": "#ifndef PLANTTYPECONTROLLER_H\n#define PLANTTYPECONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/PlantTypeEntity.h\"\n#include \"../../AppContext.h\"\n\nclass PlantTypeController : public MainController<PlantTypeEntity> {\npublic:\n    AppContext* appContext;\n    PlantTypeController(AppContext* appContext, StorageType _storageType) : MainController<PlantTypeEntity>(appContext->systemContext ,\"planttype\", _storageType), appContext(appContext) {}\n};\n\n#endif // PLANTTYPECONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\SoilMoistureConditionController.h",
        "content": "#ifndef SOILMOISTURECONDITIONCONTROLLER_H\n#define SOILMOISTURECONDITIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/SoilMoistureConditionEntity.h\"\n#include \"../../AppContext.h\"\n\nclass SoilMoistureConditionController : public MainController<SoilMoistureConditionEntity> {\npublic:\n    AppContext* appContext;\n    SoilMoistureConditionController(AppContext* appContext, StorageType _storageType) : MainController<SoilMoistureConditionEntity>(appContext->systemContext ,\"soilmoisturecondition\", _storageType), appContext(appContext) {}\n};\n\n#endif // SOILMOISTURECONDITIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\SoilMoistureLogController.h",
        "content": "#ifndef SOILMOISTURELOGCONTROLLER_H\n#define SOILMOISTURELOGCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/SoilMoistureLogEntity.h\"\n#include \"../../AppContext.h\"\n\nclass SoilMoistureLogController : public MainController<SoilMoistureLogEntity> {\npublic:\n    AppContext* appContext;\n    SoilMoistureLogController(AppContext* appContext, StorageType _storageType) : MainController<SoilMoistureLogEntity>(appContext->systemContext ,\"soilmoisturelog\", _storageType), appContext(appContext) {}\n};\n\n#endif // SOILMOISTURELOGCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\TemperatureConditionController.h",
        "content": "#ifndef TEMPERATURECONDITIONCONTROLLER_H\n#define TEMPERATURECONDITIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/TemperatureConditionEntity.h\"\n#include \"../../AppContext.h\"\n\nclass TemperatureConditionController : public MainController<TemperatureConditionEntity> {\npublic:\n    AppContext* appContext;\n    TemperatureConditionController(AppContext* appContext, StorageType _storageType) : MainController<TemperatureConditionEntity>(appContext->systemContext ,\"temperaturecondition\", _storageType), appContext(appContext) {}\n};\n\n#endif // TEMPERATURECONDITIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Controllers\\TemperatureLogController.h",
        "content": "#ifndef TEMPERATURELOGCONTROLLER_H\n#define TEMPERATURELOGCONTROLLER_H\n\n#include <OStad.h>\n#include \"../Entities/TemperatureLogEntity.h\"\n#include \"../../AppContext.h\"\n\nclass TemperatureLogController : public MainController<TemperatureLogEntity> {\npublic:\n    AppContext* appContext;\n    TemperatureLogController(AppContext* appContext, StorageType _storageType) : MainController<TemperatureLogEntity>(appContext->systemContext ,\"temperaturelog\", _storageType), appContext(appContext) {}\n};\n\n#endif // TEMPERATURELOGCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\ConditionEntity.h",
        "content": "#ifndef CONDITIONENTITY_H\n#define CONDITIONENTITY_H\n\n#include <OStad.h>\n\nclass ConditionEntity : public Entity {\npublic:\n    static const String COLUMN_TEMPERATURECONDITIONID;\n    static const String COLUMN_HUMIDITYCONDITIONID;\n    static const String COLUMN_LIGHTCONDITIONID;\n    static const String COLUMN_SOILMOISTURECONDITIONID;\n    \n\n    int TemperatureConditionId;\n    int HumidityConditionId;\n    int LightConditionId;\n    int SoilMoistureConditionId;\n    \n\n    ConditionEntity()  : Entity(){}\n\n    ConditionEntity(int id, int _TemperatureConditionId, int _HumidityConditionId, int _LightConditionId, int _SoilMoistureConditionId) : Entity() {\n        this->id = id;\n        TemperatureConditionId = _TemperatureConditionId;\n        HumidityConditionId = _HumidityConditionId;\n        LightConditionId = _LightConditionId;\n        SoilMoistureConditionId = _SoilMoistureConditionId;\n        \n\n        addColumn(COLUMN_TEMPERATURECONDITIONID, String(TemperatureConditionId), \"int\");\n        addColumn(COLUMN_HUMIDITYCONDITIONID, String(HumidityConditionId), \"int\");\n        addColumn(COLUMN_LIGHTCONDITIONID, String(LightConditionId), \"int\");\n        addColumn(COLUMN_SOILMOISTURECONDITIONID, String(SoilMoistureConditionId), \"int\");\n        \n    }\n\n    ConditionEntity(int _TemperatureConditionId, int _HumidityConditionId, int _LightConditionId, int _SoilMoistureConditionId) : \n        ConditionEntity(0, _TemperatureConditionId, _HumidityConditionId, _LightConditionId, _SoilMoistureConditionId)  {}\n\n    static ConditionEntity fromEntity(Entity entity)\n    {\n        ConditionEntity conditionentity = ConditionEntity();\n        conditionentity.fromString(entity.toString());\n        return conditionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String ConditionEntity::COLUMN_TEMPERATURECONDITIONID = \"TemperatureConditionId\";\nconst String ConditionEntity::COLUMN_HUMIDITYCONDITIONID = \"HumidityConditionId\";\nconst String ConditionEntity::COLUMN_LIGHTCONDITIONID = \"LightConditionId\";\nconst String ConditionEntity::COLUMN_SOILMOISTURECONDITIONID = \"SoilMoistureConditionId\";\n\n\n#endif // CONDITIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\GreenhouseControlEntity.h",
        "content": "#ifndef GREENHOUSECONTROLENTITY_H\n#define GREENHOUSECONTROLENTITY_H\n\n#include <OStad.h>\n\nclass GreenhouseControlEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_CONTROLMODULEID;\n    static const String COLUMN_ROLE;\n    \n\n    int GreenhouseId;\n    int ControlModuleId;\n    String Role;\n    \n\n    GreenhouseControlEntity()  : Entity(){}\n\n    GreenhouseControlEntity(int id, int _GreenhouseId, int _ControlModuleId, String _Role) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        ControlModuleId = _ControlModuleId;\n        Role = _Role;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_CONTROLMODULEID, String(ControlModuleId), \"int\");\n        addColumn(COLUMN_ROLE, String(Role), \"String\");\n        \n    }\n\n    GreenhouseControlEntity(int _GreenhouseId, int _ControlModuleId, String _Role) : \n        GreenhouseControlEntity(0, _GreenhouseId, _ControlModuleId, _Role)  {}\n\n    static GreenhouseControlEntity fromEntity(Entity entity)\n    {\n        GreenhouseControlEntity greenhousecontrolentity = GreenhouseControlEntity();\n        greenhousecontrolentity.fromString(entity.toString());\n        return greenhousecontrolentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String GreenhouseControlEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String GreenhouseControlEntity::COLUMN_CONTROLMODULEID = \"ControlModuleId\";\nconst String GreenhouseControlEntity::COLUMN_ROLE = \"Role\";\n\n\n#endif // GREENHOUSECONTROLENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\GreenhouseEntity.h",
        "content": "#ifndef GREENHOUSEENTITY_H\n#define GREENHOUSEENTITY_H\n\n#include <OStad.h>\n\nclass GreenhouseEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_CONDITIONID;\n    \n\n    String Name;\n    int ConditionId;\n    \n\n    GreenhouseEntity()  : Entity(){}\n\n    GreenhouseEntity(int id, String _Name, int _ConditionId) : Entity() {\n        this->id = id;\n        Name = _Name;\n        ConditionId = _ConditionId;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_CONDITIONID, String(ConditionId), \"int\");\n        \n    }\n\n    GreenhouseEntity(String _Name, int _ConditionId) : \n        GreenhouseEntity(0, _Name, _ConditionId)  {}\n\n    static GreenhouseEntity fromEntity(Entity entity)\n    {\n        GreenhouseEntity greenhouseentity = GreenhouseEntity();\n        greenhouseentity.fromString(entity.toString());\n        return greenhouseentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String GreenhouseEntity::COLUMN_NAME = \"Name\";\nconst String GreenhouseEntity::COLUMN_CONDITIONID = \"ConditionId\";\n\n\n#endif // GREENHOUSEENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\GreenhouseSensorEntity.h",
        "content": "#ifndef GREENHOUSESENSORENTITY_H\n#define GREENHOUSESENSORENTITY_H\n\n#include <OStad.h>\n\nclass GreenhouseSensorEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_SENSORMODULEID;\n    static const String COLUMN_ROLE;\n    \n\n    int GreenhouseId;\n    int SensorModuleId;\n    String Role;\n    \n\n    GreenhouseSensorEntity()  : Entity(){}\n\n    GreenhouseSensorEntity(int id, int _GreenhouseId, int _SensorModuleId, String _Role) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        SensorModuleId = _SensorModuleId;\n        Role = _Role;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_SENSORMODULEID, String(SensorModuleId), \"int\");\n        addColumn(COLUMN_ROLE, String(Role), \"String\");\n        \n    }\n\n    GreenhouseSensorEntity(int _GreenhouseId, int _SensorModuleId, String _Role) : \n        GreenhouseSensorEntity(0, _GreenhouseId, _SensorModuleId, _Role)  {}\n\n    static GreenhouseSensorEntity fromEntity(Entity entity)\n    {\n        GreenhouseSensorEntity greenhousesensorentity = GreenhouseSensorEntity();\n        greenhousesensorentity.fromString(entity.toString());\n        return greenhousesensorentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String GreenhouseSensorEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String GreenhouseSensorEntity::COLUMN_SENSORMODULEID = \"SensorModuleId\";\nconst String GreenhouseSensorEntity::COLUMN_ROLE = \"Role\";\n\n\n#endif // GREENHOUSESENSORENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\HumidityConditionEntity.h",
        "content": "#ifndef HUMIDITYCONDITIONENTITY_H\n#define HUMIDITYCONDITIONENTITY_H\n\n#include <OStad.h>\n\nclass HumidityConditionEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_MINHUMIDITY;\n    static const String COLUMN_MAXHUMIDITY;\n    static const String COLUMN_LOWHUMIDITYALERTTHRESHOLD;\n    static const String COLUMN_HIGHHUMIDITYALERTTHRESHOLD;\n    \n\n    String Name;\n    int MinHumidity;\n    int MaxHumidity;\n    int LowHumidityAlertThreshold;\n    int HighHumidityAlertThreshold;\n    \n\n    HumidityConditionEntity()  : Entity(){}\n\n    HumidityConditionEntity(int id, String _Name, int _MinHumidity, int _MaxHumidity, int _LowHumidityAlertThreshold, int _HighHumidityAlertThreshold) : Entity() {\n        this->id = id;\n        Name = _Name;\n        MinHumidity = _MinHumidity;\n        MaxHumidity = _MaxHumidity;\n        LowHumidityAlertThreshold = _LowHumidityAlertThreshold;\n        HighHumidityAlertThreshold = _HighHumidityAlertThreshold;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_MINHUMIDITY, String(MinHumidity), \"int\");\n        addColumn(COLUMN_MAXHUMIDITY, String(MaxHumidity), \"int\");\n        addColumn(COLUMN_LOWHUMIDITYALERTTHRESHOLD, String(LowHumidityAlertThreshold), \"int\");\n        addColumn(COLUMN_HIGHHUMIDITYALERTTHRESHOLD, String(HighHumidityAlertThreshold), \"int\");\n        \n    }\n\n    HumidityConditionEntity(String _Name, int _MinHumidity, int _MaxHumidity, int _LowHumidityAlertThreshold, int _HighHumidityAlertThreshold) : \n        HumidityConditionEntity(0, _Name, _MinHumidity, _MaxHumidity, _LowHumidityAlertThreshold, _HighHumidityAlertThreshold)  {}\n\n    static HumidityConditionEntity fromEntity(Entity entity)\n    {\n        HumidityConditionEntity humidityconditionentity = HumidityConditionEntity();\n        humidityconditionentity.fromString(entity.toString());\n        return humidityconditionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String HumidityConditionEntity::COLUMN_NAME = \"Name\";\nconst String HumidityConditionEntity::COLUMN_MINHUMIDITY = \"MinHumidity\";\nconst String HumidityConditionEntity::COLUMN_MAXHUMIDITY = \"MaxHumidity\";\nconst String HumidityConditionEntity::COLUMN_LOWHUMIDITYALERTTHRESHOLD = \"LowHumidityAlertThreshold\";\nconst String HumidityConditionEntity::COLUMN_HIGHHUMIDITYALERTTHRESHOLD = \"HighHumidityAlertThreshold\";\n\n\n#endif // HUMIDITYCONDITIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\HumidityLogEntity.h",
        "content": "#ifndef HUMIDITYLOGENTITY_H\n#define HUMIDITYLOGENTITY_H\n\n#include <OStad.h>\n\nclass HumidityLogEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_HUMIDITYREADING;\n    static const String COLUMN_DRYERSTATE;\n    static const String COLUMN_HUMIDIFIERSTATE;\n    \n\n    int GreenhouseId;\n    int HumidityReading;\n    String DryerState;\n    String HumidifierState;\n    \n\n    HumidityLogEntity()  : Entity(){}\n\n    HumidityLogEntity(int id, int _GreenhouseId, int _HumidityReading, String _DryerState, String _HumidifierState) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        HumidityReading = _HumidityReading;\n        DryerState = _DryerState;\n        HumidifierState = _HumidifierState;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_HUMIDITYREADING, String(HumidityReading), \"int\");\n        addColumn(COLUMN_DRYERSTATE, String(DryerState), \"String\");\n        addColumn(COLUMN_HUMIDIFIERSTATE, String(HumidifierState), \"String\");\n        \n    }\n\n    HumidityLogEntity(int _GreenhouseId, int _HumidityReading, String _DryerState, String _HumidifierState) : \n        HumidityLogEntity(0, _GreenhouseId, _HumidityReading, _DryerState, _HumidifierState)  {}\n\n    static HumidityLogEntity fromEntity(Entity entity)\n    {\n        HumidityLogEntity humiditylogentity = HumidityLogEntity();\n        humiditylogentity.fromString(entity.toString());\n        return humiditylogentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String HumidityLogEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String HumidityLogEntity::COLUMN_HUMIDITYREADING = \"HumidityReading\";\nconst String HumidityLogEntity::COLUMN_DRYERSTATE = \"DryerState\";\nconst String HumidityLogEntity::COLUMN_HUMIDIFIERSTATE = \"HumidifierState\";\n\n\n#endif // HUMIDITYLOGENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\LightConditionEntity.h",
        "content": "#ifndef LIGHTCONDITIONENTITY_H\n#define LIGHTCONDITIONENTITY_H\n\n#include <OStad.h>\n\nclass LightConditionEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_MINLIGHTINTENSITY;\n    static const String COLUMN_MAXLIGHTINTENSITY;\n    static const String COLUMN_LOWLIGHTINTENSITYALERTTHRESHOLD;\n    static const String COLUMN_HIGHLIGHTINTENSITYALERTTHRESHOLD;\n    \n\n    String Name;\n    int MinLightIntensity;\n    int MaxLightIntensity;\n    int LowLightIntensityAlertThreshold;\n    int HighLightIntensityAlertThreshold;\n    \n\n    LightConditionEntity()  : Entity(){}\n\n    LightConditionEntity(int id, String _Name, int _MinLightIntensity, int _MaxLightIntensity, int _LowLightIntensityAlertThreshold, int _HighLightIntensityAlertThreshold) : Entity() {\n        this->id = id;\n        Name = _Name;\n        MinLightIntensity = _MinLightIntensity;\n        MaxLightIntensity = _MaxLightIntensity;\n        LowLightIntensityAlertThreshold = _LowLightIntensityAlertThreshold;\n        HighLightIntensityAlertThreshold = _HighLightIntensityAlertThreshold;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_MINLIGHTINTENSITY, String(MinLightIntensity), \"int\");\n        addColumn(COLUMN_MAXLIGHTINTENSITY, String(MaxLightIntensity), \"int\");\n        addColumn(COLUMN_LOWLIGHTINTENSITYALERTTHRESHOLD, String(LowLightIntensityAlertThreshold), \"int\");\n        addColumn(COLUMN_HIGHLIGHTINTENSITYALERTTHRESHOLD, String(HighLightIntensityAlertThreshold), \"int\");\n        \n    }\n\n    LightConditionEntity(String _Name, int _MinLightIntensity, int _MaxLightIntensity, int _LowLightIntensityAlertThreshold, int _HighLightIntensityAlertThreshold) : \n        LightConditionEntity(0, _Name, _MinLightIntensity, _MaxLightIntensity, _LowLightIntensityAlertThreshold, _HighLightIntensityAlertThreshold)  {}\n\n    static LightConditionEntity fromEntity(Entity entity)\n    {\n        LightConditionEntity lightconditionentity = LightConditionEntity();\n        lightconditionentity.fromString(entity.toString());\n        return lightconditionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String LightConditionEntity::COLUMN_NAME = \"Name\";\nconst String LightConditionEntity::COLUMN_MINLIGHTINTENSITY = \"MinLightIntensity\";\nconst String LightConditionEntity::COLUMN_MAXLIGHTINTENSITY = \"MaxLightIntensity\";\nconst String LightConditionEntity::COLUMN_LOWLIGHTINTENSITYALERTTHRESHOLD = \"LowLightIntensityAlertThreshold\";\nconst String LightConditionEntity::COLUMN_HIGHLIGHTINTENSITYALERTTHRESHOLD = \"HighLightIntensityAlertThreshold\";\n\n\n#endif // LIGHTCONDITIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\LightLogEntity.h",
        "content": "#ifndef LIGHTLOGENTITY_H\n#define LIGHTLOGENTITY_H\n\n#include <OStad.h>\n\nclass LightLogEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_LIGHTINTENSITYREADING;\n    static const String COLUMN_LIGHTSTATE;\n    \n\n    int GreenhouseId;\n    int LightIntensityReading;\n    String LightState;\n    \n\n    LightLogEntity()  : Entity(){}\n\n    LightLogEntity(int id, int _GreenhouseId, int _LightIntensityReading, String _LightState) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        LightIntensityReading = _LightIntensityReading;\n        LightState = _LightState;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_LIGHTINTENSITYREADING, String(LightIntensityReading), \"int\");\n        addColumn(COLUMN_LIGHTSTATE, String(LightState), \"String\");\n        \n    }\n\n    LightLogEntity(int _GreenhouseId, int _LightIntensityReading, String _LightState) : \n        LightLogEntity(0, _GreenhouseId, _LightIntensityReading, _LightState)  {}\n\n    static LightLogEntity fromEntity(Entity entity)\n    {\n        LightLogEntity lightlogentity = LightLogEntity();\n        lightlogentity.fromString(entity.toString());\n        return lightlogentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String LightLogEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String LightLogEntity::COLUMN_LIGHTINTENSITYREADING = \"LightIntensityReading\";\nconst String LightLogEntity::COLUMN_LIGHTSTATE = \"LightState\";\n\n\n#endif // LIGHTLOGENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\PlantEntity.h",
        "content": "#ifndef PLANTENTITY_H\n#define PLANTENTITY_H\n\n#include <OStad.h>\n\nclass PlantEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_PLANTTYPEID;\n    static const String COLUMN_GREENHOUSEID;\n    \n\n    String Name;\n    int PlantTypeId;\n    int GreenhouseId;\n    \n\n    PlantEntity()  : Entity(){}\n\n    PlantEntity(int id, String _Name, int _PlantTypeId, int _GreenhouseId) : Entity() {\n        this->id = id;\n        Name = _Name;\n        PlantTypeId = _PlantTypeId;\n        GreenhouseId = _GreenhouseId;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_PLANTTYPEID, String(PlantTypeId), \"int\");\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        \n    }\n\n    PlantEntity(String _Name, int _PlantTypeId, int _GreenhouseId) : \n        PlantEntity(0, _Name, _PlantTypeId, _GreenhouseId)  {}\n\n    static PlantEntity fromEntity(Entity entity)\n    {\n        PlantEntity plantentity = PlantEntity();\n        plantentity.fromString(entity.toString());\n        return plantentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String PlantEntity::COLUMN_NAME = \"Name\";\nconst String PlantEntity::COLUMN_PLANTTYPEID = \"PlantTypeId\";\nconst String PlantEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\n\n\n#endif // PLANTENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\PlantTypeEntity.h",
        "content": "#ifndef PLANTTYPEENTITY_H\n#define PLANTTYPEENTITY_H\n\n#include <OStad.h>\n\nclass PlantTypeEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_GREENHOUSEID;\n    \n\n    String Name;\n    int GreenhouseId;\n    \n\n    PlantTypeEntity()  : Entity(){}\n\n    PlantTypeEntity(int id, String _Name, int _GreenhouseId) : Entity() {\n        this->id = id;\n        Name = _Name;\n        GreenhouseId = _GreenhouseId;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        \n    }\n\n    PlantTypeEntity(String _Name, int _GreenhouseId) : \n        PlantTypeEntity(0, _Name, _GreenhouseId)  {}\n\n    static PlantTypeEntity fromEntity(Entity entity)\n    {\n        PlantTypeEntity planttypeentity = PlantTypeEntity();\n        planttypeentity.fromString(entity.toString());\n        return planttypeentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String PlantTypeEntity::COLUMN_NAME = \"Name\";\nconst String PlantTypeEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\n\n\n#endif // PLANTTYPEENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\SoilMoistureConditionEntity.h",
        "content": "#ifndef SOILMOISTURECONDITIONENTITY_H\n#define SOILMOISTURECONDITIONENTITY_H\n\n#include <OStad.h>\n\nclass SoilMoistureConditionEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_MINSOILMOISTURE;\n    static const String COLUMN_MAXSOILMOISTURE;\n    static const String COLUMN_LOWSOILMOISTUREALERTTHRESHOLD;\n    static const String COLUMN_HIGHSOILMOISTUREALERTTHRESHOLD;\n    \n\n    String Name;\n    int MinSoilMoisture;\n    int MaxSoilMoisture;\n    int LowSoilMoistureAlertThreshold;\n    int HighSoilMoistureAlertThreshold;\n    \n\n    SoilMoistureConditionEntity()  : Entity(){}\n\n    SoilMoistureConditionEntity(int id, String _Name, int _MinSoilMoisture, int _MaxSoilMoisture, int _LowSoilMoistureAlertThreshold, int _HighSoilMoistureAlertThreshold) : Entity() {\n        this->id = id;\n        Name = _Name;\n        MinSoilMoisture = _MinSoilMoisture;\n        MaxSoilMoisture = _MaxSoilMoisture;\n        LowSoilMoistureAlertThreshold = _LowSoilMoistureAlertThreshold;\n        HighSoilMoistureAlertThreshold = _HighSoilMoistureAlertThreshold;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_MINSOILMOISTURE, String(MinSoilMoisture), \"int\");\n        addColumn(COLUMN_MAXSOILMOISTURE, String(MaxSoilMoisture), \"int\");\n        addColumn(COLUMN_LOWSOILMOISTUREALERTTHRESHOLD, String(LowSoilMoistureAlertThreshold), \"int\");\n        addColumn(COLUMN_HIGHSOILMOISTUREALERTTHRESHOLD, String(HighSoilMoistureAlertThreshold), \"int\");\n        \n    }\n\n    SoilMoistureConditionEntity(String _Name, int _MinSoilMoisture, int _MaxSoilMoisture, int _LowSoilMoistureAlertThreshold, int _HighSoilMoistureAlertThreshold) : \n        SoilMoistureConditionEntity(0, _Name, _MinSoilMoisture, _MaxSoilMoisture, _LowSoilMoistureAlertThreshold, _HighSoilMoistureAlertThreshold)  {}\n\n    static SoilMoistureConditionEntity fromEntity(Entity entity)\n    {\n        SoilMoistureConditionEntity soilmoistureconditionentity = SoilMoistureConditionEntity();\n        soilmoistureconditionentity.fromString(entity.toString());\n        return soilmoistureconditionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String SoilMoistureConditionEntity::COLUMN_NAME = \"Name\";\nconst String SoilMoistureConditionEntity::COLUMN_MINSOILMOISTURE = \"MinSoilMoisture\";\nconst String SoilMoistureConditionEntity::COLUMN_MAXSOILMOISTURE = \"MaxSoilMoisture\";\nconst String SoilMoistureConditionEntity::COLUMN_LOWSOILMOISTUREALERTTHRESHOLD = \"LowSoilMoistureAlertThreshold\";\nconst String SoilMoistureConditionEntity::COLUMN_HIGHSOILMOISTUREALERTTHRESHOLD = \"HighSoilMoistureAlertThreshold\";\n\n\n#endif // SOILMOISTURECONDITIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\SoilMoistureLogEntity.h",
        "content": "#ifndef SOILMOISTURELOGENTITY_H\n#define SOILMOISTURELOGENTITY_H\n\n#include <OStad.h>\n\nclass SoilMoistureLogEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_SOILMOISTUREREADING;\n    static const String COLUMN_WATERPUMPSTATE;\n    \n\n    int GreenhouseId;\n    int SoilMoistureReading;\n    String WaterPumpState;\n    \n\n    SoilMoistureLogEntity()  : Entity(){}\n\n    SoilMoistureLogEntity(int id, int _GreenhouseId, int _SoilMoistureReading, String _WaterPumpState) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        SoilMoistureReading = _SoilMoistureReading;\n        WaterPumpState = _WaterPumpState;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_SOILMOISTUREREADING, String(SoilMoistureReading), \"int\");\n        addColumn(COLUMN_WATERPUMPSTATE, String(WaterPumpState), \"String\");\n        \n    }\n\n    SoilMoistureLogEntity(int _GreenhouseId, int _SoilMoistureReading, String _WaterPumpState) : \n        SoilMoistureLogEntity(0, _GreenhouseId, _SoilMoistureReading, _WaterPumpState)  {}\n\n    static SoilMoistureLogEntity fromEntity(Entity entity)\n    {\n        SoilMoistureLogEntity soilmoisturelogentity = SoilMoistureLogEntity();\n        soilmoisturelogentity.fromString(entity.toString());\n        return soilmoisturelogentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String SoilMoistureLogEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String SoilMoistureLogEntity::COLUMN_SOILMOISTUREREADING = \"SoilMoistureReading\";\nconst String SoilMoistureLogEntity::COLUMN_WATERPUMPSTATE = \"WaterPumpState\";\n\n\n#endif // SOILMOISTURELOGENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\TemperatureConditionEntity.h",
        "content": "#ifndef TEMPERATURECONDITIONENTITY_H\n#define TEMPERATURECONDITIONENTITY_H\n\n#include <OStad.h>\n\nclass TemperatureConditionEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_MINTEMPERATURE;\n    static const String COLUMN_MAXTEMPERATURE;\n    static const String COLUMN_LOWTEMPALERTTHRESHOLD;\n    static const String COLUMN_HIGHTEMPALERTTHRESHOLD;\n    \n\n    String Name;\n    int MinTemperature;\n    int MaxTemperature;\n    int LowTempAlertThreshold;\n    int HighTempAlertThreshold;\n    \n\n    TemperatureConditionEntity()  : Entity(){}\n\n    TemperatureConditionEntity(int id, String _Name, int _MinTemperature, int _MaxTemperature, int _LowTempAlertThreshold, int _HighTempAlertThreshold) : Entity() {\n        this->id = id;\n        Name = _Name;\n        MinTemperature = _MinTemperature;\n        MaxTemperature = _MaxTemperature;\n        LowTempAlertThreshold = _LowTempAlertThreshold;\n        HighTempAlertThreshold = _HighTempAlertThreshold;\n        \n\n        addColumn(COLUMN_NAME, String(Name), \"String\");\n        addColumn(COLUMN_MINTEMPERATURE, String(MinTemperature), \"int\");\n        addColumn(COLUMN_MAXTEMPERATURE, String(MaxTemperature), \"int\");\n        addColumn(COLUMN_LOWTEMPALERTTHRESHOLD, String(LowTempAlertThreshold), \"int\");\n        addColumn(COLUMN_HIGHTEMPALERTTHRESHOLD, String(HighTempAlertThreshold), \"int\");\n        \n    }\n\n    TemperatureConditionEntity(String _Name, int _MinTemperature, int _MaxTemperature, int _LowTempAlertThreshold, int _HighTempAlertThreshold) : \n        TemperatureConditionEntity(0, _Name, _MinTemperature, _MaxTemperature, _LowTempAlertThreshold, _HighTempAlertThreshold)  {}\n\n    static TemperatureConditionEntity fromEntity(Entity entity)\n    {\n        TemperatureConditionEntity temperatureconditionentity = TemperatureConditionEntity();\n        temperatureconditionentity.fromString(entity.toString());\n        return temperatureconditionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String TemperatureConditionEntity::COLUMN_NAME = \"Name\";\nconst String TemperatureConditionEntity::COLUMN_MINTEMPERATURE = \"MinTemperature\";\nconst String TemperatureConditionEntity::COLUMN_MAXTEMPERATURE = \"MaxTemperature\";\nconst String TemperatureConditionEntity::COLUMN_LOWTEMPALERTTHRESHOLD = \"LowTempAlertThreshold\";\nconst String TemperatureConditionEntity::COLUMN_HIGHTEMPALERTTHRESHOLD = \"HighTempAlertThreshold\";\n\n\n#endif // TEMPERATURECONDITIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Database\\Entities\\TemperatureLogEntity.h",
        "content": "#ifndef TEMPERATURELOGENTITY_H\n#define TEMPERATURELOGENTITY_H\n\n#include <OStad.h>\n\nclass TemperatureLogEntity : public Entity {\npublic:\n    static const String COLUMN_GREENHOUSEID;\n    static const String COLUMN_TEMPERATUREREADING;\n    static const String COLUMN_COOLERSTATE;\n    static const String COLUMN_HEATERSTATE;\n    \n\n    int GreenhouseId;\n    int TemperatureReading;\n    String CoolerState;\n    String HeaterState;\n    \n\n    TemperatureLogEntity()  : Entity(){}\n\n    TemperatureLogEntity(int id, int _GreenhouseId, int _TemperatureReading, String _CoolerState, String _HeaterState) : Entity() {\n        this->id = id;\n        GreenhouseId = _GreenhouseId;\n        TemperatureReading = _TemperatureReading;\n        CoolerState = _CoolerState;\n        HeaterState = _HeaterState;\n        \n\n        addColumn(COLUMN_GREENHOUSEID, String(GreenhouseId), \"int\");\n        addColumn(COLUMN_TEMPERATUREREADING, String(TemperatureReading), \"int\");\n        addColumn(COLUMN_COOLERSTATE, String(CoolerState), \"String\");\n        addColumn(COLUMN_HEATERSTATE, String(HeaterState), \"String\");\n        \n    }\n\n    TemperatureLogEntity(int _GreenhouseId, int _TemperatureReading, String _CoolerState, String _HeaterState) : \n        TemperatureLogEntity(0, _GreenhouseId, _TemperatureReading, _CoolerState, _HeaterState)  {}\n\n    static TemperatureLogEntity fromEntity(Entity entity)\n    {\n        TemperatureLogEntity temperaturelogentity = TemperatureLogEntity();\n        temperaturelogentity.fromString(entity.toString());\n        return temperaturelogentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String TemperatureLogEntity::COLUMN_GREENHOUSEID = \"GreenhouseId\";\nconst String TemperatureLogEntity::COLUMN_TEMPERATUREREADING = \"TemperatureReading\";\nconst String TemperatureLogEntity::COLUMN_COOLERSTATE = \"CoolerState\";\nconst String TemperatureLogEntity::COLUMN_HEATERSTATE = \"HeaterState\";\n\n\n#endif // TEMPERATURELOGENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\DeviceManager\\DeviceManager.h",
        "content": "\n#ifndef DEVICEMANAGER_H\n#define DEVICEMANAGER_H\n\n#include \"IDeviceManager.h\"\n#include \"../AppContext.h\"\n#include <OStad.h>\n\nclass DeviceManager : public IDeviceManager\n{\nprivate:\n    AppContext* appContext;\n    String _resetButtonStr = \"resetButton\";\n    Button* _resetButton;\n\n    String _mainLCDStr = \"mainLCD\";\n    OLEDLCD* _mainLCD;\n\n    String _pumpRelayStr = \"pumpRelay\";\n    Relay* _pumpRelay;\n\n    String _soilMoistureStr = \"soilMoisture\";\n    SoilMoistureSensor* _soilMoisture;\n\npublic:\n    DeviceManager(AppContext* context);\n\n    void initialize() override;\n    void update() override;\n    Button* resetButton() override;\n    OLEDLCD* mainLCD() override;\n    Relay* pumpRelay() override;\n    SoilMoistureSensor* soilMoisture() override;\n};\n\nDeviceManager::DeviceManager(AppContext* context) : appContext(context) {\n\n}\n\nvoid DeviceManager::initialize()\n{\n    _resetButton = new Button(0, \"resetButton\", false, false, ButtonType::PIN);\n    _mainLCD = new OLEDLCD(\"mainLCD\", 0x3C, 128, 64);\n    _pumpRelay = new Relay(0, \"pumpRelay\", true);\n    _soilMoisture = new SoilMoistureSensor(\"soilMoisture\", \"PIN\", 1, A0, 300, 700);\n}\n\nvoid DeviceManager::update()\n{\n    _resetButton->update();\n    _pumpRelay->update();\n}\n\nButton* DeviceManager::resetButton()\n{\n    return appContext->systemContext->getModules()->getButton(\"resetButton\");\n}\n\nOLEDLCD* DeviceManager::mainLCD()\n{\n    return appContext->systemContext->getModules()->getOLEDLCD(\"mainLCD\");\n}\n\nRelay* DeviceManager::pumpRelay()\n{\n    return appContext->systemContext->getModules()->getRelay(\"pumpRelay\");\n}\n\nSoilMoistureSensor* DeviceManager::soilMoisture()\n{\n    return appContext->systemContext->getModules()->getSoilMoistureSensor(\"soilMoisture\");\n}\n\n\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\DeviceManager\\IDeviceManager.h",
        "content": "\n#ifndef IDEVICEMANAGER_H\n#define IDEVICEMANAGER_H\n\n#include <EBPInterfaces.h>\n\nclass IDeviceManager\n{\npublic:\n    virtual ~IDeviceManager(){}\n\n    virtual void initialize() = 0;\n    virtual void update() = 0;\n    virtual Button* resetButton() = 0;\n    virtual OLEDLCD* mainLCD() = 0;\n    virtual Relay* pumpRelay() = 0;\n    virtual SoilMoistureSensor* soilMoisture() = 0;\n\n};\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Growify\\Growify.h",
        "content": "#ifndef GROWIFY_H\n#define GROWIFY_H\n\n#include \"IGrowify.h\"\n#include \"../AppContext.h\"\n#include \"../Config/DefaultGrowifyConfigs.h\"\n\nclass Growify : public IGrowify {\nprivate:\n    AppContext* context;\n\npublic:\n    Growify(AppContext* context);\n    \n    void initialize() override;\n    void update() override;\n};\n\nGrowify::Growify(AppContext* context)\n    : context(context) {}\n\nvoid Growify::initialize() {\n\n}\n\nvoid Growify::update() {\n\n}\n\n#endif //GROWIFY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\Growify\\src\\Growify\\IGrowify.h",
        "content": "#ifndef IGROWIFY\n#define IGROWIFY\n\nclass IGrowify {\npublic:\n    virtual void update() = 0;\n    virtual void initialize() = 0;\n};\n\n#endif // IGROWIFY\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\SimpleHttps\\cert.h",
        "content": "const uint8_t certificate[] = {0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0d, 0x0a, 0x4d, 0x49, 0x49, 0x44, 0x6f, 0x54, 0x43, 0x43, 0x41, 0x6f, 0x6b, 0x43, 0x46, 0x42, 0x53, 0x67, 0x4d, 0x4b, 0x36, 0x48, 0x62, 0x52, 0x45, 0x56, 0x4c, 0x32, 0x66, 0x36, 0x47, 0x34, 0x6d, 0x32, 0x45, 0x7a, 0x4b, 0x33, 0x45, 0x63, 0x68, 0x68, 0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x43, 0x77, 0x55, 0x41, 0x4d, 0x49, 0x47, 0x4d, 0x0d, 0x0a, 0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x47, 0x45, 0x77, 0x4a, 0x70, 0x63, 0x6a, 0x45, 0x50, 0x4d, 0x41, 0x30, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x47, 0x56, 0x47, 0x56, 0x6f, 0x63, 0x6d, 0x46, 0x75, 0x4d, 0x51, 0x38, 0x77, 0x44, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48, 0x44, 0x41, 0x5a, 0x55, 0x5a, 0x57, 0x68, 0x79, 0x59, 0x57, 0x34, 0x78, 0x0d, 0x0a, 0x49, 0x54, 0x41, 0x66, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x6f, 0x4d, 0x47, 0x45, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x79, 0x62, 0x6d, 0x56, 0x30, 0x49, 0x46, 0x64, 0x70, 0x5a, 0x47, 0x64, 0x70, 0x64, 0x48, 0x4d, 0x67, 0x55, 0x48, 0x52, 0x35, 0x49, 0x45, 0x78, 0x30, 0x5a, 0x44, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77, 0x77, 0x4b, 0x61, 0x47, 0x46, 0x6b, 0x0d, 0x0a, 0x59, 0x57, 0x78, 0x70, 0x63, 0x47, 0x39, 0x76, 0x63, 0x6a, 0x45, 0x6a, 0x4d, 0x43, 0x45, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x4a, 0x41, 0x52, 0x59, 0x55, 0x61, 0x47, 0x46, 0x6b, 0x59, 0x57, 0x78, 0x70, 0x63, 0x47, 0x39, 0x76, 0x63, 0x6b, 0x42, 0x6e, 0x62, 0x57, 0x46, 0x70, 0x62, 0x43, 0x35, 0x6a, 0x62, 0x32, 0x30, 0x77, 0x48, 0x68, 0x63, 0x4e, 0x0d, 0x0a, 0x4d, 0x6a, 0x4d, 0x78, 0x4d, 0x54, 0x41, 0x35, 0x4d, 0x44, 0x45, 0x7a, 0x4e, 0x6a, 0x4d, 0x34, 0x57, 0x68, 0x63, 0x4e, 0x4d, 0x6a, 0x51, 0x78, 0x4d, 0x54, 0x41, 0x34, 0x4d, 0x44, 0x45, 0x7a, 0x4e, 0x6a, 0x4d, 0x34, 0x57, 0x6a, 0x43, 0x42, 0x6a, 0x44, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42, 0x68, 0x4d, 0x43, 0x61, 0x58, 0x49, 0x78, 0x44, 0x7a, 0x41, 0x4e, 0x0d, 0x0a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x67, 0x4d, 0x42, 0x6c, 0x52, 0x6c, 0x61, 0x48, 0x4a, 0x68, 0x62, 0x6a, 0x45, 0x50, 0x4d, 0x41, 0x30, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42, 0x77, 0x77, 0x47, 0x56, 0x47, 0x56, 0x6f, 0x63, 0x6d, 0x46, 0x75, 0x4d, 0x53, 0x45, 0x77, 0x48, 0x77, 0x59, 0x44, 0x56, 0x51, 0x51, 0x4b, 0x44, 0x42, 0x68, 0x4a, 0x62, 0x6e, 0x52, 0x6c, 0x63, 0x6d, 0x35, 0x6c, 0x0d, 0x0a, 0x64, 0x43, 0x42, 0x58, 0x61, 0x57, 0x52, 0x6e, 0x61, 0x58, 0x52, 0x7a, 0x49, 0x46, 0x42, 0x30, 0x65, 0x53, 0x42, 0x4d, 0x64, 0x47, 0x51, 0x78, 0x45, 0x7a, 0x41, 0x52, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x4d, 0x4d, 0x43, 0x6d, 0x68, 0x68, 0x5a, 0x47, 0x46, 0x73, 0x61, 0x58, 0x42, 0x76, 0x62, 0x33, 0x49, 0x78, 0x49, 0x7a, 0x41, 0x68, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x0d, 0x0a, 0x39, 0x77, 0x30, 0x42, 0x43, 0x51, 0x45, 0x57, 0x46, 0x47, 0x68, 0x68, 0x5a, 0x47, 0x46, 0x73, 0x61, 0x58, 0x42, 0x76, 0x62, 0x33, 0x4a, 0x41, 0x5a, 0x32, 0x31, 0x68, 0x61, 0x57, 0x77, 0x75, 0x59, 0x32, 0x39, 0x74, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x0d, 0x0a, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x51, 0x45, 0x58, 0x43, 0x69, 0x66, 0x45, 0x7a, 0x63, 0x51, 0x6c, 0x76, 0x74, 0x49, 0x6c, 0x59, 0x5a, 0x48, 0x34, 0x43, 0x6d, 0x70, 0x66, 0x7a, 0x62, 0x46, 0x70, 0x51, 0x63, 0x6d, 0x72, 0x49, 0x51, 0x30, 0x74, 0x79, 0x38, 0x79, 0x6f, 0x5a, 0x38, 0x71, 0x56, 0x44, 0x6f, 0x2b, 0x66, 0x0d, 0x0a, 0x41, 0x32, 0x4e, 0x38, 0x55, 0x77, 0x4d, 0x48, 0x41, 0x53, 0x30, 0x69, 0x50, 0x68, 0x36, 0x68, 0x57, 0x62, 0x2f, 0x78, 0x6f, 0x55, 0x38, 0x6e, 0x6b, 0x44, 0x41, 0x48, 0x2b, 0x49, 0x37, 0x36, 0x44, 0x4a, 0x2b, 0x63, 0x34, 0x4a, 0x43, 0x39, 0x45, 0x53, 0x53, 0x57, 0x53, 0x77, 0x55, 0x68, 0x6a, 0x73, 0x4e, 0x36, 0x6c, 0x44, 0x52, 0x50, 0x72, 0x39, 0x2f, 0x78, 0x4d, 0x6b, 0x2f, 0x63, 0x0d, 0x0a, 0x62, 0x43, 0x39, 0x57, 0x44, 0x36, 0x68, 0x52, 0x64, 0x4a, 0x68, 0x30, 0x71, 0x74, 0x53, 0x4b, 0x44, 0x34, 0x62, 0x50, 0x48, 0x58, 0x6c, 0x6e, 0x5a, 0x5a, 0x39, 0x64, 0x69, 0x67, 0x59, 0x67, 0x55, 0x79, 0x32, 0x48, 0x45, 0x30, 0x58, 0x6a, 0x71, 0x4e, 0x4f, 0x38, 0x74, 0x76, 0x5a, 0x6b, 0x75, 0x46, 0x68, 0x66, 0x75, 0x68, 0x59, 0x53, 0x74, 0x58, 0x37, 0x6f, 0x4c, 0x51, 0x38, 0x57, 0x0d, 0x0a, 0x62, 0x6e, 0x71, 0x66, 0x65, 0x77, 0x77, 0x6d, 0x76, 0x44, 0x33, 0x73, 0x74, 0x4d, 0x38, 0x32, 0x70, 0x45, 0x76, 0x69, 0x4e, 0x6d, 0x39, 0x30, 0x4e, 0x55, 0x64, 0x48, 0x4c, 0x79, 0x77, 0x36, 0x4b, 0x34, 0x38, 0x39, 0x37, 0x46, 0x4d, 0x52, 0x61, 0x53, 0x52, 0x61, 0x4c, 0x6f, 0x4e, 0x55, 0x78, 0x6d, 0x43, 0x39, 0x53, 0x6a, 0x35, 0x37, 0x35, 0x46, 0x69, 0x5a, 0x6c, 0x42, 0x6d, 0x37, 0x0d, 0x0a, 0x39, 0x57, 0x6e, 0x32, 0x4d, 0x76, 0x6e, 0x59, 0x41, 0x71, 0x58, 0x66, 0x6a, 0x70, 0x66, 0x47, 0x41, 0x49, 0x39, 0x58, 0x46, 0x35, 0x2f, 0x42, 0x54, 0x57, 0x34, 0x45, 0x42, 0x76, 0x68, 0x55, 0x63, 0x77, 0x52, 0x46, 0x64, 0x31, 0x79, 0x6c, 0x58, 0x34, 0x7a, 0x47, 0x46, 0x56, 0x4a, 0x42, 0x35, 0x30, 0x65, 0x59, 0x4e, 0x33, 0x50, 0x54, 0x70, 0x30, 0x5a, 0x4e, 0x2f, 0x47, 0x54, 0x52, 0x0d, 0x0a, 0x4f, 0x47, 0x34, 0x70, 0x6f, 0x48, 0x2f, 0x56, 0x67, 0x66, 0x4e, 0x47, 0x4a, 0x41, 0x48, 0x32, 0x48, 0x66, 0x46, 0x59, 0x56, 0x54, 0x57, 0x4b, 0x4b, 0x71, 0x77, 0x48, 0x78, 0x6b, 0x42, 0x4d, 0x78, 0x61, 0x65, 0x71, 0x4f, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x43, 0x77, 0x55, 0x41, 0x0d, 0x0a, 0x41, 0x34, 0x49, 0x42, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x67, 0x30, 0x79, 0x36, 0x36, 0x4f, 0x4a, 0x49, 0x6d, 0x31, 0x59, 0x52, 0x37, 0x66, 0x31, 0x41, 0x46, 0x79, 0x6f, 0x4b, 0x76, 0x37, 0x6d, 0x47, 0x69, 0x7a, 0x47, 0x78, 0x72, 0x2b, 0x78, 0x51, 0x39, 0x50, 0x64, 0x55, 0x51, 0x55, 0x2b, 0x59, 0x35, 0x4d, 0x39, 0x6f, 0x52, 0x56, 0x51, 0x63, 0x30, 0x37, 0x42, 0x6b, 0x57, 0x6f, 0x2b, 0x0d, 0x0a, 0x4f, 0x2b, 0x51, 0x6e, 0x76, 0x6a, 0x62, 0x76, 0x4a, 0x6c, 0x48, 0x73, 0x55, 0x77, 0x58, 0x49, 0x4d, 0x72, 0x38, 0x2f, 0x66, 0x63, 0x71, 0x66, 0x45, 0x36, 0x38, 0x36, 0x61, 0x43, 0x4e, 0x37, 0x39, 0x4b, 0x6f, 0x4b, 0x64, 0x4d, 0x6d, 0x4c, 0x48, 0x33, 0x46, 0x2b, 0x69, 0x38, 0x34, 0x51, 0x66, 0x44, 0x4a, 0x6f, 0x69, 0x4f, 0x6d, 0x58, 0x33, 0x6a, 0x2b, 0x46, 0x69, 0x48, 0x30, 0x67, 0x0d, 0x0a, 0x30, 0x64, 0x4d, 0x4e, 0x44, 0x5a, 0x76, 0x30, 0x45, 0x6b, 0x47, 0x61, 0x50, 0x62, 0x66, 0x34, 0x37, 0x48, 0x39, 0x51, 0x62, 0x52, 0x66, 0x71, 0x64, 0x56, 0x79, 0x4d, 0x72, 0x44, 0x7a, 0x42, 0x71, 0x6c, 0x51, 0x59, 0x6e, 0x63, 0x71, 0x74, 0x74, 0x6e, 0x48, 0x42, 0x66, 0x57, 0x75, 0x42, 0x37, 0x64, 0x53, 0x59, 0x6c, 0x55, 0x31, 0x37, 0x41, 0x6d, 0x2b, 0x63, 0x79, 0x35, 0x54, 0x43, 0x0d, 0x0a, 0x44, 0x78, 0x49, 0x6a, 0x39, 0x57, 0x31, 0x63, 0x79, 0x6b, 0x33, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x53, 0x4a, 0x31, 0x71, 0x64, 0x77, 0x6a, 0x68, 0x6a, 0x36, 0x59, 0x61, 0x38, 0x78, 0x72, 0x69, 0x4b, 0x35, 0x48, 0x69, 0x31, 0x58, 0x4a, 0x62, 0x6c, 0x30, 0x75, 0x38, 0x31, 0x59, 0x36, 0x52, 0x48, 0x43, 0x59, 0x69, 0x4b, 0x39, 0x55, 0x6d, 0x37, 0x75, 0x30, 0x62, 0x4a, 0x77, 0x53, 0x41, 0x0d, 0x0a, 0x68, 0x39, 0x57, 0x39, 0x7a, 0x6a, 0x4d, 0x6f, 0x54, 0x37, 0x4e, 0x76, 0x42, 0x4e, 0x69, 0x44, 0x70, 0x49, 0x4c, 0x55, 0x36, 0x33, 0x46, 0x7a, 0x68, 0x61, 0x63, 0x2f, 0x58, 0x36, 0x50, 0x43, 0x77, 0x43, 0x51, 0x4a, 0x47, 0x2b, 0x42, 0x63, 0x35, 0x6a, 0x75, 0x30, 0x39, 0x38, 0x34, 0x2b, 0x44, 0x59, 0x55, 0x57, 0x58, 0x71, 0x65, 0x71, 0x70, 0x2b, 0x49, 0x4e, 0x37, 0x63, 0x67, 0x51, 0x0d, 0x0a, 0x75, 0x66, 0x55, 0x36, 0x6d, 0x73, 0x4b, 0x58, 0x59, 0x2b, 0x67, 0x6c, 0x6b, 0x69, 0x73, 0x74, 0x34, 0x47, 0x2f, 0x32, 0x6a, 0x76, 0x65, 0x43, 0x4c, 0x41, 0x34, 0x35, 0x0d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0d, 0x0a};\nconst size_t certificate_len = sizeof(certificate);\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\Examples\\SimpleHttps\\private_key.h",
        "content": "const uint8_t private_key[] = {0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0d, 0x0a, 0x4d, 0x49, 0x49, 0x45, 0x76, 0x51, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x53, 0x43, 0x42, 0x4b, 0x63, 0x77, 0x67, 0x67, 0x53, 0x6a, 0x41, 0x67, 0x45, 0x41, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x44, 0x4e, 0x41, 0x52, 0x63, 0x4b, 0x4a, 0x38, 0x54, 0x4e, 0x78, 0x43, 0x57, 0x2b, 0x0d, 0x0a, 0x30, 0x69, 0x56, 0x68, 0x6b, 0x66, 0x67, 0x4b, 0x61, 0x6c, 0x2f, 0x4e, 0x73, 0x57, 0x6c, 0x42, 0x79, 0x61, 0x73, 0x68, 0x44, 0x53, 0x33, 0x4c, 0x7a, 0x4b, 0x68, 0x6e, 0x79, 0x70, 0x55, 0x4f, 0x6a, 0x35, 0x38, 0x44, 0x59, 0x33, 0x78, 0x54, 0x41, 0x77, 0x63, 0x42, 0x4c, 0x53, 0x49, 0x2b, 0x48, 0x71, 0x46, 0x5a, 0x76, 0x2f, 0x47, 0x68, 0x54, 0x79, 0x65, 0x51, 0x4d, 0x41, 0x66, 0x34, 0x0d, 0x0a, 0x6a, 0x76, 0x6f, 0x4d, 0x6e, 0x35, 0x7a, 0x67, 0x6b, 0x4c, 0x30, 0x52, 0x4a, 0x4a, 0x5a, 0x4c, 0x42, 0x53, 0x47, 0x4f, 0x77, 0x33, 0x71, 0x55, 0x4e, 0x45, 0x2b, 0x76, 0x33, 0x2f, 0x45, 0x79, 0x54, 0x39, 0x78, 0x73, 0x4c, 0x31, 0x59, 0x50, 0x71, 0x46, 0x46, 0x30, 0x6d, 0x48, 0x53, 0x71, 0x31, 0x49, 0x6f, 0x50, 0x68, 0x73, 0x38, 0x64, 0x65, 0x57, 0x64, 0x6c, 0x6e, 0x31, 0x32, 0x4b, 0x0d, 0x0a, 0x42, 0x69, 0x42, 0x54, 0x4c, 0x59, 0x63, 0x54, 0x52, 0x65, 0x4f, 0x6f, 0x30, 0x37, 0x79, 0x32, 0x39, 0x6d, 0x53, 0x34, 0x57, 0x46, 0x2b, 0x36, 0x46, 0x68, 0x4b, 0x31, 0x66, 0x75, 0x67, 0x74, 0x44, 0x78, 0x5a, 0x75, 0x65, 0x70, 0x39, 0x37, 0x44, 0x43, 0x61, 0x38, 0x50, 0x65, 0x79, 0x30, 0x7a, 0x7a, 0x61, 0x6b, 0x53, 0x2b, 0x49, 0x32, 0x62, 0x33, 0x51, 0x31, 0x52, 0x30, 0x63, 0x76, 0x0d, 0x0a, 0x4c, 0x44, 0x6f, 0x72, 0x6a, 0x7a, 0x33, 0x73, 0x55, 0x78, 0x46, 0x70, 0x4a, 0x46, 0x6f, 0x75, 0x67, 0x31, 0x54, 0x47, 0x59, 0x4c, 0x31, 0x4b, 0x50, 0x6e, 0x76, 0x6b, 0x57, 0x4a, 0x6d, 0x55, 0x47, 0x62, 0x76, 0x31, 0x61, 0x66, 0x59, 0x79, 0x2b, 0x64, 0x67, 0x43, 0x70, 0x64, 0x2b, 0x4f, 0x6c, 0x38, 0x59, 0x41, 0x6a, 0x31, 0x63, 0x58, 0x6e, 0x38, 0x46, 0x4e, 0x62, 0x67, 0x51, 0x47, 0x0d, 0x0a, 0x2b, 0x46, 0x52, 0x7a, 0x42, 0x45, 0x56, 0x33, 0x58, 0x4b, 0x56, 0x66, 0x6a, 0x4d, 0x59, 0x56, 0x55, 0x6b, 0x48, 0x6e, 0x52, 0x35, 0x67, 0x33, 0x63, 0x39, 0x4f, 0x6e, 0x52, 0x6b, 0x33, 0x38, 0x5a, 0x4e, 0x45, 0x34, 0x62, 0x69, 0x6d, 0x67, 0x66, 0x39, 0x57, 0x42, 0x38, 0x30, 0x59, 0x6b, 0x41, 0x66, 0x59, 0x64, 0x38, 0x56, 0x68, 0x56, 0x4e, 0x59, 0x6f, 0x71, 0x72, 0x41, 0x66, 0x47, 0x0d, 0x0a, 0x51, 0x45, 0x7a, 0x46, 0x70, 0x36, 0x6f, 0x35, 0x41, 0x67, 0x4d, 0x42, 0x41, 0x41, 0x45, 0x43, 0x67, 0x67, 0x45, 0x41, 0x45, 0x32, 0x6c, 0x47, 0x67, 0x72, 0x59, 0x6f, 0x53, 0x75, 0x6d, 0x48, 0x50, 0x32, 0x33, 0x4c, 0x6a, 0x31, 0x55, 0x51, 0x66, 0x50, 0x2f, 0x38, 0x69, 0x56, 0x41, 0x43, 0x72, 0x50, 0x47, 0x4a, 0x44, 0x43, 0x79, 0x67, 0x79, 0x50, 0x72, 0x63, 0x65, 0x56, 0x4e, 0x7a, 0x0d, 0x0a, 0x30, 0x4c, 0x69, 0x6c, 0x73, 0x46, 0x37, 0x7a, 0x72, 0x7a, 0x4b, 0x4b, 0x72, 0x38, 0x42, 0x54, 0x7a, 0x54, 0x6a, 0x2b, 0x51, 0x79, 0x37, 0x4c, 0x46, 0x4f, 0x43, 0x58, 0x57, 0x4f, 0x35, 0x4c, 0x57, 0x75, 0x78, 0x43, 0x33, 0x66, 0x34, 0x68, 0x44, 0x78, 0x78, 0x31, 0x59, 0x70, 0x47, 0x70, 0x7a, 0x33, 0x6d, 0x78, 0x5a, 0x30, 0x43, 0x34, 0x4d, 0x78, 0x39, 0x4f, 0x36, 0x6c, 0x4c, 0x55, 0x0d, 0x0a, 0x6c, 0x6c, 0x52, 0x38, 0x68, 0x52, 0x76, 0x6f, 0x56, 0x4c, 0x77, 0x31, 0x31, 0x6b, 0x6e, 0x33, 0x52, 0x68, 0x4f, 0x77, 0x37, 0x4f, 0x35, 0x78, 0x58, 0x78, 0x4f, 0x58, 0x53, 0x45, 0x61, 0x53, 0x52, 0x31, 0x62, 0x30, 0x4b, 0x5a, 0x77, 0x57, 0x66, 0x61, 0x73, 0x77, 0x39, 0x74, 0x50, 0x78, 0x75, 0x77, 0x74, 0x53, 0x6c, 0x79, 0x66, 0x37, 0x44, 0x48, 0x59, 0x35, 0x6d, 0x45, 0x69, 0x37, 0x0d, 0x0a, 0x2b, 0x68, 0x79, 0x59, 0x6a, 0x48, 0x78, 0x59, 0x2f, 0x45, 0x35, 0x30, 0x55, 0x71, 0x57, 0x77, 0x6d, 0x51, 0x49, 0x4a, 0x73, 0x64, 0x39, 0x75, 0x2f, 0x42, 0x43, 0x78, 0x33, 0x63, 0x54, 0x30, 0x39, 0x66, 0x7a, 0x6f, 0x55, 0x6c, 0x42, 0x6b, 0x76, 0x45, 0x38, 0x6e, 0x31, 0x6f, 0x77, 0x69, 0x6c, 0x57, 0x67, 0x75, 0x39, 0x2b, 0x76, 0x31, 0x70, 0x79, 0x6d, 0x53, 0x36, 0x34, 0x30, 0x79, 0x0d, 0x0a, 0x59, 0x47, 0x62, 0x2f, 0x68, 0x76, 0x78, 0x37, 0x34, 0x45, 0x36, 0x54, 0x57, 0x53, 0x73, 0x64, 0x46, 0x53, 0x74, 0x50, 0x4c, 0x37, 0x79, 0x72, 0x73, 0x2f, 0x52, 0x54, 0x45, 0x37, 0x6a, 0x79, 0x31, 0x56, 0x68, 0x2b, 0x46, 0x70, 0x65, 0x7a, 0x4e, 0x2f, 0x53, 0x57, 0x2b, 0x32, 0x62, 0x72, 0x6b, 0x44, 0x78, 0x39, 0x33, 0x56, 0x52, 0x73, 0x45, 0x63, 0x63, 0x77, 0x46, 0x56, 0x33, 0x38, 0x0d, 0x0a, 0x45, 0x66, 0x52, 0x31, 0x31, 0x4c, 0x39, 0x72, 0x6b, 0x74, 0x48, 0x35, 0x52, 0x67, 0x34, 0x6e, 0x4c, 0x45, 0x67, 0x56, 0x61, 0x6d, 0x49, 0x76, 0x77, 0x6d, 0x54, 0x66, 0x69, 0x6d, 0x36, 0x33, 0x44, 0x74, 0x66, 0x31, 0x46, 0x6c, 0x6d, 0x4a, 0x51, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x56, 0x61, 0x7a, 0x71, 0x6e, 0x31, 0x48, 0x41, 0x63, 0x35, 0x52, 0x6c, 0x67, 0x46, 0x55, 0x67, 0x70, 0x0d, 0x0a, 0x77, 0x76, 0x4a, 0x70, 0x53, 0x75, 0x57, 0x4d, 0x4e, 0x39, 0x67, 0x35, 0x7a, 0x55, 0x35, 0x53, 0x45, 0x76, 0x72, 0x43, 0x73, 0x75, 0x45, 0x34, 0x51, 0x42, 0x7a, 0x45, 0x5a, 0x31, 0x47, 0x6e, 0x76, 0x78, 0x4e, 0x74, 0x44, 0x50, 0x2f, 0x31, 0x49, 0x4f, 0x32, 0x32, 0x77, 0x62, 0x2f, 0x44, 0x4d, 0x47, 0x2f, 0x55, 0x71, 0x31, 0x4c, 0x68, 0x5a, 0x57, 0x2b, 0x57, 0x59, 0x6b, 0x6c, 0x76, 0x0d, 0x0a, 0x6b, 0x74, 0x30, 0x7a, 0x57, 0x59, 0x73, 0x5a, 0x65, 0x35, 0x6e, 0x6f, 0x48, 0x48, 0x44, 0x49, 0x38, 0x51, 0x6c, 0x58, 0x46, 0x31, 0x6d, 0x31, 0x33, 0x41, 0x34, 0x41, 0x58, 0x34, 0x75, 0x65, 0x31, 0x4b, 0x6a, 0x70, 0x4b, 0x49, 0x49, 0x79, 0x57, 0x4a, 0x4c, 0x6c, 0x67, 0x6e, 0x4f, 0x4c, 0x67, 0x59, 0x35, 0x47, 0x37, 0x43, 0x61, 0x6b, 0x2b, 0x79, 0x64, 0x59, 0x71, 0x41, 0x51, 0x6a, 0x0d, 0x0a, 0x4a, 0x70, 0x39, 0x64, 0x35, 0x52, 0x79, 0x76, 0x50, 0x76, 0x52, 0x6c, 0x78, 0x62, 0x4f, 0x65, 0x4d, 0x5a, 0x35, 0x79, 0x64, 0x4e, 0x6d, 0x71, 0x63, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x31, 0x36, 0x42, 0x47, 0x71, 0x70, 0x4b, 0x58, 0x46, 0x43, 0x67, 0x53, 0x6e, 0x64, 0x63, 0x35, 0x41, 0x50, 0x71, 0x76, 0x64, 0x36, 0x70, 0x44, 0x36, 0x50, 0x77, 0x72, 0x53, 0x37, 0x44, 0x4b, 0x75, 0x0d, 0x0a, 0x75, 0x38, 0x6e, 0x6f, 0x4e, 0x57, 0x31, 0x6c, 0x61, 0x67, 0x75, 0x74, 0x2f, 0x48, 0x74, 0x57, 0x4f, 0x30, 0x4c, 0x43, 0x45, 0x32, 0x57, 0x4c, 0x4b, 0x61, 0x67, 0x6b, 0x58, 0x54, 0x76, 0x2f, 0x75, 0x4c, 0x46, 0x61, 0x53, 0x4f, 0x6e, 0x35, 0x32, 0x69, 0x70, 0x71, 0x35, 0x41, 0x54, 0x4e, 0x33, 0x58, 0x6c, 0x41, 0x35, 0x2f, 0x39, 0x41, 0x58, 0x6b, 0x6b, 0x58, 0x4e, 0x75, 0x4d, 0x74, 0x0d, 0x0a, 0x51, 0x4f, 0x67, 0x50, 0x30, 0x4d, 0x74, 0x59, 0x52, 0x32, 0x7a, 0x33, 0x39, 0x69, 0x74, 0x6d, 0x43, 0x4d, 0x66, 0x7a, 0x36, 0x47, 0x65, 0x6e, 0x4b, 0x73, 0x45, 0x57, 0x6a, 0x4c, 0x4b, 0x46, 0x77, 0x63, 0x42, 0x2f, 0x75, 0x6e, 0x70, 0x30, 0x43, 0x41, 0x58, 0x4b, 0x62, 0x59, 0x42, 0x78, 0x69, 0x69, 0x48, 0x63, 0x41, 0x4e, 0x4d, 0x57, 0x51, 0x76, 0x66, 0x51, 0x2f, 0x4d, 0x59, 0x46, 0x0d, 0x0a, 0x65, 0x64, 0x75, 0x68, 0x71, 0x56, 0x38, 0x51, 0x53, 0x51, 0x4b, 0x42, 0x67, 0x45, 0x34, 0x6d, 0x43, 0x37, 0x35, 0x30, 0x2f, 0x66, 0x43, 0x32, 0x75, 0x34, 0x6f, 0x42, 0x67, 0x51, 0x45, 0x35, 0x7a, 0x34, 0x5a, 0x61, 0x31, 0x4a, 0x39, 0x35, 0x75, 0x34, 0x57, 0x2b, 0x39, 0x68, 0x54, 0x37, 0x75, 0x6a, 0x4d, 0x64, 0x53, 0x58, 0x64, 0x4e, 0x6b, 0x72, 0x73, 0x67, 0x6b, 0x6a, 0x66, 0x34, 0x0d, 0x0a, 0x73, 0x65, 0x5a, 0x57, 0x77, 0x6b, 0x74, 0x43, 0x6d, 0x59, 0x6b, 0x34, 0x66, 0x54, 0x32, 0x2b, 0x4f, 0x4e, 0x55, 0x4a, 0x50, 0x7a, 0x6f, 0x6c, 0x36, 0x4b, 0x79, 0x4b, 0x70, 0x52, 0x56, 0x6b, 0x45, 0x2f, 0x65, 0x2f, 0x72, 0x44, 0x33, 0x53, 0x6b, 0x74, 0x4c, 0x35, 0x78, 0x78, 0x72, 0x74, 0x6d, 0x46, 0x76, 0x35, 0x77, 0x76, 0x48, 0x69, 0x2b, 0x49, 0x57, 0x4f, 0x64, 0x78, 0x50, 0x63, 0x0d, 0x0a, 0x44, 0x31, 0x59, 0x42, 0x62, 0x56, 0x74, 0x2b, 0x4c, 0x35, 0x77, 0x33, 0x48, 0x70, 0x52, 0x52, 0x42, 0x6f, 0x5a, 0x56, 0x35, 0x76, 0x69, 0x32, 0x74, 0x76, 0x75, 0x78, 0x32, 0x6f, 0x48, 0x38, 0x6e, 0x4a, 0x4c, 0x48, 0x57, 0x4b, 0x2b, 0x62, 0x50, 0x2b, 0x63, 0x63, 0x63, 0x39, 0x39, 0x54, 0x6b, 0x41, 0x2b, 0x64, 0x56, 0x69, 0x38, 0x68, 0x41, 0x6f, 0x47, 0x41, 0x4a, 0x6c, 0x76, 0x48, 0x0d, 0x0a, 0x2f, 0x62, 0x56, 0x6e, 0x51, 0x6d, 0x41, 0x34, 0x72, 0x36, 0x4b, 0x5a, 0x78, 0x4c, 0x33, 0x42, 0x38, 0x34, 0x44, 0x32, 0x6b, 0x6f, 0x4b, 0x6f, 0x2f, 0x70, 0x50, 0x6e, 0x71, 0x41, 0x67, 0x56, 0x43, 0x38, 0x72, 0x68, 0x77, 0x4c, 0x4d, 0x56, 0x46, 0x56, 0x50, 0x51, 0x4c, 0x58, 0x68, 0x62, 0x42, 0x6f, 0x6b, 0x65, 0x43, 0x75, 0x49, 0x35, 0x6e, 0x30, 0x71, 0x48, 0x35, 0x48, 0x44, 0x38, 0x0d, 0x0a, 0x41, 0x56, 0x68, 0x6b, 0x58, 0x78, 0x77, 0x67, 0x42, 0x38, 0x4a, 0x2f, 0x32, 0x56, 0x6b, 0x56, 0x35, 0x41, 0x45, 0x4d, 0x65, 0x51, 0x37, 0x38, 0x47, 0x63, 0x6e, 0x76, 0x45, 0x41, 0x30, 0x53, 0x35, 0x66, 0x79, 0x73, 0x36, 0x35, 0x31, 0x67, 0x71, 0x79, 0x46, 0x55, 0x54, 0x62, 0x74, 0x4b, 0x37, 0x59, 0x6f, 0x77, 0x4f, 0x51, 0x78, 0x62, 0x53, 0x46, 0x67, 0x30, 0x4e, 0x4e, 0x63, 0x76, 0x0d, 0x0a, 0x58, 0x76, 0x31, 0x49, 0x77, 0x72, 0x62, 0x4a, 0x71, 0x48, 0x55, 0x43, 0x56, 0x7a, 0x4f, 0x7a, 0x36, 0x6d, 0x79, 0x61, 0x67, 0x4e, 0x74, 0x37, 0x61, 0x72, 0x63, 0x7a, 0x63, 0x49, 0x45, 0x38, 0x75, 0x48, 0x41, 0x43, 0x4b, 0x7a, 0x6b, 0x43, 0x67, 0x59, 0x45, 0x41, 0x6a, 0x61, 0x77, 0x53, 0x58, 0x6d, 0x4d, 0x59, 0x58, 0x4e, 0x65, 0x35, 0x70, 0x2f, 0x30, 0x67, 0x36, 0x57, 0x6c, 0x72, 0x0d, 0x0a, 0x77, 0x31, 0x57, 0x37, 0x43, 0x54, 0x68, 0x35, 0x2b, 0x4e, 0x6b, 0x62, 0x5a, 0x46, 0x2f, 0x64, 0x54, 0x6f, 0x67, 0x61, 0x6c, 0x4c, 0x6d, 0x2f, 0x6c, 0x70, 0x56, 0x37, 0x50, 0x2b, 0x52, 0x4d, 0x47, 0x53, 0x77, 0x66, 0x75, 0x49, 0x37, 0x5a, 0x71, 0x69, 0x72, 0x38, 0x69, 0x45, 0x35, 0x64, 0x2f, 0x78, 0x2b, 0x64, 0x65, 0x39, 0x50, 0x4b, 0x56, 0x4e, 0x4b, 0x5a, 0x77, 0x4d, 0x39, 0x45, 0x0d, 0x0a, 0x4c, 0x77, 0x41, 0x64, 0x5a, 0x79, 0x37, 0x6f, 0x5a, 0x59, 0x36, 0x68, 0x69, 0x69, 0x66, 0x6e, 0x50, 0x6d, 0x74, 0x52, 0x30, 0x35, 0x53, 0x56, 0x79, 0x4b, 0x61, 0x4c, 0x74, 0x44, 0x50, 0x37, 0x4b, 0x76, 0x77, 0x47, 0x41, 0x33, 0x56, 0x56, 0x56, 0x76, 0x69, 0x59, 0x42, 0x67, 0x54, 0x34, 0x74, 0x46, 0x49, 0x6c, 0x4a, 0x70, 0x4d, 0x52, 0x32, 0x6a, 0x4c, 0x6a, 0x48, 0x59, 0x55, 0x4e, 0x0d, 0x0a, 0x54, 0x2b, 0x39, 0x50, 0x47, 0x38, 0x73, 0x44, 0x76, 0x68, 0x46, 0x2f, 0x39, 0x4b, 0x6a, 0x39, 0x71, 0x72, 0x52, 0x39, 0x78, 0x49, 0x6f, 0x3d, 0x0d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0d, 0x0a};\nconst size_t private_key_len = sizeof(private_key);\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Context.h",
        "content": "/**\n * @file Context.h\n * @brief Context class definition and its associated functionalities.\n * \n * This file contains the Context class which is used for managing various components\n * like configurations, logging, error handling, validation, and more.\n * \n * @author hadalipoor@gmail.com\n */\n\n#ifndef CONTEXT_H\n#define CONTEXT_H\n\n#include \"Config/IConfigs.h\"\n#include \"Security/ISecurity.h\"\n#include \"Database/Controllers/IController.h\"\n#include \"Logging/ILog.h\"\n#include \"ErrorHandler/IErrorHandler.h\"\n#include \"Validation/IValidation.h\"\n#include \"Clock/IClock.h\"\n#include \"FileManager/IEBPFile.h\"\n#include \"NetworkManager/INetwork.h\"\n#include \"ModuleManager/IModules.h\"\n#include \"SystemMonitor/ISystemMonitor.h\"\n\n/**\n * @brief Static variable to store storage type.\n */\nstatic StorageType storageType;\n\n/**\n * @brief Static variable to enable/disable HTTPS support.\n */\nstatic bool _https_enabled = false;\n\n/**\n * @class Context\n * @brief The Context class provides a way to access different system modules.\n * \n * It acts as a central point to manage configurations, logger, error handlers, validations,\n * clock, file system, network, modules, system monitoring, and security.\n */\nclass Context {\npublic:\n    /**\n     * @brief Constructor for Context.\n     */\n    Context() {}\n\n    /**\n     * @brief Get the Config object.\n     * \n     * @return IConfigs* Pointer to the configuration interface.\n     */\n    IConfigs* getConfig() { return _config; }\n\n    /**\n     * @brief Set the Config object.\n     * \n     * @param config Pointer to the configuration interface.\n     */\n    void setConfig(IConfigs* config) { _config = config; }\n    \n    /**\n     * @brief Get the Logger object.\n     * \n     * @return ILog* Pointer to the logging interface.\n     */\n    ILog* getLogger() { return logger; }\n\n    /**\n     * @brief Set the Logger object.\n     * \n     * @param log Pointer to the logging interface.\n     */\n    void setLogger(ILog* log) { logger = log; }\n\n    /**\n     * @brief Get the Error Handler object.\n     * \n     * @return IErrorHandler* Pointer to the error handler interface.\n     */\n    IErrorHandler* getErrorHandler() { return errorHandler; }\n\n    /**\n     * @brief Set the Error Handler object.\n     * \n     * @param handler Pointer to the error handler interface.\n     */\n    void setErrorHandler(IErrorHandler* handler) { errorHandler = handler; }\n\n    /**\n     * @brief Get the Validation object.\n     * \n     * @return IValidation* Pointer to the validation interface.\n     */\n    IValidation* getValidation() { return validation; }\n\n    /**\n     * @brief Set the Validation object.\n     * \n     * @param val Pointer to the validation interface.\n     */\n    void setValidation(IValidation* val) { validation = val; }\n\n    /**\n     * @brief Get the Clock object.\n     * \n     * @return IClock* Pointer to the clock interface.\n     */\n    IClock* getClock() { return _clock; }\n\n    /**\n     * @brief Set the Clock object.\n     * \n     * @param clk Pointer to the clock interface.\n     */\n    void setClock(IClock* clk) { _clock = clk; }\n\n    /**\n     * @brief Get the LittleFS object.\n     * \n     * @return IEBPFile* Pointer to the LittleFS file system interface.\n     */\n    IEBPFile* getLittleFS() { return ebpLittleFS; }\n\n    /**\n     * @brief Set the LittleFS object.\n     * \n     * @param ebpsp Pointer to the LittleFS file system interface.\n     */\n    void setLittleFS(IEBPFile* ebpsp) { ebpLittleFS = ebpsp; }\n    \n    /**\n     * @brief Get the SD File System object.\n     * \n     * @return IEBPFile* Pointer to the SD file system interface.\n     */\n    IEBPFile* getSD() { return ebpSD; }\n\n    /**\n     * @brief Set the SD File System object.\n     * \n     * @param ebpsd Pointer to the SD file system interface.\n     */\n    void setSD(IEBPFile* ebpsd) { ebpSD = ebpsd; }\n\n    /**\n     * @brief Get the Network object.\n     * \n     * @return INetwork* Pointer to the network interface.\n     */\n    INetwork* getNetwork(){ return _network; }\n\n    /**\n     * @brief Set the Network object.\n     * \n     * @param network Pointer to the network interface.\n     */\n    void setNetwork(INetwork* network) { _network = network; }\n\n    /**\n     * @brief Get the Modules object.\n     * \n     * @return IModules* Pointer to the modules interface.\n     */\n    IModules* getModules(){ return _modules; }\n\n    /**\n     * @brief Set the Modules object.\n     * \n     * @param modules Pointer to the modules interface.\n     */\n    void setModules(IModules* modules) { _modules = modules; }\n\n    /**\n     * @brief Get the System Monitor object.\n     * \n     * @return ISystemMonitor* Pointer to the system monitor interface.\n     */\n    ISystemMonitor* getSystemMonitor(){ return _systemMonitor; }\n\n    /**\n     * @brief Set the System Monitor object.\n     * \n     * @param systemMonitor Pointer to the system monitor interface.\n     */\n    void setSystemMonitor(ISystemMonitor* systemMonitor) { _systemMonitor = systemMonitor; }\n\n    /**\n     * @brief Get the Security object.\n     * \n     * @return ISecurity* Pointer to the security interface.\n     */\n    ISecurity* getSecurity(){ return _security; }\n\n    /**\n     * @brief Set the Security object.\n     * \n     * @param security Pointer to the security interface.\n     */\n    void setSecurity(ISecurity* security) { _security = security; }\n\nprivate:\n    IConfigs* _config;\n    ILog* logger;\n    IErrorHandler* errorHandler;\n    IValidation* validation;\n    IClock* _clock;\n    IEBPFile* ebpLittleFS;\n    IEBPFile* ebpSD;\n    INetwork* _network;\n    IModules* _modules;\n    ISecurity* _security;\n    ISystemMonitor* _systemMonitor;\n};\n\n#endif // CONTEXT_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\DatabaseSeeder.h",
        "content": "#ifndef DATABASESEEDER_H\n#define DATABASESEEDER_H\n\n#include \"Context.h\"\n#include \"Database/Controllers/Security/PermissionController.h\"\n#include \"Database/Controllers/Security/RoleController.h\"\n#include \"Database/Controllers/Security/RolePermissionController.h\"\n#include \"Database/Controllers/Security/UserController.h\"\n\n#include \"Security/AuthorizationPermissions.h\"\n\nclass DatabaseSeeder\n{\nprivate:\n    Context* context;\npublic:\n    DatabaseSeeder(Context* context);\n    ~DatabaseSeeder();\n    void seed();\n};\n\nDatabaseSeeder::DatabaseSeeder(Context* context): context(context)\n{\n\n}\n\nDatabaseSeeder::~DatabaseSeeder()\n{\n}\n\nvoid DatabaseSeeder::seed()\n{\n    long start_millis = millis();\n\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USER_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USER_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USER_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USER_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLE_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLE_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLE_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLE_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::PERMISSION_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::PERMISSION_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::PERMISSION_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::PERMISSION_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLEPERMISSION_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLEPERMISSION_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLEPERMISSION_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ROLEPERMISSION_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USERRESETPASS_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USERRESETPASS_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USERRESETPASS_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::USERRESETPASS_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTION_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTION_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTION_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTION_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTIONTITLE_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTIONTITLE_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTIONTITLE_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::SECURITYQUESTIONTITLE_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::LOGINATTEMPT_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::LOGINATTEMPT_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::LOGINATTEMPT_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::LOGINATTEMPT_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTLOCKOUT_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTLOCKOUT_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTLOCKOUT_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTLOCKOUT_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TWOFACTORAUTH_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TWOFACTORAUTH_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TWOFACTORAUTH_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TWOFACTORAUTH_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTACTIVITYLOG_CREATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTACTIVITYLOG_UPDATE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTACTIVITYLOG_DELETE, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::ACCOUNTACTIVITYLOG_GET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_LOGIN, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_PASSWORDRESET, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_PASSWORDRESETCONFIRM, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_TWOFACTORAUTH, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_TWOFACTORAUTHCONFIRM, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_ACCOUNTLOCK, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_ACCOUNTUNLOCK, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AUTHENTICATION_SECURITYQUESTIONANSWER, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TESTREQUESTS_ADDDATA, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TESTREQUESTS_GETDATA, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::TESTREQUESTS_PUBLICREQUEST, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::GetData, \"Security Permissions\");\n    context->getSecurity()->addPermissionForAdmin(AuthorizationPermissions::AddData, \"Security Permissions\");\n\n    long passed_millis = millis() - start_millis;\n    \n    Serial.print(\"Seeding System Database finished in \");Serial.print(passed_millis);Serial.println(\" miliseconds.\");\n}\n\n#endif //DATABASESEEDER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\EBPInterfaces.h",
        "content": "#ifndef EBPINTERFACES_H\n#define EBPINTERFACES_H\n\n#include \"Clock/IClock.h\"\n#include \"Config/IConfig.h\"\n#include \"Database/Controllers/IController.h\"\n#include \"ErrorHandler/IErrorHandler.h\"\n#include \"FileManager/IEBPFile.h\"\n#include \"Logging/ILog.h\"\n#include \"ModuleManager/IModules.h\"\n#include \"NetworkManager/INetwork.h\"\n#include \"SystemMonitor/ISystemMonitor.h\"\n#include \"Database/Entities/Entity.h\"\n\n#endif //EBPINTERFACES_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\OStad.h",
        "content": "#ifndef OSTAD_H\n#define OSTAD_H\n\n#include <Arduino.h>\n#include \"Context.h\"\n#include \"Config/Configs.h\"\n#include \"Logging/Log.h\"\n#include \"ErrorHandler/ErrorHandler.h\"\n#include \"Validation/Validation.h\"\n#ifndef OSTAD_NETWORK_DISABLE\n#include \"NetworkManager/Network.h\"\n#include \"Security/Security.h\"\n#endif\n#include \"Clock/Clock.h\"\n#include \"FileManager/EBPFile.h\"\n#ifndef OSTAD_MODULES_DISABLE\n#include <PCF8574.h>\n#include \"ModuleManager/Modules.h\"\n#endif\n#include \"SystemMonitor/SystemMonitor.h\"\n#include \"DatabaseSeeder.h\"\n\nclass OStad\n{\nprivate:\n    Context* context;\n    Log* logger;\n    Configs* configs;\n    ErrorHandler* errorHandler;\n    Validation* validation;\n    Clock* _clock;\n    EBPFile* ebpLittleFS;\n    EBPFile* ebpSD;\n#ifndef OSTAD_MODULES_DISABLE\n    Modules* modules;\n#endif\n    SystemMonitor* systemMonitor;\n#ifndef OSTAD_NETWORK_DISABLE\n    Network* network;\n    Security* security;\n    CertificateData _certificateData;\n#endif\n    void initialize();\n\n\npublic:\n    OStad(StorageType storageType);\n#ifndef OSTAD_NETWORK_DISABLE\n    OStad(StorageType storageType, CertificateData certificateDate);\n#endif\n    ~OStad();\n\n    void update();\n    void begin();\n    Context* getContext();\n    DatabaseSeeder* dbSeeder;\n};\n\n#ifndef OSTAD_NETWORK_DISABLE\nOStad::OStad(StorageType _storageType ,CertificateData certificateData) :  _certificateData(certificateData)\n{\n    _https_enabled = true;\n    storageType = _storageType;\n    initialize();\n}\n#endif\n\nOStad::OStad(StorageType _storageType)\n{\n    storageType = _storageType;\n    initialize();\n}\n\nOStad::~OStad()\n{\n}\n\nContext* OStad::getContext()\n{\n    return context;\n}\n\nvoid OStad::initialize() {\n    context = new Context();\n    errorHandler = new ErrorHandler();\n    validation = new Validation();\n    configs = new Configs(context);\n    logger = new Log(context);\n    _clock = new Clock(context);\n    ebpLittleFS = new EBPFile(context, StorageType::SPIFFS_TYPE);\n    ebpSD = new EBPFile(context, StorageType::SD_TYPE);\n#ifndef OSTAD_NETWORK_DISABLE\n    if (_https_enabled)\n    {\n        network = new Network(context, _certificateData);\n    }\n    else\n    {\n        network = new Network(context);\n    }\n    security = new Security(context);\n#endif\n#ifndef OSTAD_MODULES_DISABLE\n    modules = new Modules(context);\n#endif\n    systemMonitor = new SystemMonitor();\n    \n\n    context->setConfig(configs);\n    context->setLogger(logger);\n    context->setErrorHandler(errorHandler);\n    context->setValidation(validation);\n    context->setClock(_clock);\n    context->setLittleFS(ebpLittleFS);\n    context->setSD(ebpSD);\n#ifndef OSTAD_NETWORK_DISABLE\n    context->setNetwork(network);\n    context->setSecurity(security);\n#endif\n#ifndef OSTAD_MODULES_DISABLE\n    context->setModules(modules);\n#endif\n    context->setSystemMonitor(systemMonitor);\n    \n    ebpLittleFS->createDirectory(\"/db/\");\n    \n    configs->initialize();\n    _clock->initialize();\n    logger->initialize();\n#ifndef OSTAD_MODULES_DISABLE\n    modules->initialize();\n#endif\n    \n#ifndef OSTAD_NETWORK_DISABLE\n    network->initialize();\n    _clock->syncTimeWithServer();\n    security->initialize();\n#endif\n    \n    // logger->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Seeding Database ...\");\n    // dbSeeder = new DatabaseSeeder(context);\n    // dbSeeder->seed();\n    // logger->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Database Seed.\");\n\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"OStad is Loaded.\");\n\n}    \n\nvoid OStad::begin()\n{\n#ifndef OSTAD_NETWORK_DISABLE\n    network->begin();\n#endif\n}\n\nvoid OStad::update() {\n#ifndef OSTAD_NETWORK_DISABLE\n    network->update();\n#endif\n}\n\n#endif // OSTAD_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\AccountManager\\AccountManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\BatteryManager\\BatteryManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\BluetoothManager\\BluetoothManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\CallManager\\CallManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\CameraManager\\CameraManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Clock\\Clock.h",
        "content": "#ifndef CLOCK_H\n#define CLOCK_H\n\n#include <WiFi.h>\n#include \"time.h\"\n\n#include \"JalaliDateTime.h\"\n#include \"IClock.h\"\n#include \"InternalClock.h\"\n#include \"../Config/System/SystemConfigKeys.h\"\n#include \"../Context.h\"\n\nenum class ClockType { DS3231, DS1307, Internal };\n\nclass Clock : public IClock {\nprivate:\n    RTC_DS3231 ds3231;\n    RTC_DS1307 ds1307;\n    ClockType clockType;\n    Context* context;\n    bool _isinitialized;\n    bool _isSynced;\n    InternalClock internalClock;\n\npublic:\n    Clock(Context* context) : context(context), _isinitialized(false), _isSynced(false) {\n        \n    }\n\n    void initialize() override {\n        String clockTypeStr = \"Internal\"; // Replace with dynamic config if needed\n        // Initialize the correct clock based on the type\n        if (clockTypeStr == \"DS3231\") {\n            if (!ds3231.begin()) {\n                return;\n            }\n            clockType = ClockType::DS3231;\n        }\n        else if(clockTypeStr == \"DS1307\"){\n            if (!ds1307.begin()) {\n                context->getErrorHandler()->handleError(ErrorType::CustomError, \"DS1307 initialization failed\");\n                return;\n            }\n            clockType = ClockType::DS1307;\n        }\n        else if(clockTypeStr == \"Internal\"){\n            clockType = ClockType::Internal;\n        }\n        _isinitialized = true;\n    }\n\n    EBPDateTime now() override {\n        if (!_isinitialized) {\n            return EBPDateTime(2000,1,1,0,0,0);\n        }\n        \n        switch (clockType) {\n        case ClockType::DS3231:\n            return EBPDateTime(ds3231.now());\n        case ClockType::DS1307:\n            return EBPDateTime(ds1307.now());\n        case ClockType::Internal:\n            if(!_isSynced) return EBPDateTime(2000,1,1,0,0,0);\n            return EBPDateTime(internalClock.now());\n        }\n    }\n\n    JalaliDateTime nowJalali() override {\n        // Return the current date and time based on the clock type in Jalali Calendar\n        if (!_isinitialized)\n        {\n            return JalaliDateTime(DateTime(2000,1,1,0,0,0));\n        }\n        JalaliDateTime jalaliDateTime = JalaliDateTime();\n        switch (clockType) {\n        case ClockType::DS3231:\n            jalaliDateTime.ConvertToJalali(ds3231.now());\n            return jalaliDateTime;\n        case ClockType::DS1307:\n            jalaliDateTime.ConvertToJalali(ds1307.now());\n            return jalaliDateTime;\n        }\n    }\n\n    void adjust(const EBPDateTime& dt) override {\n        // Set the current date and time based on the clock type\n        \n        switch (clockType) {\n        case ClockType::DS3231:\n            ds3231.adjust(dt);\n            break;\n        case ClockType::DS1307:\n            ds1307.adjust(dt);\n            break;\n        }\n    }\n\n    void syncTimeWithServer() override {\n        context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_CLOCK, \"Clock is Syncing with NTP ...\");\n        if(clockType == ClockType::Internal){\n            if(internalClock.synchronize_ntp()) _isSynced = true;\n        } else {\n\n            configTime(0, 0, \"pool.ntp.org\"); // UTC\n\n            time_t now = 0;\n            struct tm timeinfo = {0};\n            int retry = 0;\n            const int retry_count = 10;\n            while(timeinfo.tm_year < (2016 - 2000) && ++retry < retry_count) {\n                delay(1000);\n                time(&now);\n                localtime_r(&now, &timeinfo);\n            }\n\n            if (retry < retry_count) {\n                DateTime dt(timeinfo.tm_year + 2000, timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);\n                adjust(dt);\n                context->getLogger()->log(LogLevel::INFO_LEVEL, \"Time Sync\", \"Time synchronized with NTP server\");\n            } else {\n                context->getErrorHandler()->handleError(ErrorType::CustomError, \"Failed to get time from NTP server\");\n            }\n        }\n        context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_CLOCK, \"Clock Synced with NTP.\");\n\n    }\n};\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Clock\\EBPDateTime.h",
        "content": "#ifndef EBPDATETIME_H\n#define EBPDATETIME_H\n\n#include <RTClib.h>\n#include \"JalaliDateTime.h\"\n\nclass EBPDateTime : public DateTime {\npublic:\n    EBPDateTime();\n    EBPDateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour = 0, uint8_t min = 0, uint8_t sec = 0);\n    EBPDateTime(const DateTime& dt);\n    EBPDateTime(String datestring);\n\n    bool isNull(); \n    bool isDateTimeStringValid(String strDateTime); \n    void fromString(String strDateTime);\n    String toDateTimeString();\n    String toDateString();\n    String toTimeString();\n    TimeSpan getTimeSpan(EBPDateTime _dateTime); \n    bool isInSameDate(EBPDateTime _dateTime);\n    bool isInSameDateTime(EBPDateTime _dateTime);\n    JalaliDateTime getJalaliDateTime();\n    void fromJalaliDateTime(JalaliDateTime jalaliDateTime);\n    void fromJalaliDateTime(int year, int month, int day, int hour = 0, int minute = 0, int second = 0);\n    void addToDateTime(int add_year, int add_month, int add_day, int add_hour, int add_minute, int add_second);\n    static const EBPDateTime nullDateTime();\n};\n\nEBPDateTime::EBPDateTime() : DateTime(2000, 1, 1, 0, 0, 0) {}\n\nEBPDateTime::EBPDateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec)\n    : DateTime(year, month, day, hour, min, sec) {}\n\nEBPDateTime::EBPDateTime(const DateTime& dt) : DateTime(dt) {}\n\nEBPDateTime::EBPDateTime(String datestring) \n{\n    fromString(datestring);\n}\n\nbool EBPDateTime::isNull() {\n    return (year() == 2000 && month() == 1 && day() == 1 && hour() == 0 && minute() == 0 && second() == 0);\n}\n\nbool EBPDateTime::isDateTimeStringValid(String strDateTime) {\n    // Check string length to match \"YY/MM/DD - HH:MM:SS\" format\n    if (strDateTime.length() != 17) return false;\n\n    // Validate date separators\n    if (strDateTime.charAt(2) != '/' || strDateTime.charAt(5) != '/' || strDateTime.charAt(8) != ' ' || strDateTime.charAt(11) != ':' || strDateTime.charAt(14) != ':')\n        return false;\n\n    // Validate year, month and day\n    int _year = strDateTime.substring(0, 2).toInt();\n    int _month = strDateTime.substring(3, 5).toInt();\n    int _day = strDateTime.substring(6, 8).toInt();\n    if (_year < 1300 || _year > 2000) return false;\n    if (_month < 1 || _month > 12) return false;\n    if (_day < 1 || _day > 31) return false;\n\n    // Validate hour, minute and second\n    int _hour = strDateTime.substring(10, 12).toInt();\n    int _minute = strDateTime.substring(13, 15).toInt();\n    int _second = strDateTime.substring(16, 18).toInt();\n    if (_hour < 0 || _hour > 23) return false;\n    if (_minute < 0 || _minute > 59) return false;\n    if (_second < 0 || _second > 59) return false;\n\n    // If all checks passed, the string is valid\n    return true;\n}\n\nvoid EBPDateTime::fromString(String strDateTime) {\n    // Extract and convert year, month, and day from the string\n    int year = strDateTime.substring(0, 4).toInt();\n    int month = strDateTime.substring(5, 7).toInt();\n    int day = strDateTime.substring(8, 10).toInt();\n\n    // Extract and convert hour, minute, and second from the string\n    int hour = strDateTime.substring(13, 15).toInt();\n    int minute = strDateTime.substring(16, 18).toInt();\n    int second = strDateTime.substring(19, 20).toInt();\n\n    // Assign the newly created DateTime object to this\n    *this = EBPDateTime(year, month, day, hour, minute, second);\n}\n\nString EBPDateTime::toDateTimeString() {\n    String strDateAndTime = String(year()) + \"/\" +\n        (month() < 10 ? \"0\" : \"\") + String(month()) + \"/\" +\n        (day() < 10 ? \"0\" : \"\") + String(day()) + \" - \" +\n        (hour() < 10 ? \"0\" : \"\") + String(hour()) + \":\" +\n        (minute() < 10 ? \"0\" : \"\") + String(minute()) + \":\" +\n        (second() < 10 ? \"0\" : \"\") + String(second());\n  return strDateAndTime;\n}\n\nString EBPDateTime::toDateString() {\n    char buf[11];\n    sprintf(buf, \"%04d/%02d/%02d\", year(), month(), day());\n    return String(buf);\n}\n\nString EBPDateTime::toTimeString() {\n    char buf[9];\n    sprintf(buf, \"%02d:%02d:%02d\", hour(), minute(), second());\n    return String(buf);\n}\n\nTimeSpan EBPDateTime::getTimeSpan(EBPDateTime _dateTime) {\n    return TimeSpan(DateTime::unixtime() - _dateTime.unixtime());\n}\n\nbool EBPDateTime::isInSameDate(EBPDateTime _dateTime) {\n    return (year() == _dateTime.year() && month() == _dateTime.month() && day() == _dateTime.day());\n}\n\nbool EBPDateTime::isInSameDateTime(EBPDateTime _dateTime) {\n    return (year() == _dateTime.year() && month() == _dateTime.month() && day() == _dateTime.day() && hour() == _dateTime.hour() && minute() == _dateTime.minute() && second() == _dateTime.second());\n}\n\nJalaliDateTime EBPDateTime::getJalaliDateTime() {\n    JalaliDateTime jd;\n    jd.ConvertToJalali(*this);\n    return jd;\n}\n\nvoid EBPDateTime::fromJalaliDateTime(JalaliDateTime jalaliDateTime) {\n    DateTime dt = jalaliDateTime.ConvertToGregorian();\n    *this = EBPDateTime(dt.year(), dt.month(), dt.day(), dt.hour(), dt.minute(), dt.second());\n}\n\nvoid EBPDateTime::fromJalaliDateTime(int year, int month, int day, int hour, int minute, int second) {\n    JalaliDateTime jd(year, month, day, hour, minute, second);\n    fromJalaliDateTime(jd);\n}\n\nvoid EBPDateTime::addToDateTime(int add_year, int add_month, int add_day, int add_hour, int add_minute, int add_second)\n{\n    int new_second = second() + add_second;\n    int new_minute = minute() + add_minute + new_second / 60;\n    new_second %= 60;\n    \n    int new_hour = hour() + add_hour + new_minute / 60;\n    new_minute %= 60;\n\n    int new_day = day() + add_day + new_hour / 24;\n    new_hour %= 24;\n\n    int new_month = month() + add_month;\n    int new_year = year() + add_year;\n    \n    while (new_day > 30) {  // assuming all months have 30 days\n        new_day -= 30;\n        new_month++;\n    }\n\n    while (new_month > 12) {\n        new_month -= 12;\n        new_year++;\n    }\n\n    *this = EBPDateTime(new_year, new_month, new_day, new_hour, new_minute, new_second);\n}\n\nconst EBPDateTime EBPDateTime::nullDateTime()\n{\n    return EBPDateTime(2000, 1, 1, 0, 0, 0);\n}\n#endif // EBPDATETIME_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Clock\\IClock.h",
        "content": "#ifndef ICLOCK_H\n#define ICLOCK_H\n\n#include \"RTClib.h\"\n#include \"JalaliDateTime.h\"\n#include \"EBPDateTime.h\"\n#include <time.h>\n\nclass IClock {\npublic:\n    virtual ~IClock() {}\n\n    virtual EBPDateTime now() = 0;\n    virtual JalaliDateTime nowJalali() = 0;\n    virtual void adjust(const EBPDateTime& dt) = 0;\n    virtual void syncTimeWithServer() = 0;\n    virtual void initialize() = 0;\n};\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Clock\\InternalClock.h",
        "content": "#ifndef INTERNALCLOCK_h\n#define INTERNALCLOCK_h\n\n#include \"time.h\"\n\nclass InternalClock {\nprivate:\n  const char* ntpServer = \"pool.ntp.org\";\n  const long gmtOffset_sec = 12600; // Tehran is GMT+3:30\n  const int daylightOffset_sec = 0; // Adjust if daylight saving is used\n\npublic:\n  InternalClock() {\n    // Constructor could initialize the Wi-Fi connection if desired\n    // WiFi.begin(ssid, password);\n  }\n\n  // Synchronize the local time with the NTP server\n  bool synchronize_ntp() {\n    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);\n    return waitForSync();\n  }\n\n  // Synchronize the local clock with a given time_t value\n  void synchronize(time_t time_) {\n    struct timeval now = {.tv_sec = time_};\n    settimeofday(&now, NULL);\n  }\n\n  // Get the current time as a time_t value\n  time_t now() {\n    struct tm timeinfo;\n    if (!getLocalTime(&timeinfo)) {\n      // Serial.println(\"Failed to obtain time\");\n      return 0;\n    }\n    return mktime(&timeinfo);\n  }\n\n  // Get the current time as a formatted string\n  String now_string(char* time_format) {\n    struct tm timeinfo;\n    if (!getLocalTime(&timeinfo)) {\n      return \"Time not set\";\n    }\n    char buffer[64];\n    strftime(buffer, sizeof(buffer), time_format, &timeinfo);\n    return String(buffer);\n  }\n\n  // Print the current time to the serial port at the specified baud rate\n  void print_now_serial(unsigned long baud_rate) {\n    Serial.begin(baud_rate);\n    while (!Serial) continue; // Wait for serial port to connect\n    Serial.println(now_string((char*)\"%A, %B %d %Y %H:%M:%S\"));\n  }\n\nprivate:\n  // Wait for time to be synchronized\n  bool waitForSync() {\n    // Serial.print(\"Waiting for NTP time sync: \");\n    time_t nowSecs = now();\n    int repea_time = 0;\n    while (nowSecs < 24 * 3600) {\n      if(++repea_time < 6) return false;\n      delay(500);\n      // Serial.print(\".\");\n      nowSecs = now();\n    }\n    return true;\n  }\n};\n\n#endif //INTERNALCLOCK_h"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Clock\\JalaliDateTime.h",
        "content": "#ifndef JALALIDATETIME_H\n#define JALALIDATETIME_H\n\n#include <RTClib.h>\n\nclass JalaliDateTime {\nprivate:\n    int year;\n    int month;\n    int day;\n    int hour;\n    int minute;\n    int second;\n    long* gregorian_to_jalali(long gy, long gm, long gd, long out[]);\n    long *jalali_to_gregorian(long jy, long jm, long jd, long out[]);\n    bool _isNull;\n\npublic:\n    // Existing constructors and conversion methods.\n\n    // New methods:\n    JalaliDateTime();  // sets to the Jalali date corresponding to 2000/1/1 12:00:00\n    JalaliDateTime(DateTime gregorian_dateTime);  // sets to the Jalali date corresponding to 2000/1/1 12:00:00\n    JalaliDateTime(int year, int month, int day, int hour, int minute, int second);\n    JalaliDateTime(int year, int month, int day);\n    bool isNull();  // check if the date is the Jalali date corresponding to 2000/1/1 12:00:00\n    bool isDateTimeStringValid(String strDateTime);  // Check if string is in format YY/MM/DD - HH:MM:SS\n    void fromString(String strDateTime);  // Fill JalaliDateTime from string in format YY/MM/DD - HH:MM:SS\n    String toDateTimeString();  // return JalaliDateTime in string in format YY/MM/DD - HH:MM:SS \n    String toDateString();  // return JalaliDateTime in string in format YY/MM/DD\n    String toTimeString();  // return JalaliDateTime in string in format HH:MM:SS\n    TimeSpan getTimeSpan(JalaliDateTime _dateTime);  // Return time span between current time and passed time in _dateTime\n    bool isInSameDate(JalaliDateTime _dateTime);  // Return true if _dateTime and current JalaliDateTime are in the same date.\n    bool isInSameDateTime(JalaliDateTime _dateTime);  // Return true if _dateTime and current JalaliDateTime are exactly the same.\n    void ConvertToJalali(DateTime dateTime);\n    DateTime ConvertToGregorian();\n};\n\nJalaliDateTime::JalaliDateTime(): JalaliDateTime(DateTime(2000, 1, 1, 0, 0, 0))\n{\n    \n}\n\nJalaliDateTime::JalaliDateTime(DateTime dateTime): _isNull(true)\n{\n    ConvertToJalali(dateTime);\n}\n\nJalaliDateTime::JalaliDateTime(int year, int month, int day, int hour, int minute, int second)\n    : year(year), month(month), day(day), hour(hour), minute(minute), second(second), _isNull(false) \n{\n\n}\n\nJalaliDateTime::JalaliDateTime(int year, int month, int day)\n    : year(year), month(month), day(day), hour(0), minute(0), second(0), _isNull(false)\n{\n\n}\n\nbool JalaliDateTime::isNull()\n{\n    return _isNull;\n}\n\nbool JalaliDateTime::isDateTimeStringValid(String strDateTime) {\n    // Check string length to match \"YY/MM/DD - HH:MM:SS\" format\n    if (strDateTime.length() != 17) return false;\n\n    // Validate date separators\n    if (strDateTime.charAt(2) != '/' || strDateTime.charAt(5) != '/' || strDateTime.charAt(8) != ' ' || strDateTime.charAt(11) != ':' || strDateTime.charAt(14) != ':')\n        return false;\n\n    // Validate year, month and day\n    int _year = strDateTime.substring(0, 2).toInt();\n    int _month = strDateTime.substring(3, 5).toInt();\n    int _day = strDateTime.substring(6, 8).toInt();\n    if (_year < 1300 || _year > 2000) return false;\n    if (_month < 1 || _month > 12) return false;\n    if (_day < 1 || _day > 31) return false;\n\n    // Validate hour, minute and second\n    int _hour = strDateTime.substring(10, 12).toInt();\n    int _minute = strDateTime.substring(13, 15).toInt();\n    int _second = strDateTime.substring(16, 18).toInt();\n    if (_hour < 0 || _hour > 23) return false;\n    if (_minute < 0 || _minute > 59) return false;\n    if (_second < 0 || _second > 59) return false;\n\n    // If all checks passed, the string is valid\n    return true;\n}\n\nvoid JalaliDateTime::fromString(String strDateTime) {\n    // Extract and convert year, month, and day from the string\n    year = strDateTime.substring(0, 2).toInt();\n    month = strDateTime.substring(3, 5).toInt();\n    day = strDateTime.substring(6, 8).toInt();\n\n    // Extract and convert hour, minute, and second from the string\n    hour = strDateTime.substring(10, 12).toInt();\n    minute = strDateTime.substring(13, 15).toInt();\n    second = strDateTime.substring(16, 18).toInt();\n}\n\nString JalaliDateTime::toDateTimeString() {\n    String strDateTime = \"\";\n\n    // Formatted YY/MM/DD - HH:MM:SS\n    strDateTime += String(year) + \"/\" + String(month) + \"/\" + String(day);\n    strDateTime += \" - \";\n    strDateTime += String(hour) + \":\" + String(minute) + \":\" + String(second);\n\n    return strDateTime;\n}\n\nString JalaliDateTime::toDateString() {\n    String strDate = \"\";\n\n    // Formatted YY/MM/DD\n    strDate += String(year) + \"/\" + String(month) + \"/\" + String(day);\n\n    return strDate;\n}\n\nString JalaliDateTime::toTimeString() {\n    String strTime = \"\";\n\n    // Formatted HH:MM:SS\n    strTime += String(hour) + \":\" + String(minute) + \":\" + String(second);\n\n    return strTime;\n}\n\nTimeSpan JalaliDateTime::getTimeSpan(JalaliDateTime _dateTime) {\n    // First, convert both Jalali dates to Gregorian DateTime\n    DateTime thisDateTime = ConvertToGregorian();\n    DateTime otherDateTime = _dateTime.ConvertToGregorian();\n\n    // Calculate difference in seconds between the two DateTime objects\n    long timeSpanSeconds = thisDateTime.unixtime() - otherDateTime.unixtime();\n\n    // Create TimeSpan object from difference and return\n    TimeSpan timeSpan(timeSpanSeconds);\n    return timeSpan;\n}\n\nbool JalaliDateTime::isInSameDate(JalaliDateTime _dateTime) {\n    // Returns true if year, month, and day are the same\n    return (year == _dateTime.year && month == _dateTime.month && day == _dateTime.day);\n}\n\nbool JalaliDateTime::isInSameDateTime(JalaliDateTime _dateTime) {\n    // Returns true if year, month, day, hour, minute, and second are the same\n    return (year == _dateTime.year && month == _dateTime.month && day == _dateTime.day &&\n            hour == _dateTime.hour && minute == _dateTime.minute && second == _dateTime.second);\n}\n\nvoid JalaliDateTime::ConvertToJalali(DateTime dateTime) {\n    long out[3];\n    gregorian_to_jalali(dateTime.year(), dateTime.month(), dateTime.day(), out);\n    year = out[0];\n    month = out[1];\n    day = out[2];\n    hour = dateTime.hour();\n    minute = dateTime.minute();\n    second = dateTime.second();\n}\n\nDateTime JalaliDateTime::ConvertToGregorian() {\n    long out[3];\n    jalali_to_gregorian(year, month, day, out);\n    return DateTime(out[0], out[1], out[2], hour, minute, second);\n}\n\nlong *JalaliDateTime::gregorian_to_jalali(long gy, long gm, long gd, long out[]) {\n    long days;\n    {\n        long gy2 = (gm > 2) ? (gy + 1) : gy;\n        long g_d_m[12] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        days = 355666 + (365 * gy) + ((int)((gy2 + 3) / 4)) - ((int)((gy2 + 99) / 100)) + ((int)((gy2 + 399) / 400)) + gd + g_d_m[gm - 1];\n    }\n    long jy = -1595 + (33 * ((int)(days / 12053)));\n    days %= 12053;\n    jy += 4 * ((int)(days / 1461));\n    days %= 1461;\n    if (days > 365) {\n        jy += (int)((days - 1) / 365);\n        days = (days - 1) % 365;\n    }\n    out[0] = jy;\n    if (days < 186) {\n        out[1]/*jm*/ = 1 + (int)(days / 31);\n        out[2]/*jd*/ = 1 + (days % 31);\n    } else {\n        out[1]/*jm*/ = 7 + (int)((days - 186) / 30);\n        out[2]/*jd*/ = 1 + ((days - 186) % 30);\n    }\n    return out;\n}\n\nlong *JalaliDateTime::jalali_to_gregorian(long jy, long jm, long jd, long out[]) {\n    jy += 1595;\n    long days = -355668 + (365 * jy) + (((int)(jy / 33)) * 8) + ((int)(((jy % 33) + 3) / 4)) + jd + ((jm < 7) ? (jm - 1) * 31 : ((jm - 7) * 30) + 186);\n    long gy = 400 * ((int)(days / 146097));\n    days %= 146097;\n    if (days > 36524) {\n        gy += 100 * ((int)(--days / 36524));\n        days %= 36524;\n        if (days >= 365) days++;\n    }\n    gy += 4 * ((int)(days / 1461));\n    days %= 1461;\n    if (days > 365) {\n        gy += (int)((days - 1) / 365);\n        days = (days - 1) % 365;\n    }\n    long gd = days + 1;\n    long gm;\n    {\n        long sal_a[13] = {0, 31, ((gy % 4 == 0 && gy % 100 != 0) || (gy % 400 == 0)) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for (gm = 0; gm < 13 && gd > sal_a[gm]; gm++) gd -= sal_a[gm];\n    }\n    out[0] = gy;\n    out[1] = gm;\n    out[2] = gd;\n    return out;\n}\n\n#endif  // JALALIDATETIME_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\Configs.h",
        "content": "#ifndef CONFIGS_H\n#define CONFIGS_H\n\n#include \"IConfigs.h\"\n#include \"System/SystemConfig.h\"\n#include \"Security/SecurityConfig.h\"\n#include \"../Context.h\"\n\nclass Configs : public IConfigs\n{\nprivate:\n    Context* context;\n    SystemConfig* systemConfig;\n    SecurityConfig* securityConfig;\n    \npublic:\n    Configs(Context* cntxt);\n    void initialize();\n    IConfig* getSystemConfig() override;\n    IConfig* getSecurityConfig() override;\n};\n\nConfigs::Configs(Context* cntxt) : context(cntxt)\n{\n\n}\n\nvoid Configs::initialize()\n{\n    securityConfig = new SecurityConfig(context);\n    systemConfig = new SystemConfig(context);\n\n    securityConfig->initialize();\n    systemConfig->initialize();\n}\n\nIConfig* Configs::getSystemConfig()\n{\n    return systemConfig;\n}\n\nIConfig* Configs::getSecurityConfig()\n{\n    return securityConfig;\n}\n\n\n\n\n#endif //CONFIGS_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\IConfig.h",
        "content": "#ifndef ISYSTEMCONFIG_H\n#define ISYSTEMCONFIG_H\n\n#include <Arduino.h>\n\nclass IConfig {\npublic:\n    virtual void initialize() = 0;\n    virtual String get(const String& key) = 0;\n    virtual void set(const String& key, const String& value) = 0;\n};\n\n#endif // ISYSTEMCONFIG_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\IConfigs.h",
        "content": "#ifndef ICONFIG_H\n#define ICONFIG_H\n\n#include \"IConfig.h\"\n\nclass IConfigs\n{\npublic:\n    virtual void initialize() = 0;\n    virtual IConfig* getSystemConfig() = 0;\n    virtual IConfig* getSecurityConfig() = 0;\n};\n\n\n#endif //ICONFIG_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\StaticConfigs.h",
        "content": "#ifndef STATICCONFIGS_H\n#define STATICCONFIGS_H\n\n#include <Arduino.h>\n\nclass StaticConfigs {\npublic:\n    // Database configuration\n    static constexpr const char* DATABASE_PATH = \"/\";\n\n    // Serial communication configuration\n    static constexpr long SERIAL_BAUD_RATE = 115200;\n\n    // Wi-Fi configuration\n    static constexpr const char* AP_SSID = \"your_ssid\";\n    static constexpr const char* AP_PASSWORD = \"your_password\";\n\n    // Web server configuration\n    static constexpr uint16_t WEB_SERVER_PORT = 80;\n\n    // Other configurations can be added as needed\n};\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\Security\\DefaultSecurityConfigs.h",
        "content": "\n#ifndef DEFAULTAUTHENTICATION_H\n#define DEFAULTAUTHENTICATION_H\n\n#include <Arduino.h>\n#include <ArduinoJson.h>\n\nclass DefaultSecurityConfigs {\n\npublic:\n    static const String jsonString;\n    static String get(String key);\n};\n\nString DefaultSecurityConfigs::get(String key) {\n    StaticJsonDocument<1024> doc;\n    DeserializationError error = deserializeJson(doc, jsonString);\n\n    if (error) {\n        Serial.println(F(\"Failed to parse jsonString\"));\n        Serial.println(jsonString);\n        return \"\";\n    }\n\n    if (doc.containsKey(key)) {\n        return String(doc[key].as<const char *>());\n    } else {\n        Serial.print(F(\"Key not found in Security Config: \"));\n        Serial.println(key);\n        return \"\";\n    }\n}\n\nconst String DefaultSecurityConfigs::jsonString = R\"(\n{\n    \"authentication_enable\" : \"false\",\n    \"2fa_enable\" : \"false\",\n    \"2fa_email_enable\" : \"false\",\n    \"2fa_sms_enable\" : \"false\",\n    \"access_with_api_key\" : \"true\",\n    \"rst_pswd_with_sms\" : \"false\",\n    \"rst_pswd_with_email\" : \"false\",\n    \"rst_pswd_with_button\" : \"true\",\n    \"rst_pswd_by_sec_qustn\" : \"true\",\n    \"rst_pswd_expire_hour\" : \"24\",\n    \"login_attempt_count\" : \"10\",\n    \"lock_user_login_attempt\" : \"false\",\n    \"lock_user_minute\" : \"30\",\n    \"two_factor_auth_expire_hour\" : \"24\",\n    \"log_account_activity\" : \"true\",\n    \"token_active_day\" : \"5\"\n}\n)\";\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\Security\\SecurityConfig.h",
        "content": "\n#ifndef AUTHENTICATIONCONFIGS_H\n#define AUTHENTICATIONCONFIGS_H\n\n#include <string>\n#include \"DefaultSecurityConfigs.h\"\n#include \"../../Context.h\"\n#include \"../../Database/Controllers/Security/AuthenticationConfigController.h\"\n#include \"SecurityConfigKeys.h\"\n\nclass SecurityConfig : public IConfig {\n\nprivate:\n    AuthenticationConfigController* authenticationConfigController;\n\npublic:\n    Context* context;\n    SecurityConfig(Context* cntxt):context (cntxt) {\n    }\n    \n    void initialize() {\n        authenticationConfigController = new AuthenticationConfigController(context, storageType);\n    }\n\n    String get(const String& key) {\n        std::vector<KeyValueEntity> authenticationConfigEntities  = authenticationConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key);\n        \n        if (authenticationConfigEntities.size() > 0)\n        {\n            KeyValueEntity configEntity = authenticationConfigEntities.at(0);\n            configEntity.fromString(configEntity.toString());\n            if (configEntity.id == -1) {\n                return \"\";\n            } else {\n                return configEntity.getValue();\n            }\n        }\n        else\n        {\n            KeyValueEntity* keyValueEntity = new KeyValueEntity(key,DefaultSecurityConfigs::get(key));\n            authenticationConfigController->Add(*keyValueEntity);\n            return DefaultSecurityConfigs::get(key);\n        }\n    }\n\n    void set(const String& key, const String& value) {\n        KeyValueEntity configEntity = authenticationConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key).at(0);\n        if (configEntity.id == -1) { // Key does not exist\n            configEntity.setKey(key);\n            configEntity.setValue(value);\n            authenticationConfigController->Add(configEntity);\n        } else { // Key exists\n            configEntity.setValue(value);\n            authenticationConfigController->Update(configEntity);\n        }\n    }\n\n};\n\n#endif // AUTHENTICATION_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\Security\\SecurityConfigKeys.h",
        "content": "\n#ifndef AUTHENTICATIONCONFIGKEYS_H\n#define AUTHENTICATIONCONFIGKEYS_H\n\nclass SecurityConfigKey\n{\nprivate:\n\npublic:\n    static const String AUTHENTICATION_ENABLE;\n    static const String TWO_FACTOR_AUTHENTICATION_ENABLE;\n    static const String TWO_FACTOR_AUTHENTICATION_EMAIL_ENABLE;\n    static const String TWO_FACTOR_AUTHENTICATION_SMS_ENABLE;\n    static const String ACCESS_WITH_API_KEY;\n    static const String RESET_PASSWORD_WITH_SMS;\n    static const String RESET_PASSWORD_WITH_EMAIL;\n    static const String RESET_PASSWORD_WITH_BUTTON;\n    static const String RESET_PASSWORD_WITH_SECURITY_QUESTION;\n    static const String RESET_PASSWORD_EXPIRE_HOUR;\n    static const String LOGIN_ATTEMPT_COUNT;\n    static const String LOCK_USER_LOGIN_ATTEMPT;\n    static const String LOCK_USER_MINUTE;\n    static const String TOKEN_ACTIVE_DAY;\n    static const String TWO_FACTOR_AUTH_EXPIRE_HOUR;\n    static const String LOG_ACCOUNT_ACTIVITY;\n};\n\nconst String SecurityConfigKey::AUTHENTICATION_ENABLE = \"authentication_enable\";\nconst String SecurityConfigKey::TWO_FACTOR_AUTHENTICATION_ENABLE = \"2fa_enable\";\nconst String SecurityConfigKey::TWO_FACTOR_AUTHENTICATION_EMAIL_ENABLE = \"2fa_email_enable\";\nconst String SecurityConfigKey::TWO_FACTOR_AUTHENTICATION_SMS_ENABLE = \"2fa_sms_enable\";\nconst String SecurityConfigKey::ACCESS_WITH_API_KEY = \"access_with_api_key\";\nconst String SecurityConfigKey::RESET_PASSWORD_WITH_SMS = \"rst_pswd_with_sms\";\nconst String SecurityConfigKey::RESET_PASSWORD_WITH_EMAIL = \"rst_pswd_with_email\";\nconst String SecurityConfigKey::RESET_PASSWORD_WITH_BUTTON = \"rst_pswd_with_button\";\nconst String SecurityConfigKey::RESET_PASSWORD_WITH_SECURITY_QUESTION = \"rst_pswd_by_sec_qustn\";\nconst String SecurityConfigKey::RESET_PASSWORD_EXPIRE_HOUR = \"rst_pswd_expire_hour\";\nconst String SecurityConfigKey::LOGIN_ATTEMPT_COUNT = \"login_attempt_count\";\nconst String SecurityConfigKey::LOCK_USER_LOGIN_ATTEMPT = \"lock_user_login_attempt\";\nconst String SecurityConfigKey::LOCK_USER_MINUTE = \"lock_user_minute\";\nconst String SecurityConfigKey::TWO_FACTOR_AUTH_EXPIRE_HOUR = \"two_factor_auth_expire_hour\";\nconst String SecurityConfigKey::LOG_ACCOUNT_ACTIVITY = \"log_account_activity\";\nconst String SecurityConfigKey::TOKEN_ACTIVE_DAY = \"token_active_day\";\n\n#endif // AUTHENTICATIONCONFIGKEYS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\System\\DefaultSystemConfigs.h",
        "content": "#ifndef DEFAULTCONFIGS_H\n#define DEFAULTCONFIGS_H\n\n#include <Arduino.h>\n#include <ArduinoJson.h>\n\nclass DefaultSystemConfigs {\n  public:\n    static const String jsonString;\n\n    static String get(String key);\n};\n\nString DefaultSystemConfigs::get(String key) {\n    StaticJsonDocument<1024> doc;\n    DeserializationError error = deserializeJson(doc, jsonString);\n\n    if (error) {\n    Serial.println(F(\"Failed to parse jsonString\"));Serial.println(key);\n    return \"\";\n    }\n\n    if (doc.containsKey(key)) {\n    return String(doc[key].as<const char *>());\n    } else {\n    return \"\";\n    }\n}\nconst String DefaultSystemConfigs::jsonString = R\"(\n{\n    \"db_change_info_save\" : \"false\",\n    \"system_boot_info_save\" : \"true\",\n    \"relay_state_changed_info_save\" : \"true\",\n    \"wifi_mode_mesh\" : \"false\",\n    \"wifi_mode_ap\" : \"true\",\n    \"wifi_mode_wifi\" : \"false\",\n    \"ap_ssid\" : \"OStad AP\",\n    \"ap_password\" : \"12345678\",\n    \"channel\" : \"1\",\n    \"ssid_hidden\" : \"false\",\n    \"max_connection\" : \"6\",\n    \"mesh_root\" : \"false\",\n    \"clock_type\" : \"DS3231\",\n    \"storage_type\" : \"SPIFFS_TYPE\",\n    \"sd_pin\" : \"26\",\n    \"https_enable\" : \"true\",\n    \"default_username\" : \"admin\",\n    \"default_password\" : \"admin\",\n    \"serial_print_enable\" : \"true\"\n}\n)\";\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\System\\SystemConfig.h",
        "content": "#ifndef SYSTEMCONFIG_H\n#define SYSTEMCONFIG_H\n\n#include <string>\n#include \"../../Database/Controllers/SystemConfigController.h\"\n#include \"../../Database/Entities/KeyValueEntity.h\"\n#include \"../IConfig.h\"\n#include \"DefaultSystemConfigs.h\"\n#include \"SystemConfigKeys.h\"\n#include \"../../Context.h\"\n\nclass SystemConfig : public IConfig {\n\nprivate:\n    Context* context;\n    SystemConfigController* configController;\n\npublic:\n    SystemConfig(Context* cntxt);\n    void initialize() override;\n    String get(const String& key) override;\n    void set(const String& key, const String& value) override;\n};\n\nSystemConfig::SystemConfig(Context* cntxt):context (cntxt) {\n}\n\nvoid SystemConfig::initialize() {\n    configController = new SystemConfigController(context, storageType);\n}\n\nString SystemConfig::get(const String& key) {\n    \n    std::vector<KeyValueEntity> systemConfigEntities  = configController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key);\n    \n    if (systemConfigEntities.size() > 0)\n    {\n        KeyValueEntity configEntity = systemConfigEntities.at(0);\n        configEntity.fromString(configEntity.toString());\n        if (configEntity.id == -1) {\n            return \"\";\n        } else {\n            return configEntity.getValue();\n        }\n    }\n    else\n    {\n        KeyValueEntity* systemConfigEntity = new KeyValueEntity(key,DefaultSystemConfigs::get(key));\n        \n        configController->Add(*systemConfigEntity);\n        return DefaultSystemConfigs::get(key);\n    }\n}\n\nvoid SystemConfig::set(const String& key, const String& value) {\n    KeyValueEntity configEntity = configController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key).at(0);\n    if (configEntity.id == -1) { // Key does not exist\n        configEntity.setKey(key);\n        configEntity.setValue(value);\n        configController->Add(configEntity);\n    } else { // Key exists\n        configEntity.setValue(value);\n        configController->Update(configEntity);\n    }\n}\n\n#endif // SYSTEMCONFIG_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Config\\System\\SystemConfigKeys.h",
        "content": "#ifndef CONFIGKEYS_h\n#define CONFIGKEYS_h\n\nclass SystemConfigKey\n{\nprivate:\n    \npublic:\n    static const String DB_CHANGE_INFO_SAVE;\n\n    static const String WIFI_MODE_MESH;\n    static const String WIFI_MODE_AP;\n    static const String WIFI_MODE_WIFI;\n    static const String AP_SSID;\n    static const String AP_PASSWORD;\n    static const String CHANNEL;\n    static const String SSID_HIDDEN;\n    static const String MAX_CONNECTION;\n    static const String MESH_ROOT;\n    static const String CLOCK_TYPE;\n    static const String STORAGE_TYPE;\n    static const String SD_PIN;\n    static const String HTTPS_ENABLE;\n    static const String DEFAULT_USERNAME;\n    static const String DEFAULT_PASSWORD;\n    static const String SERIAL_PRINT_ENABLE;\n};\n\n//Database keys\nconst String SystemConfigKey::DB_CHANGE_INFO_SAVE = \"db_change_info_save\";\n\n\n//Network keys\nconst String SystemConfigKey::WIFI_MODE_MESH = \"wifi_mode_mesh\";\nconst String SystemConfigKey::WIFI_MODE_AP = \"wifi_mode_ap\";\nconst String SystemConfigKey::WIFI_MODE_WIFI = \"wifi_mode_wifi\";\nconst String SystemConfigKey::AP_SSID = \"ap_ssid\";\nconst String SystemConfigKey::AP_PASSWORD = \"ap_password\";\nconst String SystemConfigKey::CHANNEL = \"channel\";\nconst String SystemConfigKey::SSID_HIDDEN = \"ssid_hidden\";\nconst String SystemConfigKey::MAX_CONNECTION = \"max_connection\";\nconst String SystemConfigKey::MESH_ROOT = \"mesh_root\";\nconst String SystemConfigKey::CLOCK_TYPE = \"clock_type\";\nconst String SystemConfigKey::STORAGE_TYPE = \"storage_type\";\nconst String SystemConfigKey::SD_PIN = \"sd_pin\";\nconst String SystemConfigKey::HTTPS_ENABLE = \"https_enable\";\nconst String SystemConfigKey::DEFAULT_USERNAME = \"default_username\";\nconst String SystemConfigKey::DEFAULT_PASSWORD = \"default_password\";\nconst String SystemConfigKey::SERIAL_PRINT_ENABLE = \"serial_print_enable\";\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\IController.h",
        "content": "#ifndef ICONTROLLER_H\n#define ICONTROLLER_H\n\n#include <vector>\n#include <string>\n\ntemplate<typename T>\nclass IController {\npublic:\n\n    virtual void RemoveTable() = 0;\n\n    virtual void removeColumn(const String column_name) = 0;\n\n    virtual int Add(T& entity) = 0;\n\n    virtual bool Update(T& entity) = 0;\n\n    virtual bool Delete(int id) = 0;\n\n    virtual T GetById(int id) = 0;\n\n    virtual std::vector<T> GetAll() = 0;\n\n    virtual String GetAllJson() = 0;\n\n    virtual std::vector<T> Get(const String query) = 0;\n    \n    virtual String GetJson(String query) = 0;\n};\n\n#endif // ICONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\LogController.h",
        "content": "// path: .\\src\\Basic\\Database\\Controllers\\LogController.h\n\n#ifndef BASELOGCONTROLLER_H\n#define BASELOGCONTROLLER_H\n\n#include \"../Entities/LogEntitiy.h\"\n#include \"MainController.h\"\n#include <Arduino.h>\n#include <vector>\n\n\nclass LogController : public MainController<LogEntity>{\nprotected:\n    Context* context;\npublic:\n    LogController(Context* context, StorageType _storageType) : MainController(context, \"logs\", _storageType), context(context) {}\n    void AddLog(LogLevel logLevel, String logTitle, String logMessage);\n    std::vector<LogEntity> GetAllLogs();\n};\n\nvoid LogController::AddLog(LogLevel logLevel, String logTitle, String logMessage) {\n    LogEntity logEntity = LogEntity();\n    logEntity.logLevel = logLevel;\n    logEntity.logTitle = logTitle;\n    logEntity.message = logMessage;\n    Add(logEntity);\n}\n\nstd::vector<LogEntity> LogController::GetAllLogs() {\n    std::vector<LogEntity> logs = GetAll();    \n    return logs;\n}\n\n#endif // BASELOGCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\MainController.h",
        "content": "#ifndef MAINCONTROLLER_H\n#define MAINCONTROLLER_H\n\n#include <vector>\n#include <string>\n#include <ArduinoJson.h>\n#include \"IController.h\"\n#include \"../../Config/StaticConfigs.h\"\n#include \"../../Context.h\"\n#include \"../../Logging/LogTitles.h\"\n\ntemplate<typename T>\nclass MainController : public IController<T> {\nprivate:\n    Context* context;\npublic:\n    StorageType _storageType;\n    String path;\n    String _tableName;\n\n    MainController(Context* context, String tableName, StorageType _storageType);\n    void RemoveTable();\n    void removeColumn(const String column_name);\n    int Add(T& entity);\n    bool Update(T& entity);\n    bool Delete(int id);\n    T GetById(int id);\n    std::vector<T> GetAll();\n    String GetAllJson();\n    String GetJson(String query);\n    std::vector<T> Get(const char* format, ...);\n    std::vector<T> Get(const String query);\n\n\n};\n\ntemplate<typename T>\nMainController<T>::MainController(Context* context, String tableName, StorageType _storageType) : context(context), _storageType(_storageType){\n  _tableName = tableName;\n  path = String(StaticConfigs::DATABASE_PATH + _tableName + \".db\");\n}\n\ntemplate<typename T>\nvoid MainController<T>::RemoveTable()\n{\n  if (!(_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->exists(path)) {\n        context->getErrorHandler()->handleError(ErrorType::TableDoesNotExist);\n        return;\n  }\n    (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->remove(path);\n    context->getLogger()->DBLog(_tableName, LogTitles::REMOVE_TABLE, LogTitles::REMOVE_TABLE_FROM_DB + \" - table = \" + _tableName);\n}\n\n\ntemplate<typename T>\nvoid MainController<T>::removeColumn(const String column_name) {\n    if (!context->getValidation()->isColumnNameValid(column_name)) {\n        context->getErrorHandler()->handleError(ErrorType::InvalidColumnName);\n        return;\n    }\n\n    std::vector<T> entities = GetAll();\n    for (size_t i = 0; i < entities.size(); i++) {\n        entities.at(i).removeColumn(column_name);\n    }\n\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"w\");\n    for (size_t i = 0; i < entities.size(); i++) {\n        file->println(entities.at(i).toString());\n    }\n    file->close();\n    context->getLogger()->DBLog(_tableName, LogTitles::REMOVE_COLUMN, LogTitles::REMOVE_COLUMN_FROM_DB + \" - column = \" + column_name + \" from table \" + _tableName);\n}\n\n\ntemplate<typename T>\nint MainController<T>::Add(T& entity) {\n\n  int entity_id = -1;\n    T e{};\n    entity.createDate = context->getClock()->now();\n    // entity.createDate = EBPDateTime(2000,1,1,0,0,0);    \n    e.fromString(entity.toString());\n    if (e.id == -1 || e.id == 0) {\n        int maxId = 0;\n        std::vector<T> entities = GetAll();\n        for (size_t i = 0; i < entities.size(); i++) {\n            if (entities.at(i).id > maxId) {\n                maxId = entities.at(i).id;\n            }\n        }\n        e.id = maxId + 1;\n        entity_id = e.id;\n        e.createDate = context->getClock()->now();\n    } else {\n\n        T existing_entity = GetById(e.id);\n        if (existing_entity.id != -1) {\n          context->getErrorHandler()->handleError(ErrorType::CustomError, \"Entity with the same ID already exists\");\n          return -1;\n        }\n    }\n\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"a\");\n    file->println(e.toString());\n    file->close();\n    \n    context->getLogger()->DBLog(_tableName, LogTitles::ADD, LogTitles::ADD_RECORD_TO_DB + \" - id = \" + String(entity_id));\n    return entity_id;\n}\n\n\ntemplate<typename T>\nbool MainController<T>::Update(T& entity) {\n    // T e = entity.toEntity();\n    std::vector<T> entities = GetAll();\n    bool entity_found = false;\n    for (size_t i = 0; i < entities.size(); i++) {\n        if (entities.at(i).id == entity.id) {\n            entities.at(i) = entity;\n            entity_found = true;\n            break;\n        }\n    }\n\n    if (!entity_found) {\n        context->getErrorHandler()->handleError(ErrorType::CustomError, \"Entity not found\");\n        return false;\n    }\n\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"w\");\n    for (size_t i = 0; i < entities.size(); i++) {\n        file->println(entities.at(i).toString());\n    }\n    file->close();\n    \n    context->getLogger()->DBLog(_tableName, LogTitles::UPDATE, LogTitles::UPDATE_RECORD_IN_DB + \" - id = \" + String(entity.id));\n    return true;\n}\n\n\ntemplate<typename T>\nbool MainController<T>::Delete(int id) {\n    std::vector<T> entities = GetAll();\n    bool entity_found = false;\n    for (size_t i = 0; i < entities.size(); i++) {\n        if (entities.at(i).id == id) {\n            entities.erase(entities.begin() + i);\n            entity_found = true;\n            break;\n        }\n    }\n\n    if (!entity_found) {\n        context->getErrorHandler()->handleError(ErrorType::CustomError, \"Entity not found\");\n        return false;\n    }\n\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"w\");\n    for (size_t i = 0; i < entities.size(); i++) {\n        file->println(entities.at(i).toString());\n    }\n    file->close();\n    context->getLogger()->DBLog(_tableName, LogTitles::DELETE, LogTitles::DELETE_RECORD_FROM_DB + \" - id = \" + String(id));\n    return true;\n}\n\n\ntemplate<typename T>\nT MainController<T>::GetById(int id) {\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"r\");\n    if (!file) {\n        context->getErrorHandler()->handleError(ErrorType::FileOpenError);\n        return T::fromEntity(T::Invalid());\n    }\n\n    String line;\n    while (file->available()) {\n        line = file->readStringUntil('\\n');\n        T entity{};\n        entity.fromString(line);\n        if (entity.id == id) {\n            file->close();\n            return T::fromEntity(entity);\n        }\n    }\n    file->close();\n    return T::fromEntity(T::Invalid());\n}\n\ntemplate<typename T>\nstd::vector<T> MainController<T>::GetAll() {\n    std::vector<T> entities;\n  if(_storageType == StorageType::SPIFFS_TYPE)\n  {\n    \n    if(context->getLittleFS()->exists(path))\n    {\n    }\n    \n  }\n    if(!(_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->exists(path))\n    {\n      return entities;\n    }\n    IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"r\");\n    if (!file) {\n        context->getErrorHandler()->handleError(ErrorType::FileOpenError);\n        return entities;\n    }\n\n    String line;\n    while (file->available()) {\n        line = file->readStringUntil('\\n');\n        T entity{};\n        entity.fromString(line);\n        entities.push_back(entity);\n    }\n    file->close();\n    return entities;\n}\n\n\ntemplate<typename T>\nString MainController<T>::GetAllJson() {\n    std::vector<T> entities = GetAll();\n    String result = \"[\";\n    for (size_t i = 0; i < entities.size(); i++) {\n        result += entities.at(i).toJson();\n        if (i < entities.size() - 1) {\n            result += \",\";\n        }\n    }\n    result += \"]\";\n    return result;\n}\n\n\ntemplate<typename T>\nString MainController<T>::GetJson(String query) {\n    std::vector<T> entities = Get(query);\n    String result = \"[\";\n    for (size_t i = 0; i < entities.size(); i++) {\n        result += entities.at(i).toJson();\n        if (i < entities.size() - 1) {\n            result += \",\";\n        }\n    }\n    result += \"]\";\n    return result;\n}\n\ntemplate<typename T>\nstd::vector<T> MainController<T>::Get(const char* format, ...) {\n    std::vector<T> entities;\n\n    // Buffer to store the formatted string\n    char query[512]; // Adjust the size as needed\n\n    // Start variadic argument processing\n    va_list args;\n    va_start(args, format);\n    // Create formatted string\n    vsnprintf(query, sizeof(query), format, args);\n    // End variadic argument processing\n    va_end(args);\n    return Get(String(query));\n}\n\ntemplate<typename T>\nstd::vector<T> MainController<T>::Get(const String query) {\n\n  std::vector<T> entities;\n  if (_storageType == StorageType::SPIFFS_TYPE)\n  {\n    if(!LittleFS.exists(path))\n    {\n      return entities;\n    }\n  }else{\n    if (!SD.exists(path))\n    {\n      return entities;\n    }\n    \n  }\n  \n  \n  IEBPFile* file = (_storageType == StorageType::SPIFFS_TYPE ? context->getLittleFS() : context->getSD())->open(path, \"r\");\n  if (!file) {\n    context->getErrorHandler()->handleError(ErrorType::FileOpenError);\n    return entities;\n  }\n\n  while (file->available()) {\n    String str = file->readStringUntil('\\n');\n    T entity{};\n    entity.fromString(str);\n    bool matches = true;\n    int pos = 0;\n    while (pos < query.length()) {\n      int and_pos = query.indexOf(\" AND \", pos);\n      if (and_pos == -1) {\n        and_pos = query.length();\n      }\n      String condition = query.substring(pos, and_pos);\n      int operator_pos = -1;\n      if (condition.indexOf('=') != -1) {\n        operator_pos = condition.indexOf('=');\n      } else if (condition.indexOf('>') != -1) {\n        operator_pos = condition.indexOf('>');\n      } else if (condition.indexOf('<') != -1) {\n        operator_pos = condition.indexOf('<');\n      }\n\n      if (operator_pos == -1) {\n        context->getErrorHandler()->handleError(ErrorType::InvalidQuery);\n        matches = false;\n        break;\n      }\n\n      String column_name = condition.substring(0, operator_pos);\n      if (!context->getValidation()->isColumnNameValid(column_name)) {\n        context->getErrorHandler()->handleError(ErrorType::InvalidQuery);\n        matches = false;\n        break;\n      }\n\n      String value = condition.substring(operator_pos + 1);\n      String entity_value = entity.GetValue(column_name);\n      if (condition[operator_pos] == '=') {\n        if (entity_value != value) {\n          matches = false;\n          break;\n        }\n      } else if (condition[operator_pos] == '>') {\n        if (entity_value <= value) {\n          matches = false;\n          break;\n        }\n      } else if (condition[operator_pos] == '<') {\n        if (entity_value >= value) {\n          matches = false;\n          break;\n        }\n      }\n      pos = and_pos + 5;\n    }\n\n    if (matches) {\n      entities.push_back(entity);\n    }\n  }\n  file->close();\n  return entities;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\SystemConfigController.h",
        "content": "#ifndef SYSTEMCONFIGCONTROLLER_H\n#define SYSTEMCONFIGCONTROLLER_H\n\n#include \"../Entities/KeyValueEntity.h\"\n#include \"MainController.h\"\n\nclass SystemConfigController : public MainController<KeyValueEntity>{\nprotected:\n    Context* context;\npublic:\n    SystemConfigController(Context* context, StorageType _storageType) : MainController<KeyValueEntity>(context ,\"system_config\", _storageType), context(context) {}    \n};\n\n\n#endif // SYSTEMCONFIGCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\WiFiConroller.h",
        "content": "#ifndef WIFICONTROLLER_H\n#define WIFICONTROLLER_H\n\n#include \"../Entities/WiFiEntity.h\"\n#include \"MainController.h\"\n\nclass WiFiController : public MainController<WiFiEntity> {\nprotected:\n    Context* context;\npublic:\n    WiFiController(Context* context, StorageType _storageType) : MainController<WiFiEntity>(context, \"wifi\", _storageType), context(context) {}\n};\n\n#endif // WIFICONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\ButtonController.h",
        "content": "#ifndef BUTTONCONTROLLER_H\n#define BUTTONCONTROLLER_H\n\n#include \"../../Entities/Modules/ButtonEntity.h\"\n#include \"../MainController.h\"\n\nclass ButtonController : public MainController<ButtonEntity> {\nprotected:\n    Context* context;\npublic:\n    ButtonController(Context* context, StorageType _storageType) : MainController<ButtonEntity>(context, \"button\", _storageType), context(context) {}\n};\n\n#endif // BUTTONCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\DHTController.h",
        "content": "#ifndef DHTCONTROLLER_H\n#define DHTCONTROLLER_H\n\n#include \"../../Entities/Modules/DHTEntity.h\"\n#include \"../MainController.h\"\n\nclass DHTController : public MainController<DHTEntity> {\nprotected:\n    Context* context;\npublic:\n    DHTController(Context* context, StorageType _storageType) : MainController<DHTEntity>(context, \"dht\", _storageType), context(context) {}\n};\n\n#endif // DHTCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\LCDController.h",
        "content": "#ifndef LCDCONTROLLER_H\n#define LCDCONTROLLER_H\n\n#include \"../../Entities/Modules/LCDEntity.h\"\n#include \"../MainController.h\"\n\nclass LCDController : public MainController<LCDEntity> {\nprotected:\n    Context* context;\npublic:\n    LCDController(Context* context, StorageType _storageType) : MainController<LCDEntity>(context, \"lcd\", _storageType), context(context) {}\n};\n\n#endif // LCDCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\ModulesController.h",
        "content": "#ifndef MODULESCONTROLLER_H\n#define MODULESCONTROLLER_H\n\n#include \"../../Entities/Modules/ModuleEntity.h\"\n#include \"../../Entities/Modules/ButtonFullEntity.h\"\n#include \"../../Entities/Modules/ButtonEntity.h\"\n#include \"ButtonController.h\"\n\n#include \"../../Entities/Modules/RelayFullEntity.h\"\n#include \"../../Entities/Modules/RelayEntity.h\"\n#include \"RelayController.h\"\n\n#include \"../../Entities/Modules/LCDFullEntity.h\"\n#include \"../../Entities/Modules/LCDEntity.h\"\n#include \"LCDController.h\"\n\n#include \"../../Entities/Modules/DHTFullEntity.h\"\n#include \"../../Entities/Modules/DHTEntity.h\"\n#include \"DHTController.h\"\n\n#include \"../../Entities/Modules/RGBFullEntity.h\"\n#include \"../../Entities/Modules/RGBEntity.h\"\n#include \"RGBController.h\"\n\n#include \"../../Entities/Modules/PhotoresistorFullEntity.h\"\n#include \"../../Entities/Modules/PhotoresistorEntity.h\"\n#include \"PhotoresistorController.h\"\n\n#include \"../../Entities/Modules/SoilMoistureFullEntity.h\"\n#include \"../../Entities/Modules/SoilMoistureEntity.h\"\n#include \"SoilMoistureController.h\"\n\n#include \"../MainController.h\"\n\nclass ModulesController : public MainController<ModuleEntity> {\n    private:\n        Context* context;\n        ButtonController* buttonController;\n    public:\n        ModulesController(Context* context, StorageType _storageType);\n        std::vector<ButtonFullEntity> getAllButtons();\n        ButtonFullEntity getButtonByName(String name);\n        int AddButton(ButtonFullEntity button);\n        std::vector<RelayFullEntity> getAllRelays();\n        int AddRelay(RelayFullEntity relay);\n        std::vector<LCDFullEntity> getAllLCDs();\n        int AddLCD(LCDFullEntity lcd);\n        std::vector<DHTFullEntity> getAllDHTs();\n        void AddDHT(DHTFullEntity dht);\n        std::vector<RGBFullEntity> getAllRGBs();\n        void AddRGB(RGBFullEntity rgb);\n        std::vector<PhotoresistorFullEntity> getAllPhotoresistors();\n        void AddPhotoresistor(PhotoresistorFullEntity photoresistor);\n        std::vector<SoilMoistureFullEntity> getAllSoilMoistures();\n        void AddSoilMoisture(SoilMoistureFullEntity soilMoisture);\n};\n\nModulesController::ModulesController(Context* context, StorageType _storageType) : MainController<ModuleEntity>(context, \"modules\", _storageType), context(context) \n{\n\n}\n\nButtonFullEntity ModulesController::getButtonByName(String name)\n{\n    buttonController = new ButtonController(context, _storageType);\n    ButtonFullEntity fullButton;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n    _module.fromString(_module.toString());\n        if (_module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE) == ModuleTypes::BUTTON && _module.GetValue(ModuleEntity::COLUMN_NAME) == name)\n        {\n            ButtonEntity _button = buttonController->GetById(_module.id);\n    _button.fromString(_button.toString());\n            fullButton = ButtonFullEntity(_module.id, _button.id, _module.GetValue(ModuleEntity::COLUMN_NAME), _module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE), _module.GetValue(ModuleEntity::COLUMN_CONNECTION_TYPE), _module.GetValue(ModuleEntity::COLUMN_NODE_ID).toInt(), \n            _module.GetValue(ModuleEntity::COLUMN_PIN_NUMBER).toInt(), _button.GetValue(ButtonEntity::COLUMN_BUTTON_TYPE), _button.GetValue(ButtonEntity::COLUMN_ACTIVE_HIGH).toInt(), _button.GetValue(ButtonEntity::COLUMN_PULLUP_ACTIVE).toInt(), _button.GetValue(ButtonEntity::COLUMN_DEBOUNCE_DELAY).toInt());\n            // for (size_t j = 0; j < modules.size(); j++)\n            // {\n            //     modules[j].~ModuleEntity();\n            // }\n            modules.empty();\n            return fullButton;\n        }        \n    }\n    return fullButton;\n}\n\nstd::vector<ButtonFullEntity> ModulesController::getAllButtons()\n{\n    buttonController = new ButtonController(context, _storageType);\n    \n    std::vector<ButtonFullEntity> buttons = std::vector<ButtonFullEntity>();\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n    _module.fromString(_module.toString());\n        if (_module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE) == ModuleTypes::BUTTON)\n        {\n            ButtonEntity _button = buttonController->GetById(_module.id);\n            _button.fromString(_button.toString());\n            ButtonFullEntity fullButton = ButtonFullEntity(_module.id, _button.id, _module.GetValue(ModuleEntity::COLUMN_NAME), _module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE), _module.GetValue(ModuleEntity::COLUMN_CONNECTION_TYPE), _module.GetValue(ModuleEntity::COLUMN_NODE_ID).toInt(), \n            _module.GetValue(ModuleEntity::COLUMN_PIN_NUMBER).toInt(), _button.GetValue(ButtonEntity::COLUMN_BUTTON_TYPE), _button.GetValue(ButtonEntity::COLUMN_ACTIVE_HIGH).toInt(), _button.GetValue(ButtonEntity::COLUMN_PULLUP_ACTIVE).toInt(), _button.GetValue(ButtonEntity::COLUMN_DEBOUNCE_DELAY).toInt());\n            buttons.push_back(fullButton);\n        }        \n    }\n    \n    for (size_t j = 0; j < modules.size(); j++)\n    {\n        // modules[j].~ModuleEntity();\n    }\n    \n    // modules.empty();\n    return buttons;\n}\n\nstd::vector<RelayFullEntity> ModulesController::getAllRelays()\n{\n    RelayController relayController = RelayController(context, _storageType);\n    std::vector<RelayFullEntity> relays;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module;\n        _module.fromString(modules.at(i).toString());\n        if (_module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE) == ModuleTypes::RELAY)\n        {\n            RelayEntity _relay;\n            _relay.fromString(relayController.Get(String(RelayEntity::COLUMN_MODULE_ID + \"=\" + _module.id)).at(0).toString());\n\n            RelayFullEntity fullRelay = RelayFullEntity(_relay.id, _module.id, _module.GetValue(ModuleEntity::COLUMN_NAME), \n                _module.GetValue(ModuleEntity::COLUMN_MODULE_TYPE), _module.GetValue(ModuleEntity::COLUMN_CONNECTION_TYPE), \n                _module.GetValue(ModuleEntity::COLUMN_NODE_ID).toInt(), _module.GetValue(ModuleEntity::COLUMN_PIN_NUMBER).toInt(), \n                _relay.GetValue(RelayEntity::COLUMN_NORMALLY_OPEN).toInt());\n            relays.push_back(fullRelay);\n        }        \n    }\n    return relays;\n}\nstd::vector<LCDFullEntity> ModulesController::getAllLCDs()\n{\n    LCDController lcdController = LCDController(context, _storageType);\n    std::vector<LCDFullEntity> lcds;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n        if (_module.ModuleType == ModuleTypes::LCD)\n        {\n            LCDEntity _lcd = lcdController.GetById(_module.id);\n            LCDFullEntity fullLcd = LCDFullEntity(_module.id, _lcd.id, _module.Name, _module.ModuleType, _module.ConnectionType, _module.NodeId, \n            _module.PinNumber, _lcd.Address, _lcd.Rows, _lcd.Cols, _lcd.Type);\n            lcds.push_back(fullLcd);\n        }        \n    }\n    return lcds;\n}\n\nstd::vector<DHTFullEntity> ModulesController::getAllDHTs()\n{\n    DHTController dhtController = DHTController(context, _storageType);\n    std::vector<DHTFullEntity> dhts;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n        if (_module.ModuleType == ModuleTypes::DHT)\n        {\n            DHTEntity _dht = dhtController.GetById(_module.id);\n            DHTFullEntity fullDht = DHTFullEntity(_module.id, _dht.id, _module.Name, _module.ModuleType, _module.ConnectionType, _module.NodeId, \n            _module.PinNumber, _dht.Type, _dht.DryTreshold, _dht.WetTreshold, _dht.CoolTreshold, _dht.HotTreshold);\n            dhts.push_back(fullDht);\n        }        \n    }\n    return dhts;\n}\n\nstd::vector<RGBFullEntity> ModulesController::getAllRGBs()\n{\n    RGBController rgbController = RGBController(context, _storageType);\n    std::vector<RGBFullEntity> rgbs;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n        if (_module.ModuleType == ModuleTypes::RGB)\n        {\n            RGBEntity _rgb = rgbController.GetById(_module.id);\n            RGBFullEntity fullRgb = RGBFullEntity(_module.id, _rgb.id, _module.Name, _module.ModuleType, _module.ConnectionType, _module.NodeId, \n            _module.PinNumber, _rgb.Type, _rgb.Rpin, _rgb.Gpin, _rgb.Bpin);\n            rgbs.push_back(fullRgb);\n        }        \n    }\n    return rgbs;\n}\n\nstd::vector<PhotoresistorFullEntity> ModulesController::getAllPhotoresistors()\n{\n    PhotoresistorController photoresistorController = PhotoresistorController(context, _storageType);\n    std::vector<PhotoresistorFullEntity> photoresistors;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n        if (_module.ModuleType == ModuleTypes::PHOTORESISTOR)\n        {\n            PhotoresistorEntity _photoresistor = photoresistorController.GetById(_module.id);\n            PhotoresistorFullEntity fullPhotoresistor = PhotoresistorFullEntity(_module.id, _photoresistor.id, _module.Name, _module.ModuleType, _module.ConnectionType, _module.NodeId, \n            _module.PinNumber, _photoresistor.LowTreshold, _photoresistor.HighTreshold);\n            photoresistors.push_back(fullPhotoresistor);\n        }        \n    }\n    return photoresistors;\n}\n\nint ModulesController::AddButton(ButtonFullEntity button)\n{\n    ModuleEntity *_module = new ModuleEntity(button.ModuleId, button.Name, button.ModuleType,button.ConnectionType, button.NodeId, button.PinNumber);\n    int _module_id = Add(*_module);\n    ButtonEntity *_button = new ButtonEntity(_module_id, button.ButtonType, button.ActiveHigh, button.PullupActive, button.DebounceDelay);\n    ButtonController *buttonController = new ButtonController(context, _storageType);\n    return buttonController->Add(*_button);\n}\n\nint ModulesController::AddRelay(RelayFullEntity relay)\n{\n    ModuleEntity *_module = new ModuleEntity(relay.ModuleId, relay.Name, relay.ModuleType, relay.ConnectionType, relay.NodeId, relay.PinNumber);\n    int _moduleId = Add(*_module);\n    RelayEntity *_relay = new RelayEntity(_moduleId, relay.NormallyOpen);\n    RelayController *relayController = new RelayController(context, _storageType);\n\n    return relayController->Add(*_relay);\n}\n\nint ModulesController::AddLCD(LCDFullEntity lcd)\n{\n    ModuleEntity *_module = new ModuleEntity(lcd.ModuleId, lcd.Name, lcd.ModuleType, lcd.ConnectionType, lcd.NodeId, lcd.PinNumber);\n    int _module_id = Add(*_module);\n    LCDEntity *_lcd = new LCDEntity(_module_id, lcd.Address, lcd.Rows, lcd.Cols, lcd.Type);\n    LCDController *lcdController = new LCDController(context, _storageType);\n\n    return lcdController->Add(*_lcd);\n}\n\nvoid ModulesController::AddDHT(DHTFullEntity dht)\n{\n    ModuleEntity *_module = new ModuleEntity(dht.ModuleId, dht.Name, dht.ModuleType, dht.ConnectionType, dht.NodeId, dht.PinNumber);\n    DHTEntity *_dht = new DHTEntity(dht.Type, dht.DryTreshold, dht.WetTreshold, dht.CoolTreshold, dht.HotTreshold);\n    DHTController *dhtController = new DHTController(context, _storageType);\n\n    dhtController->Add(*_dht);\n    Add(*_module);\n}\n\nvoid ModulesController::AddRGB(RGBFullEntity rgb)\n{\n    ModuleEntity *_module = new ModuleEntity(rgb.ModuleId, rgb.Name, rgb.ModuleType, rgb.ConnectionType, rgb.NodeId, rgb.PinNumber);\n    RGBEntity *_rgb = new RGBEntity(rgb.Type, rgb.Rpin, rgb.Gpin, rgb.Bpin);\n    RGBController *rgbController = new RGBController(context, _storageType);\n\n    rgbController->Add(*_rgb);\n    Add(*_module);\n}\n\nvoid ModulesController::AddPhotoresistor(PhotoresistorFullEntity photoresistor)\n{\n    ModuleEntity *_module = new ModuleEntity(photoresistor.ModuleId, photoresistor.Name, photoresistor.ModuleType, photoresistor.ConnectionType, photoresistor.NodeId, photoresistor.PinNumber);\n    PhotoresistorEntity *_photoresistor = new PhotoresistorEntity(photoresistor.LowTreshold, photoresistor.HighTreshold);\n    PhotoresistorController *photoresistorController = new PhotoresistorController(context, _storageType);\n\n    photoresistorController->Add(*_photoresistor);\n    Add(*_module);\n}\n\nstd::vector<SoilMoistureFullEntity> ModulesController::getAllSoilMoistures()\n{\n    SoilMoistureController soilMoistureController = SoilMoistureController(context, _storageType);\n    std::vector<SoilMoistureFullEntity> soilMoistures;\n    std::vector<ModuleEntity> modules = GetAll();\n    for (size_t i = 0; i < modules.size(); i++)\n    {\n        ModuleEntity _module = modules.at(i);\n        if (_module.ModuleType == ModuleTypes::SOILMOISTURE)\n        {\n            SoilMoistureEntity _soilMoisture = soilMoistureController.GetById(_module.id);\n            SoilMoistureFullEntity fullSoilMoisture = SoilMoistureFullEntity(_module.id, _soilMoisture.id, _module.Name, _module.ModuleType, _module.ConnectionType, _module.NodeId, \n            _module.PinNumber, _soilMoisture.DryTreshold, _soilMoisture.WetTreshold, _soilMoisture.Type);\n            soilMoistures.push_back(fullSoilMoisture);\n        }        \n    }\n    return soilMoistures;\n}\n\nvoid ModulesController::AddSoilMoisture(SoilMoistureFullEntity soilMoisture)\n{\n    ModuleEntity *_module = new ModuleEntity(soilMoisture.ModuleId, soilMoisture.Name, soilMoisture.ModuleType, soilMoisture.ConnectionType, soilMoisture.NodeId, soilMoisture.PinNumber);\n    SoilMoistureEntity *_soilMoisture = new SoilMoistureEntity(0, soilMoisture.DryTreshold, soilMoisture.WetTreshold, soilMoisture.Type);\n    SoilMoistureController *soilMoistureController = new SoilMoistureController(context, _storageType);\n\n    soilMoistureController->Add(*_soilMoisture);\n    Add(*_module);\n}\n\n#endif // MODULESCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\PhotoresistorController.h",
        "content": "#ifndef PHOTORESISTORCONTROLLER_H\n#define PHOTORESISTORCONTROLLER_H\n\n#include \"../../Entities/Modules/PhotoresistorEntity.h\"\n#include \"../MainController.h\"\n\nclass PhotoresistorController : public MainController<PhotoresistorEntity> {\nprotected:\n    Context* context;\npublic:\n    PhotoresistorController(Context* context, StorageType _storageType) : MainController<PhotoresistorEntity>(context, \"photoresistor\", _storageType), context(context) {}\n};\n\n#endif // PHOTORESISTORCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\RelayController.h",
        "content": "#ifndef RELAYCONTROLLER_H\n#define RELAYCONTROLLER_H\n\n#include \"../../Entities/Modules/RelayEntity.h\"\n#include \"../MainController.h\"\n\nclass RelayController : public MainController<RelayEntity> {\nprotected:\n    Context* context;\npublic:\n    RelayController(Context* context, StorageType _storageType) : MainController<RelayEntity>(context, \"relay\", _storageType), context(context) {}\n};\n\n#endif // RELAYCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\RGBController.h",
        "content": "#ifndef RGBCONTROLLER_H\n#define RGBCONTROLLER_H\n\n#include \"../../Entities/Modules/RGBEntity.h\"\n#include \"../MainController.h\"\n\nclass RGBController : public MainController<RGBEntity> {\nprotected:\n    Context* context;\npublic:\n    RGBController(Context* context, StorageType _storageType) : MainController<RGBEntity>(context, \"rgb\", _storageType), context(context) {}\n};\n\n#endif // RGBCONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Modules\\SoilMoistureController.h",
        "content": "#ifndef SOILMOISTURECONTROLLER_H\n#define SOILMOISTURECONTROLLER_H\n\n#include \"../../Entities/Modules/SoilMoistureEntity.h\"\n#include \"../MainController.h\"\n\nclass SoilMoistureController : public MainController<SoilMoistureEntity> {\nprotected:\n    Context* context;\npublic:\n    SoilMoistureController(Context* context, StorageType _storageType) : MainController<SoilMoistureEntity>(context, \"soilmoisture\", _storageType), context(context) {}\n};\n\n#endif // SOILMOISTURECONTROLLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\AccountActivityLogController.h",
        "content": "#ifndef ACCOUNTACTIVITYLOGCONTROLLER_H\n#define ACCOUNTACTIVITYLOGCONTROLLER_H\n\n#include \"../../Entities/Security/AccountActivityLogEntity.h\"\n#include \"../../../Context.h\"\n\nclass AccountActivityLogController : public MainController<AccountActivityLogEntity> {\npublic:\n    Context* context;\n    AccountActivityLogController(Context* context, StorageType _storageType) : MainController<AccountActivityLogEntity>(context ,\"accountactivitylog\", _storageType), context(context) {}\n};\n\n#endif // ACCOUNTACTIVITYLOGCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\AccountLockoutController.h",
        "content": "#ifndef ACCOUNTLOCKOUTCONTROLLER_H\n#define ACCOUNTLOCKOUTCONTROLLER_H\n\n#include <OStad.h>\n#include \"../../Entities/Security/AccountLockoutEntity.h\"\n#include \"../../../Context.h\"\n\nclass AccountLockoutController : public MainController<AccountLockoutEntity> {\npublic:\n    Context* context;\n    AccountLockoutController(Context* context, StorageType _storageType) : MainController<AccountLockoutEntity>(context ,\"accountlockout\", _storageType), context(context) {}\n};\n\n#endif // ACCOUNTLOCKOUTCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\AuthenticationConfigController.h",
        "content": "\n#ifndef AUTHENTICATIONCONFIGCONTROLLER_H\n#define AUTHENTICATIONCONFIGCONTROLLER_H\n\n#include \"../../Entities/KeyValueEntity.h\"\n#include \"../../../Context.h\"\n\nclass AuthenticationConfigController : public MainController<KeyValueEntity>{\nprotected:\npublic:\n    Context* context;\n    AuthenticationConfigController(Context* context, StorageType _storageType) : MainController<KeyValueEntity>(context ,\"authentication_config\", _storageType), context(context) {}\n\n};\n\n#endif //AUTHENTICATIONCONFIGCONTROLLER_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\LoginAttemptController.h",
        "content": "#ifndef LOGINATTEMPTCONTROLLER_H\n#define LOGINATTEMPTCONTROLLER_H\n\n#include \"../../Entities/Security/LoginAttemptEntity.h\"\n#include \"../../../Context.h\"\n\nclass LoginAttemptController : public MainController<LoginAttemptEntity> {\npublic:\n    Context* context;\n    LoginAttemptController(Context* context, StorageType _storageType) : MainController<LoginAttemptEntity>(context ,\"loginattempt\", _storageType), context(context) {}\n};\n\n#endif // LOGINATTEMPTCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\PermissionController.h",
        "content": "#ifndef PERMISSIONCONTROLLER_H\n#define PERMISSIONCONTROLLER_H\n\n#include \"../../Entities/Security/PermissionEntity.h\"\n#include \"../../../Context.h\"\n\nclass PermissionController : public MainController<PermissionEntity> {\npublic:\n    Context* context;\n    PermissionController(Context* context, StorageType _storageType) : MainController<PermissionEntity>(context ,\"permission\", _storageType), context(context) {}\n};\n\n#endif // PERMISSIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\RoleController.h",
        "content": "#ifndef ROLECONTROLLER_H\n#define ROLECONTROLLER_H\n\n#include \"../../Entities/Security/RoleEntity.h\"\n#include \"../../../Context.h\"\n\nclass RoleController : public MainController<RoleEntity> {\npublic:\n    Context* context;\n    RoleController(Context* context, StorageType _storageType) : MainController<RoleEntity>(context ,\"role\", _storageType), context(context) {}\n};\n\n#endif // ROLECONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\RolePermissionController.h",
        "content": "#ifndef ROLEPERMISSIONCONTROLLER_H\n#define ROLEPERMISSIONCONTROLLER_H\n\n#include \"../../Entities/Security/RolePermissionEntity.h\"\n#include \"../../../Context.h\"\n\nclass RolePermissionController : public MainController<RolePermissionEntity> {\npublic:\n    Context* context;\n    RolePermissionController(Context* context, StorageType _storageType) : MainController<RolePermissionEntity>(context ,\"rolepermission\", _storageType), context(context) {}\n};\n\n#endif // ROLEPERMISSIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\SecurityQuestionController.h",
        "content": "#ifndef SECURITYQUESTIONCONTROLLER_H\n#define SECURITYQUESTIONCONTROLLER_H\n\n#include <OStad.h>\n#include \"../../Entities/Security/SecurityQuestionEntity.h\"\n#include \"../../../Context.h\"\n\nclass SecurityQuestionController : public MainController<SecurityQuestionEntity> {\npublic:\n    Context* context;\n    SecurityQuestionController(Context* context, StorageType _storageType) : MainController<SecurityQuestionEntity>(context ,\"securityquestion\", _storageType), context(context) {}\n};\n\n#endif // SECURITYQUESTIONCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\SecurityQuestionTitleController.h",
        "content": "#ifndef SECURITYQUESTIONTITLECONTROLLER_H\n#define SECURITYQUESTIONTITLECONTROLLER_H\n\n#include <OStad.h>\n#include \"../../Entities/Security/SecurityQuestionTitleEntity.h\"\n#include \"../../../Context.h\"\n\nclass SecurityQuestionTitleController : public MainController<SecurityQuestionTitleEntity> {\npublic:\n    Context* context;\n    SecurityQuestionTitleController(Context* context, StorageType _storageType) : MainController<SecurityQuestionTitleEntity>(context ,\"securityquestiontitle\", _storageType), context(context) {}\n};\n\n#endif // SECURITYQUESTIONTITLECONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\TwoFactorAuthController.h",
        "content": "#ifndef TWOFACTORAUTHCONTROLLER_H\n#define TWOFACTORAUTHCONTROLLER_H\n\n#include <OStad.h>\n#include \"../../Entities/Security/TwoFactorAuthEntity.h\"\n#include \"../../../Context.h\"\n\nclass TwoFactorAuthController : public MainController<TwoFactorAuthEntity> {\npublic:\n    Context* context;\n    TwoFactorAuthController(Context* context, StorageType _storageType) : MainController<TwoFactorAuthEntity>(context ,\"twofactorauth\", _storageType), context(context) {}\n};\n\n#endif // TWOFACTORAUTHCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\UserController.h",
        "content": "#ifndef USERCONTROLLER_H\n#define USERCONTROLLER_H\n\n#include \"../../Entities/Security/UserEntity.h\"\n#include \"../../../Context.h\"\n\nclass UserController : public MainController<UserEntity> {\npublic:\n    Context* context;\n    UserController(Context* context, StorageType _storageType) : MainController<UserEntity>(context ,\"user\", _storageType), context(context) {}\n};\n\n#endif // USERCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Controllers\\Security\\UserResetPassController.h",
        "content": "#ifndef USERRESETPASSCONTROLLER_H\n#define USERRESETPASSCONTROLLER_H\n\n#include <OStad.h>\n#include \"../../Entities/Security/UserResetPassEntity.h\"\n#include \"../../../Context.h\"\n\nclass UserResetPassController : public MainController<UserResetPassEntity> {\npublic:\n    Context* context;\n    UserResetPassController(Context* context, StorageType _storageType) : MainController<UserResetPassEntity>(context ,\"userresetpass\", _storageType), context(context) {}\n};\n\n#endif // USERRESETPASSCONTROLLER_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Entity.h",
        "content": "#ifndef ENTITY_H\n#define ENTITY_H\n\n#include <vector>\n#include <ArduinoJson.h>\n#include \"../../Clock/EBPDateTime.h\"\n\nstruct Column {\n  String name;\n  String type;\n  String value;\n};\n\nclass Entity {\n  public:\n    int id = -1;\n    bool isValid = true;\n    EBPDateTime createDate;\n    \n    Entity() \n    {\n      createDate = EBPDateTime(2000,1,1,0,0,0);\n    }\n    \n    Entity(String &str) :Entity(){\n      fromString(str);\n    }\n    static Entity Invalid() {\n      Entity invalidEntity;\n      invalidEntity.isValid = false;\n      return invalidEntity;\n    }\n    std::vector<Column> _columns;\n    String GetValue(String column_name);\n    void SetValue(String column_name, String value);\n    String toString();\n    String toJson();\n    void fromString(String str);\n    void addColumn(String column_name, String value, String type);\n    void removeColumn(String column_name);\n    Entity toEntity() const;\n\n};\n\n\nEntity Entity::toEntity() const \n{\n  Entity newEntity;\n  newEntity.id = this->id;\n  newEntity.isValid = this->isValid;\n  newEntity._columns = this->_columns;\n  newEntity.createDate = this->createDate;\n  return newEntity;\n}\n\nvoid Entity::removeColumn(String column_name) {\n  for (int i = 0; i < _columns.size(); i++) {\n    if (_columns[i].name == column_name) {\n      _columns.erase(_columns.begin() + i);\n      return;\n    }\n  }\n}\n\nString Entity::GetValue(String column_name) {\n  for (int i = 0; i < _columns.size(); i++) {\n    if (_columns[i].name == column_name) {\n      return _columns[i].value;\n    }\n  }\n  return \"\";\n}\n\nvoid Entity::SetValue(String column_name, String value) {\n  for (int i = 0; i < _columns.size(); i++) {\n    if (_columns[i].name == column_name) {\n      _columns[i].value = value;\n      return;\n    }\n  }\n  _columns.push_back({column_name, \"string\", value});\n}\n\nString Entity::toString() {\n\n  String str = String(id) + \",\";\n  for (int i = 0; i < _columns.size(); i++) {\n    str += _columns[i].name + \"=\" + _columns[i].value + \",\";\n  }\n  str += createDate.toDateTimeString();\n  return str;\n}\n\n\nvoid Entity::fromString(String str) {\n  int index = str.indexOf(\",\");\n  id = str.substring(0, index).toInt();\n  str = str.substring(index + 1);\n  while (str.length() > 0) {\n      index = str.indexOf(\"=\");\n      String name = str.substring(0, index);\n      str = str.substring(index + 1);\n      index = str.indexOf(\",\");\n      if (index < 0) {\n          index = str.length();\n      }\n      String value = str.substring(0, index);\n      name.trim();\n      if(name.length() > 0) {\n          if(str.indexOf(\",\") < 0 && str.indexOf(\"=\") < 0) { // This is the last element and no more columns exist\n              createDate.fromString(value);\n          }\n          else {\n              SetValue(name, value);\n          }\n      }\n      str = str.substring(index + 1);\n  }\n}\n\n\nvoid Entity::addColumn(String column_name, String value, String type) {\n  // if (!Validation::isColumnNameValid(column_name)) {\n  //   ErrorHandler::handleError(ErrorHandler::CustomError, \"Invalid column name: \" + column_name);\n  //   return;\n  // }\n\n  for (int i = 0; i < _columns.size(); i++) {\n    if (_columns[i].name == column_name) {\n      // ErrorHandler::handleError(ErrorHandler::CustomError, \"Column name already exists: \" + column_name);\n      return;\n    }\n  }\n  _columns.push_back({column_name, type, value});\n}\n\nString Entity::toJson() {\n  DynamicJsonDocument doc(512);\n  doc[\"id\"] = id;\n  for (int i = 0; i < _columns.size(); i++) {\n    doc[_columns[i].name] = _columns[i].value;\n  }\n  doc[\"create_date\"] = createDate.toDateTimeString();\n  String json;\n  serializeJson(doc, json);\n  doc.clear();\n  return json;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\FileSystem.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\IEntity.h",
        "content": "#ifndef IENTITY_H\n#define IENTITY_H\n\n#include <vector>\n#include <ArduinoJson.h>\n#include \"../../Clock/EBPDateTime.h\"\n\nstruct Column {\n  String name;\n  String type;\n  String value;\n};\n\nclass IEntity {\n  public:\n    virtual String GetValue(String column_name);\n    virtual void SetValue(String column_name, String value);\n    virtual String toString();\n    virtual String toJson();\n    virtual void fromString(String str);\n    virtual void addColumn(String column_name, String value, String type);\n    virtual void removeColumn(String column_name);\n    virtual IEntity toEntity() const;\n};\n\n#endif //IENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\KeyValueEntity.h",
        "content": "#ifndef SYSTEMCONFIGENTITY_H\n#define SYSTEMCONFIGENTITY_H\n\n#include \"Entity.h\"\n\nclass KeyValueEntity : public Entity {\npublic:\n    static const String COLUMN_KEY;\n    static const String COLUMN_VALUE;\n\n    String key;\n    String value;\n\n    KeyValueEntity() : Entity() {}\n\n    KeyValueEntity(int id, const String &_key, const String &_value) : Entity() {\n        this->id = id;\n        key = _key;\n        value = _value;\n        addColumn(COLUMN_KEY, key, \"string\");\n        addColumn(COLUMN_VALUE, value, \"string\");\n    }\n\n    KeyValueEntity(const String &_key, const String &_value) : KeyValueEntity(0, _key, _value) {}\n\n    static KeyValueEntity fromEntity(Entity entity)\n    {\n        KeyValueEntity systemConfigEntity = KeyValueEntity();\n        systemConfigEntity.fromString(entity.toString());\n        return systemConfigEntity;\n    }\n\n    void setKey(const String &_key) {\n        key = _key;\n        SetValue(COLUMN_KEY, _key);\n    }\n\n    String getKey() {\n        return GetValue(COLUMN_KEY);\n    }\n\n    void setValue(const String &_value) {\n        value = _value;\n        SetValue(COLUMN_VALUE, _value);\n    }\n\n    String getValue() {\n        return GetValue(COLUMN_VALUE);\n    }\n};\n\nconst String KeyValueEntity::COLUMN_KEY = \"key\";\nconst String KeyValueEntity::COLUMN_VALUE = \"value\";\n\n#endif // SYSTEMCONFIGENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\LogEntitiy.h",
        "content": "#ifndef LOGENTITY_H\n#define LOGENTITY_H\n\n#include \"Entity.h\"\n\nenum LogLevel {\n    DEBUG_LEVEL,\n    INFO_LEVEL,\n    WARNING_LEVEL,\n    ERROR_LEVEL\n};\nclass LogEntity : public Entity {\npublic:\n\n\n    static const String COLUMN_LOG_TYPE;\n    static const String COLUMN_LOG_TITLE;\n    static const String COLUMN_MESSAGE;\n\n    LogLevel logLevel;\n    String logTitle;\n    String message;\n\n    LogEntity() : Entity() {}\n\n    LogEntity(int id, LogLevel _logLevel, const String &_logTitle, const String &_message) : Entity() {\n        this->id = id;\n        logLevel = _logLevel;\n        logTitle = _logTitle;\n        message = _message;\n        addColumn(COLUMN_LOG_TYPE, String(static_cast<int>(logLevel)), \"int\");\n        addColumn(COLUMN_LOG_TITLE, logTitle, \"string\");\n        addColumn(COLUMN_MESSAGE, message, \"string\");\n    }\n    LogEntity(int id, String _logLevel, const String &_logTitle, const String &_message) : LogEntity(id, getLogLevelFromString(_logLevel), _logTitle, _message)\n    {\n\n    }\n\n    LogEntity(LogLevel _logLevel, const String &_logTitle, const String &_message) : LogEntity(0, _logLevel, _logTitle, _message) {}\n    LogEntity(String &_logLevel, const String &_logTitle, const String &_message) : LogEntity(0, getLogLevelFromString(_logLevel), _logTitle, _message) {}\n\n    static LogEntity fromEntity(Entity entity)\n    {\n        LogEntity logEntity = LogEntity();\n        logEntity.fromString(entity.toString());\n        return logEntity;\n    }\n\n    void setLogType(LogLevel _logLevel) {\n        logLevel = _logLevel;\n        SetValue(COLUMN_LOG_TYPE, String(static_cast<int>(logLevel)));\n    }\n\n    LogLevel getLogType() {\n        return logLevel;\n    }\n\n    void setLogTitle(const String &_logTitle) {\n        logTitle = _logTitle;\n        SetValue(COLUMN_LOG_TITLE, _logTitle);\n    }\n\n    String getLogTitle() {\n        return logTitle;\n    }\n\n    void setMessage(const String &_message) {\n        message = _message;\n        SetValue(COLUMN_MESSAGE, _message);\n    }\n\n    String getMessage() {\n        return message;\n    }\n\n    LogLevel getLogLevelFromString(String& loglevelStr) {\n        if (loglevelStr == \"DEBUG_LEVEL\") {\n            return DEBUG_LEVEL;\n        } else if (loglevelStr == \"INFO_LEVEL\") {\n            return INFO_LEVEL;\n        } else if (loglevelStr == \"WARNING_LEVEL\") {\n            return WARNING_LEVEL;\n        } else if (loglevelStr == \"ERROR_LEVEL\") {\n            return ERROR_LEVEL;\n        }\n\n        // Optionally, handle the case where the string does not match any LogLevel\n        throw std::invalid_argument(\"Invalid log level string\");\n    }\n\n};\n\nconst String LogEntity::COLUMN_LOG_TYPE = \"logLevel\";\nconst String LogEntity::COLUMN_LOG_TITLE = \"logTitle\";\nconst String LogEntity::COLUMN_MESSAGE = \"message\";\n\n#endif // LOGENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\WiFiEntity.h",
        "content": "#ifndef WIFIENTITY_H\n#define WIFIENTITY_H\n\n#include \"Entity.h\"\n\nclass WiFiEntity : public Entity {\npublic:\n    static const String COLUMN_SSID;\n    static const String COLUMN_PASSWORD;\n\n    String SSID;\n    String Password;\n\n    WiFiEntity() : Entity() {}\n\n    WiFiEntity(int id, const String &_SSID, const String &_Password) : Entity() {\n        this->id = id;\n        SSID = _SSID;\n        Password = _Password;\n        addColumn(COLUMN_SSID, SSID, \"string\");\n        addColumn(COLUMN_PASSWORD, Password, \"string\");\n    }\n\n    WiFiEntity(const String &_SSID, const String &_Password) : WiFiEntity(0, _SSID, _Password) {}\n\n    static WiFiEntity fromEntity(Entity entity)\n    {\n        WiFiEntity wifiEntity = WiFiEntity();\n        wifiEntity.fromString(entity.toString());\n        return wifiEntity;\n    }\n\n    void setSSID(const String &_SSID) {\n        SSID = _SSID;\n        SetValue(COLUMN_SSID, _SSID);\n    }\n\n    String getSSID() {\n        return GetValue(COLUMN_SSID);\n    }\n\n    void setPassword(const String &_Password) {\n        Password = _Password;\n        SetValue(COLUMN_PASSWORD, _Password);\n    }\n\n    String getPassword() {\n        return GetValue(COLUMN_PASSWORD);\n    }\n};\n\nconst String WiFiEntity::COLUMN_SSID = \"SSID\";\nconst String WiFiEntity::COLUMN_PASSWORD = \"Password\";\n\n#endif // WIFIENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\ButtonEntity.h",
        "content": "#ifndef BUTTONENTITY_H\n#define BUTTONENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass ButtonEntity : public Entity {\npublic:\n    static const String COLUMN_MODULE_ID;\n    static const String COLUMN_BUTTON_TYPE;\n    static const String COLUMN_ACTIVE_HIGH;\n    static const String COLUMN_PULLUP_ACTIVE;\n    static const String COLUMN_DEBOUNCE_DELAY;\n\n    int ModuleId;\n    String ButtonType;\n    bool ActiveHigh;\n    bool PullupActive;\n    int DebounceDelay;\n\n    ButtonEntity()  : Entity(){}\n\n    ButtonEntity(int id, int moduleId, const String &_ButtonType, bool activeHigh, bool pullupActive, int debounceDelay) : Entity() {\n        this->id = id;\n        ModuleId = moduleId;\n        ButtonType = _ButtonType;\n        ActiveHigh = activeHigh;\n        PullupActive = pullupActive;\n        DebounceDelay = debounceDelay;\n        addColumn(COLUMN_MODULE_ID, String(ModuleId), \"int\");\n        addColumn(COLUMN_BUTTON_TYPE, ButtonType, \"string\");\n        addColumn(COLUMN_ACTIVE_HIGH, String(ActiveHigh), \"bool\");\n        addColumn(COLUMN_PULLUP_ACTIVE, String(PullupActive), \"bool\");\n        addColumn(COLUMN_DEBOUNCE_DELAY, String(DebounceDelay), \"int\");\n    }\n\n    ButtonEntity(int moduleId, const String &_ButtonType, bool activeHigh, bool pullupActive, int debounceDelay) : \n        ButtonEntity(0, moduleId, _ButtonType, activeHigh, pullupActive, debounceDelay)  {}\n\n    static ButtonEntity fromEntity(Entity entity)\n    {\n        ButtonEntity buttonEntity = ButtonEntity();\n        buttonEntity.fromString(entity.toString());\n        return buttonEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String ButtonEntity::COLUMN_MODULE_ID = \"ModuleId\";\nconst String ButtonEntity::COLUMN_BUTTON_TYPE = \"ButtonType\";\nconst String ButtonEntity::COLUMN_ACTIVE_HIGH = \"ActiveHigh\";\nconst String ButtonEntity::COLUMN_PULLUP_ACTIVE = \"PullupActive\";\nconst String ButtonEntity::COLUMN_DEBOUNCE_DELAY = \"DebounceDelay\";\n\n#endif // BUTTONENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\ButtonFullEntity.h",
        "content": "#ifndef BUTTONFULLENTITY_H\n#define BUTTONFULLENTITY_H\n\n\nclass ButtonFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    String ButtonType;\n    bool ActiveHigh;\n    bool PullupActive;\n    int DebounceDelay;\n    int longPressTime;\n\n    ButtonFullEntity() {}\n\n    ButtonFullEntity(int id, int moduleId, String _Name, String _ModuleType, String _ConnectionType, int nodeId,\n                     int pinNumber, String _ButtonType, bool activeHigh, bool pullupActive, int debounceDelay)  {\n        this->id = id;\n        ButtonType = _ButtonType;\n        ActiveHigh = activeHigh;\n        PullupActive = pullupActive;\n        DebounceDelay = debounceDelay;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n\n    }\n\n};\n#endif // BUTTONFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\DHTEntity.h",
        "content": "#ifndef DHTENTITY_H\n#define DHTENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass DHTEntity : public Entity {\npublic:\n    static const String COLUMN_TYPE;\n    static const String COLUMN_DRY_TRESHOLD;\n    static const String COLUMN_WET_TRESHOLD;\n    static const String COLUMN_COOL_TRESHOLD;\n    static const String COLUMN_HOT_TRESHOLD;\n\n    String Type;\n    int DryTreshold;\n    int WetTreshold;\n    int CoolTreshold;\n    int HotTreshold;\n\n    DHTEntity() : Entity() {}\n\n    DHTEntity(int id, const String &_Type, int dryTreshold, int wetTreshold, int coolTreshold, int hotTreshold) : Entity() {\n        this->id = id;\n        Type = _Type;\n        DryTreshold = dryTreshold;\n        WetTreshold = wetTreshold;\n        CoolTreshold = coolTreshold;\n        HotTreshold = hotTreshold;\n        addColumn(COLUMN_TYPE, Type, \"string\");\n        addColumn(COLUMN_DRY_TRESHOLD, String(DryTreshold), \"int\");\n        addColumn(COLUMN_WET_TRESHOLD, String(WetTreshold), \"int\");\n        addColumn(COLUMN_COOL_TRESHOLD, String(CoolTreshold), \"int\");\n        addColumn(COLUMN_HOT_TRESHOLD, String(HotTreshold), \"int\");\n    }\n\n    DHTEntity(const String &_Type, int dryTreshold, int wetTreshold, int coolTreshold, int hotTreshold) : \n        DHTEntity(0, _Type, dryTreshold, wetTreshold, coolTreshold, hotTreshold) {}\n\n    static DHTEntity fromEntity(Entity entity)\n    {\n        DHTEntity dhtEntity = DHTEntity();\n        dhtEntity.fromString(entity.toString());\n        return dhtEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String DHTEntity::COLUMN_TYPE = \"Type\";\nconst String DHTEntity::COLUMN_DRY_TRESHOLD = \"DryTreshold\";\nconst String DHTEntity::COLUMN_WET_TRESHOLD = \"WetTreshold\";\nconst String DHTEntity::COLUMN_COOL_TRESHOLD = \"CoolTreshold\";\nconst String DHTEntity::COLUMN_HOT_TRESHOLD = \"HotTreshold\";\n\n#endif // DHTENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\DHTFullEntity.h",
        "content": "#ifndef DHTFULLENTITY_H\n#define DHTFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass DHTFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    String Type;\n    int DryTreshold;\n    int WetTreshold;\n    int CoolTreshold;\n    int HotTreshold;\n\n    DHTFullEntity() {}\n\n    DHTFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                  int pinNumber, const String &type, int dryTreshold, int wetTreshold, int coolTreshold, int hotTreshold) {\n        this->id = id;\n        Type = type;\n        DryTreshold = dryTreshold;\n        WetTreshold = wetTreshold;\n        CoolTreshold = coolTreshold;\n        HotTreshold = hotTreshold;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // DHTFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\LCDEntity.h",
        "content": "#ifndef LCDENTITY_H\n#define LCDENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass LCDEntity : public Entity {\npublic:\n    static const String COLUMN_MODULE_ID;\n    static const String COLUMN_ADDRESS;\n    static const String COLUMN_ROW;\n    static const String COLUMN_COL;\n    static const String COLUMN_TYPE;\n\n    int ModuleId;\n    int Address;\n    int Rows;\n    int Cols;\n    String Type;\n\n    LCDEntity() : Entity() {}\n\n    LCDEntity(int id, int moduleId, int address, int row, int col, const String &_Type) : Entity() {\n        this->id = id;\n        ModuleId = moduleId;\n        Address = address;\n        Rows = row;\n        Cols = col;\n        Type = _Type;\n        addColumn(COLUMN_ADDRESS, String(Address), \"int\");\n        addColumn(COLUMN_ROW, String(Rows), \"int\");\n        addColumn(COLUMN_COL, String(Cols), \"int\");\n        addColumn(COLUMN_TYPE, Type, \"string\");\n    }\n\n    LCDEntity(int moduleId, int address, int row, int col, const String &_Type) : \n        LCDEntity(0, moduleId, address, row, col, _Type) {}\n\n    static LCDEntity fromEntity(Entity entity)\n    {\n        LCDEntity lcdEntity = LCDEntity();\n        lcdEntity.fromString(entity.toString());\n        return lcdEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String LCDEntity::COLUMN_MODULE_ID = \"ModuleId\";\nconst String LCDEntity::COLUMN_ADDRESS = \"Address\";\nconst String LCDEntity::COLUMN_ROW = \"Rows\";\nconst String LCDEntity::COLUMN_COL = \"Cols\";\nconst String LCDEntity::COLUMN_TYPE = \"Type\";\n\n#endif // LCDENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\LCDFullEntity.h",
        "content": "#ifndef LCDFULLENTITY_H\n#define LCDFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass LCDFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    int Address;\n    int Rows;\n    int Cols;\n    String Type;\n\n    LCDFullEntity() {}\n\n    LCDFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                  int pinNumber, int address, int row, int col, const String &type) {\n        this->id = id;\n        Address = address;\n        Rows = row;\n        Cols = col;\n        Type = type;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // LCDFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\ModuleEntity.h",
        "content": "#ifndef MODULEENTITY_H\n#define MODULEENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass ModuleEntity : public Entity {\npublic:\n    static const String COLUMN_NAME;\n    static const String COLUMN_MODULE_TYPE;\n    static const String COLUMN_CONNECTION_TYPE;\n    static const String COLUMN_NODE_ID;\n    static const String COLUMN_PIN_NUMBER;\n\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n\n    ModuleEntity() : Entity(){}\n    \n    ~ModuleEntity(){}\n\n    ModuleEntity(int id, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId, int pinNumber) : Entity() {\n        this->id = id;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n        addColumn(COLUMN_NAME, Name, \"string\");\n        addColumn(COLUMN_MODULE_TYPE, ModuleType, \"string\");\n        addColumn(COLUMN_CONNECTION_TYPE, ConnectionType, \"string\");\n        addColumn(COLUMN_NODE_ID, String(NodeId), \"int\");\n        addColumn(COLUMN_PIN_NUMBER, String(PinNumber), \"int\");\n    }\n\n    ModuleEntity(const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId, int pinNumber) : \n        ModuleEntity(0, _Name, _ModuleType, _ConnectionType, nodeId, pinNumber) {}\n\n    static ModuleEntity fromEntity(Entity entity)\n    {\n        ModuleEntity moduleEntity = ModuleEntity();\n        moduleEntity.fromString(entity.toString());\n        return moduleEntity;\n    }\n\n    // Setters and Getters for each field\n\n};\n\nconst String ModuleEntity::COLUMN_NAME = \"Name\";\nconst String ModuleEntity::COLUMN_MODULE_TYPE = \"ModuleType\";\nconst String ModuleEntity::COLUMN_CONNECTION_TYPE = \"ConnectionType\";\nconst String ModuleEntity::COLUMN_NODE_ID = \"NodeId\";\nconst String ModuleEntity::COLUMN_PIN_NUMBER = \"PinNumber\";\n\n#endif // MODULEENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\PhotoresistorEntity.h",
        "content": "#ifndef PHOTORESISTORENTITY_H\n#define PHOTORESISTORENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass PhotoresistorEntity : public Entity {\npublic:\n    static const String COLUMN_LOW_TRESHOLD;\n    static const String COLUMN_HIGH_TRESHOLD;\n\n    int LowTreshold;\n    int HighTreshold;\n\n    PhotoresistorEntity() : Entity() {}\n\n    PhotoresistorEntity(int id, int lowTreshold, int highTreshold) : Entity() {\n        this->id = id;\n        LowTreshold = lowTreshold;\n        HighTreshold = highTreshold;\n        addColumn(COLUMN_LOW_TRESHOLD, String(LowTreshold), \"int\");\n        addColumn(COLUMN_HIGH_TRESHOLD, String(HighTreshold), \"int\");\n    }\n\n    PhotoresistorEntity(int lowTreshold, int highTreshold) : \n        PhotoresistorEntity(0, lowTreshold, highTreshold) {}\n\n    static PhotoresistorEntity fromEntity(Entity entity)\n    {\n        PhotoresistorEntity photoresistorEntity = PhotoresistorEntity();\n        photoresistorEntity.fromString(entity.toString());\n        return photoresistorEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String PhotoresistorEntity::COLUMN_LOW_TRESHOLD = \"LowTreshold\";\nconst String PhotoresistorEntity::COLUMN_HIGH_TRESHOLD = \"HighTreshold\";\n\n#endif // PHOTORESISTORENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\PhotoresistorFullEntity.h",
        "content": "#ifndef PHOTORESISTORFULLENTITY_H\n#define PHOTORESISTORFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass PhotoresistorFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    int LowTreshold;\n    int HighTreshold;\n\n    PhotoresistorFullEntity() {}\n\n    PhotoresistorFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                            int pinNumber, int lowTreshold, int highTreshold) {\n        this->id = id;\n        LowTreshold = lowTreshold;\n        HighTreshold = highTreshold;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // PHOTORESISTORFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\RelayEntity.h",
        "content": "#ifndef RELAYENTITY_H\n#define RELAYENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass RelayEntity : public Entity {\npublic:\n    static const String COLUMN_NORMALLY_OPEN;\n    static const String COLUMN_MODULE_ID;\n\n    int ModuleId;\n    bool NormallyOpen;\n\n    RelayEntity() : Entity() {}\n\n    RelayEntity(int id, int moduleId, bool normallyOpen) : Entity() {\n        this->id = id;\n        ModuleId = moduleId;\n        NormallyOpen = normallyOpen;\n        addColumn(COLUMN_MODULE_ID, String(ModuleId), \"int\");\n        addColumn(COLUMN_NORMALLY_OPEN, String(NormallyOpen), \"bool\");\n    }\n\n    RelayEntity(int moduleId, bool normallyOpen) : \n        RelayEntity(0, moduleId, normallyOpen) {}\n\n    static RelayEntity fromEntity(Entity entity)\n    {\n        RelayEntity relayEntity = RelayEntity();\n        relayEntity.fromString(entity.toString());\n        return relayEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String RelayEntity::COLUMN_MODULE_ID = \"ModuleId\";\nconst String RelayEntity::COLUMN_NORMALLY_OPEN = \"NormallyOpen\";\n\n#endif // RELAYENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\RelayFullEntity.h",
        "content": "#ifndef RELAYFULLENTITY_H\n#define RELAYFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass RelayFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    bool NormallyOpen;\n\n    RelayFullEntity() {}\n\n    RelayFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                    int pinNumber, bool normallyOpen) {\n        this->id = id;\n        NormallyOpen = normallyOpen;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // RELAYFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\RGBEntity.h",
        "content": "#ifndef RGBENTITY_H\n#define RGBENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass RGBEntity : public Entity {\npublic:\n    static const String COLUMN_TYPE;\n    static const String COLUMN_RPIN;\n    static const String COLUMN_GPIN;\n    static const String COLUMN_BPIN;\n\n    String Type;\n    int Rpin;\n    int Gpin;\n    int Bpin;\n\n    RGBEntity() : Entity() {}\n\n    RGBEntity(int id, const String &_Type, int rpin, int gpin, int bpin) : Entity() {\n        this->id = id;\n        Type = _Type;\n        Rpin = rpin;\n        Gpin = gpin;\n        Bpin = bpin;\n        addColumn(COLUMN_TYPE, Type, \"string\");\n        addColumn(COLUMN_RPIN, String(Rpin), \"int\");\n        addColumn(COLUMN_GPIN, String(Gpin), \"int\");\n        addColumn(COLUMN_BPIN, String(Bpin), \"int\");\n    }\n\n    RGBEntity(const String &_Type, int rpin, int gpin, int bpin) : \n        RGBEntity(0, _Type, rpin, gpin, bpin) {}\n\n    static RGBEntity fromEntity(Entity entity)\n    {\n        RGBEntity rgbEntity = RGBEntity();\n        rgbEntity.fromString(entity.toString());\n        return rgbEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String RGBEntity::COLUMN_TYPE = \"Type\";\nconst String RGBEntity::COLUMN_RPIN = \"Rpin\";\nconst String RGBEntity::COLUMN_GPIN = \"Gpin\";\nconst String RGBEntity::COLUMN_BPIN = \"Bpin\";\n\n#endif // RGBENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\RGBFullEntity.h",
        "content": "#ifndef RGBFULLENTITY_H\n#define RGBFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass RGBFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    String Type;\n    int Rpin;\n    int Gpin;\n    int Bpin;\n\n    RGBFullEntity() {}\n\n    RGBFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                  int pinNumber, const String &type, int rpin, int gpin, int bpin) {\n        this->id = id;\n        Type = type;\n        Rpin = rpin;\n        Gpin = gpin;\n        Bpin = bpin;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // RGBFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\SoilMoistureEntity.h",
        "content": "#ifndef SOILMOISTUREENTITY_H\n#define SOILMOISTUREENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass SoilMoistureEntity : public Entity {\npublic:\n    static const String COLUMN_DRY_TRESHOLD;\n    static const String COLUMN_WET_TRESHOLD;\n    static const String COLUMN_TYPE;\n\n    int DryTreshold;\n    int WetTreshold;\n    String Type;\n\n    SoilMoistureEntity() : Entity() {}\n\n    SoilMoistureEntity(int id, int dryTreshold, int wetTreshold, const String &_Type) : Entity() {\n        this->id = id;\n        DryTreshold = dryTreshold;\n        WetTreshold = wetTreshold;\n        Type = _Type;\n        addColumn(COLUMN_DRY_TRESHOLD, String(DryTreshold), \"int\");\n        addColumn(COLUMN_WET_TRESHOLD, String(WetTreshold), \"int\");\n        addColumn(COLUMN_TYPE, Type, \"string\");\n    }\n\n    SoilMoistureEntity(int dryTreshold, int wetTreshold, const String &_Type) : \n        SoilMoistureEntity(0, dryTreshold, wetTreshold, _Type) {}\n\n    static SoilMoistureEntity fromEntity(Entity entity)\n    {\n        SoilMoistureEntity soilMoistureEntity = SoilMoistureEntity();\n        soilMoistureEntity.fromString(entity.toString());\n        return soilMoistureEntity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String SoilMoistureEntity::COLUMN_DRY_TRESHOLD = \"DryTreshold\";\nconst String SoilMoistureEntity::COLUMN_WET_TRESHOLD = \"WetTreshold\";\nconst String SoilMoistureEntity::COLUMN_TYPE = \"Type\";\n\n#endif // SOILMOISTUREENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Modules\\SoilMoistureFullEntity.h",
        "content": "#ifndef SOILMOISTUREFULLENTITY_H\n#define SOILMOISTUREFULLENTITY_H\n\n#include \"..\\Entity.h\"\n\nclass SoilMoistureFullEntity {\npublic:\n    int id;\n    int ModuleId;\n    String Name;\n    String ModuleType;\n    String ConnectionType;\n    int NodeId;\n    int PinNumber;\n    int DryTreshold;\n    int WetTreshold;\n    String Type;\n\n    SoilMoistureFullEntity() {}\n\n    SoilMoistureFullEntity(int id, int moduleId, const String &_Name, const String &_ModuleType, const String &_ConnectionType, int nodeId,\n                           int pinNumber, int dryTreshold, int wetTreshold, const String &type) {\n        this->id = id;\n        DryTreshold = dryTreshold;\n        WetTreshold = wetTreshold;\n        Type = type;\n        ModuleId = moduleId;\n        Name = _Name;\n        ModuleType = _ModuleType;\n        ConnectionType = _ConnectionType;\n        NodeId = nodeId;\n        PinNumber = pinNumber;\n    }\n};\n\n#endif // SOILMOISTUREFULLENTITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\AccountActivityLogEntity.h",
        "content": "#ifndef ACCOUNTACTIVITYLOGENTITY_H\n#define ACCOUNTACTIVITYLOGENTITY_H\n\n#include \"../Entity.h\"\n\nclass AccountActivityLogEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_ACTIVITY;\n    static const String COLUMN_TIMESTAMP;\n    \n\n    int UserId;\n    String Activity;\n    EBPDateTime Timestamp;\n    \n\n    AccountActivityLogEntity()  : Entity(){}\n\n    AccountActivityLogEntity(int id, int _UserId, String _Activity, EBPDateTime _Timestamp) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        Activity = _Activity;\n        Timestamp = _Timestamp;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_ACTIVITY, String(Activity), \"String\");\n        addColumn(COLUMN_TIMESTAMP, Timestamp.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    AccountActivityLogEntity(int _UserId, String _Activity, EBPDateTime _Timestamp) : \n        AccountActivityLogEntity(0, _UserId, _Activity, _Timestamp)  {}\n\n    static AccountActivityLogEntity fromEntity(Entity entity)\n    {\n        AccountActivityLogEntity accountactivitylogentity = AccountActivityLogEntity();\n        accountactivitylogentity.fromString(entity.toString());\n        return accountactivitylogentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String AccountActivityLogEntity::COLUMN_USERID = \"UserId\";\nconst String AccountActivityLogEntity::COLUMN_ACTIVITY = \"Activity\";\nconst String AccountActivityLogEntity::COLUMN_TIMESTAMP = \"Timestamp\";\n\n\n#endif // ACCOUNTACTIVITYLOGENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\AccountLockoutEntity.h",
        "content": "#ifndef ACCOUNTLOCKOUTENTITY_H\n#define ACCOUNTLOCKOUTENTITY_H\n\n#include \"../Entity.h\"\n\nclass AccountLockoutEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_LOCKOUTSTARTTIME;\n    static const String COLUMN_LOCKOUTENDTIME;\n    \n\n    int UserId;\n    EBPDateTime LockoutStartTime;\n    EBPDateTime LockoutEndTime;\n    \n\n    AccountLockoutEntity()  : Entity(){}\n\n    AccountLockoutEntity(int id, int _UserId, EBPDateTime _LockoutStartTime, EBPDateTime _LockoutEndTime) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        LockoutStartTime = _LockoutStartTime;\n        LockoutEndTime = _LockoutEndTime;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_LOCKOUTSTARTTIME, LockoutStartTime.toDateTimeString(), \"EBPDateTime\");\n        addColumn(COLUMN_LOCKOUTENDTIME, LockoutEndTime.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    AccountLockoutEntity(int _UserId, EBPDateTime _LockoutStartTime, EBPDateTime _LockoutEndTime) : \n        AccountLockoutEntity(0, _UserId, _LockoutStartTime, _LockoutEndTime)  {}\n\n    static AccountLockoutEntity fromEntity(Entity entity)\n    {\n        AccountLockoutEntity accountlockoutentity = AccountLockoutEntity();\n        accountlockoutentity.fromString(entity.toString());\n        return accountlockoutentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String AccountLockoutEntity::COLUMN_USERID = \"UserId\";\nconst String AccountLockoutEntity::COLUMN_LOCKOUTSTARTTIME = \"LockoutStartTime\";\nconst String AccountLockoutEntity::COLUMN_LOCKOUTENDTIME = \"LockoutEndTime\";\n\n\n#endif // ACCOUNTLOCKOUTENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\LoginAttemptEntity.h",
        "content": "#ifndef LOGINATTEMPTENTITY_H\n#define LOGINATTEMPTENTITY_H\n\n#include \"../Entity.h\"\n\nclass LoginAttemptEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_TIMESTAMP;\n    \n\n    int UserId;\n    EBPDateTime Timestamp;\n    \n\n    LoginAttemptEntity()  : Entity(){}\n\n    LoginAttemptEntity(int id, int _UserId, EBPDateTime _Timestamp) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        Timestamp = _Timestamp;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_TIMESTAMP, Timestamp.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    LoginAttemptEntity(int _UserId, EBPDateTime _Timestamp) : \n        LoginAttemptEntity(0, _UserId, _Timestamp)  {}\n\n    static LoginAttemptEntity fromEntity(Entity entity)\n    {\n        LoginAttemptEntity loginattemptentity = LoginAttemptEntity();\n        loginattemptentity.fromString(entity.toString());\n        return loginattemptentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String LoginAttemptEntity::COLUMN_USERID = \"UserId\";\nconst String LoginAttemptEntity::COLUMN_TIMESTAMP = \"Timestamp\";\n\n\n#endif // LOGINATTEMPTENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\PermissionEntity.h",
        "content": "#ifndef PERMISSIONENTITY_H\n#define PERMISSIONENTITY_H\n\n#include \"../Entity.h\"\n\nclass PermissionEntity : public Entity {\npublic:\n    static const String COLUMN_PERMISSIONNAME;\n    static const String COLUMN_PERMISSIONGROUP;\n    \n\n    String PermissionName;\n    String PermissionGroup;\n    \n\n    PermissionEntity()  : Entity(){}\n\n    PermissionEntity(int id, String _PermissionName, String _PermissionGroup) : Entity() {\n        this->id = id;\n        PermissionName = _PermissionName;\n        PermissionGroup = _PermissionGroup;\n        \n\n        addColumn(COLUMN_PERMISSIONNAME, String(PermissionName), \"String\");\n        addColumn(COLUMN_PERMISSIONGROUP, String(PermissionGroup), \"String\");\n        \n    }\n\n    PermissionEntity(String _PermissionName, String _PermissionGroup) : \n        PermissionEntity(0, _PermissionName, _PermissionGroup)  {}\n\n    static PermissionEntity fromEntity(Entity entity)\n    {\n        PermissionEntity permissionentity = PermissionEntity();\n        permissionentity.fromString(entity.toString());\n        return permissionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String PermissionEntity::COLUMN_PERMISSIONNAME = \"PermissionName\";\nconst String PermissionEntity::COLUMN_PERMISSIONGROUP = \"PermissionGroup\";\n\n\n#endif // PERMISSIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\RoleEntity.h",
        "content": "#ifndef ROLEENTITY_H\n#define ROLEENTITY_H\n\n#include \"../Entity.h\"\n\nclass RoleEntity : public Entity {\npublic:\n    static const String COLUMN_ROLENAME;\n    \n\n    String RoleName;\n    \n\n    RoleEntity()  : Entity(){}\n\n    RoleEntity(int id, String _RoleName) : Entity() {\n        this->id = id;\n        RoleName = _RoleName;\n        \n\n        addColumn(COLUMN_ROLENAME, String(RoleName), \"String\");\n        \n    }\n\n    RoleEntity(String _RoleName) : \n        RoleEntity(0, _RoleName)  {}\n\n    static RoleEntity fromEntity(Entity entity)\n    {\n        RoleEntity roleentity = RoleEntity();\n        roleentity.fromString(entity.toString());\n        return roleentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String RoleEntity::COLUMN_ROLENAME = \"RoleName\";\n\n\n#endif // ROLEENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\RolePermissionEntity.h",
        "content": "#ifndef ROLEPERMISSIONENTITY_H\n#define ROLEPERMISSIONENTITY_H\n\n#include \"../Entity.h\"\n\nclass RolePermissionEntity : public Entity {\npublic:\n    static const String COLUMN_ROLEID;\n    static const String COLUMN_PERMISSIONID;\n    \n\n    int RoleId;\n    int PermissionId;\n    \n\n    RolePermissionEntity()  : Entity(){}\n\n    RolePermissionEntity(int id, int _RoleId, int _PermissionId) : Entity() {\n        this->id = id;\n        RoleId = _RoleId;\n        PermissionId = _PermissionId;\n        \n\n        addColumn(COLUMN_ROLEID, String(RoleId), \"int\");\n        addColumn(COLUMN_PERMISSIONID, String(PermissionId), \"int\");\n        \n    }\n\n    RolePermissionEntity(int _RoleId, int _PermissionId) : \n        RolePermissionEntity(0, _RoleId, _PermissionId)  {}\n\n    static RolePermissionEntity fromEntity(Entity entity)\n    {\n        RolePermissionEntity rolepermissionentity = RolePermissionEntity();\n        rolepermissionentity.fromString(entity.toString());\n        return rolepermissionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String RolePermissionEntity::COLUMN_ROLEID = \"RoleId\";\nconst String RolePermissionEntity::COLUMN_PERMISSIONID = \"PermissionId\";\n\n\n#endif // ROLEPERMISSIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\SecurityQuestionEntity.h",
        "content": "#ifndef SECURITYQUESTIONENTITY_H\n#define SECURITYQUESTIONENTITY_H\n\n#include \"../Entity.h\"\n\nclass SecurityQuestionEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_SECURITYQUESTIONTITLEID;\n    static const String COLUMN_ANSWER;\n    \n\n    int UserId;\n    String SecurityQuestionTitleId;\n    String Answer;\n    \n\n    SecurityQuestionEntity()  : Entity(){}\n\n    SecurityQuestionEntity(int id, int _UserId, String _SecurityQuestionTitleId, String _Answer) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        SecurityQuestionTitleId = _SecurityQuestionTitleId;\n        Answer = _Answer;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_SECURITYQUESTIONTITLEID, String(SecurityQuestionTitleId), \"String\");\n        addColumn(COLUMN_ANSWER, String(Answer), \"String\");\n        \n    }\n\n    SecurityQuestionEntity(int _UserId, String _SecurityQuestionTitleId, String _Answer) : \n        SecurityQuestionEntity(0, _UserId, _SecurityQuestionTitleId, _Answer)  {}\n\n    static SecurityQuestionEntity fromEntity(Entity entity)\n    {\n        SecurityQuestionEntity securityquestionentity = SecurityQuestionEntity();\n        securityquestionentity.fromString(entity.toString());\n        return securityquestionentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String SecurityQuestionEntity::COLUMN_USERID = \"UserId\";\nconst String SecurityQuestionEntity::COLUMN_SECURITYQUESTIONTITLEID = \"SecurityQuestionTitleId\";\nconst String SecurityQuestionEntity::COLUMN_ANSWER = \"Answer\";\n\n\n#endif // SECURITYQUESTIONENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\SecurityQuestionTitleEntity.h",
        "content": "#ifndef SECURITYQUESTIONTITLEENTITY_H\n#define SECURITYQUESTIONTITLEENTITY_H\n\n#include \"../Entity.h\"\n\nclass SecurityQuestionTitleEntity : public Entity {\npublic:\n    static const String COLUMN_QUESTIONTITLE;\n    \n\n    String QuestionTitle;\n    \n\n    SecurityQuestionTitleEntity()  : Entity(){}\n\n    SecurityQuestionTitleEntity(int id, String _QuestionTitle) : Entity() {\n        this->id = id;\n        QuestionTitle = _QuestionTitle;\n        \n\n        addColumn(COLUMN_QUESTIONTITLE, String(QuestionTitle), \"String\");\n        \n    }\n\n    SecurityQuestionTitleEntity(String _QuestionTitle) : \n        SecurityQuestionTitleEntity(0, _QuestionTitle)  {}\n\n    static SecurityQuestionTitleEntity fromEntity(Entity entity)\n    {\n        SecurityQuestionTitleEntity securityquestiontitleentity = SecurityQuestionTitleEntity();\n        securityquestiontitleentity.fromString(entity.toString());\n        return securityquestiontitleentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String SecurityQuestionTitleEntity::COLUMN_QUESTIONTITLE = \"QuestionTitle\";\n\n\n#endif // SECURITYQUESTIONTITLEENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\TwoFactorAuthEntity.h",
        "content": "#ifndef TWOFACTORAUTHENTITY_H\n#define TWOFACTORAUTHENTITY_H\n\n#include \"../Entity.h\"\n\nclass TwoFactorAuthEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_OTPCODE;\n    static const String COLUMN_EXPIRYTIME;\n    \n\n    int UserId;\n    String OtpCode;\n    EBPDateTime ExpiryTime;\n    \n\n    TwoFactorAuthEntity()  : Entity(){}\n\n    TwoFactorAuthEntity(int id, int _UserId, String _OtpCode, EBPDateTime _ExpiryTime) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        OtpCode = _OtpCode;\n        ExpiryTime = _ExpiryTime;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_OTPCODE, String(OtpCode), \"String\");\n        addColumn(COLUMN_EXPIRYTIME, ExpiryTime.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    TwoFactorAuthEntity(int _UserId, String _OtpCode, EBPDateTime _ExpiryTime) : \n        TwoFactorAuthEntity(0, _UserId, _OtpCode, _ExpiryTime)  {}\n\n    static TwoFactorAuthEntity fromEntity(Entity entity)\n    {\n        TwoFactorAuthEntity twofactorauthentity = TwoFactorAuthEntity();\n        twofactorauthentity.fromString(entity.toString());\n        return twofactorauthentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String TwoFactorAuthEntity::COLUMN_USERID = \"UserId\";\nconst String TwoFactorAuthEntity::COLUMN_OTPCODE = \"OtpCode\";\nconst String TwoFactorAuthEntity::COLUMN_EXPIRYTIME = \"ExpiryTime\";\n\n\n#endif // TWOFACTORAUTHENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\UserEntity.h",
        "content": "#ifndef USERENTITY_H\n#define USERENTITY_H\n\n#include \"../Entity.h\"\n\nclass UserEntity : public Entity {\npublic:\n    static const String COLUMN_USERNAME;\n    static const String COLUMN_PASSWORD;\n    static const String COLUMN_EMAIL;\n    static const String COLUMN_PHONENUMBER;\n    static const String COLUMN_ROLEID;\n    static const String COLUMN_TWOFACTORAUTH;\n    static const String COLUMN_APIKEY;\n    static const String COLUMN_TOKEN;\n    static const String COLUMN_TOKENEXPIRYTIME;\n    \n\n    String Username;\n    String Password;\n    String Email;\n    String PhoneNumber;\n    int RoleId;\n    bool TwoFactorAuth;\n    String ApiKey;\n    String Token;\n    EBPDateTime TokenExpiryTime;\n    \n\n    UserEntity()  : Entity(){}\n\n    UserEntity(int id, String _Username, String _Password, String _Email, String _PhoneNumber, int _RoleId, bool _TwoFactorAuth, String _ApiKey, String _Token, EBPDateTime _TokenExpiryTime) : Entity() {\n        this->id = id;\n        Username = _Username;\n        Password = _Password;\n        Email = _Email;\n        PhoneNumber = _PhoneNumber;\n        RoleId = _RoleId;\n        TwoFactorAuth = _TwoFactorAuth;\n        ApiKey = _ApiKey;\n        Token = _Token;\n        TokenExpiryTime = _TokenExpiryTime;\n        \n\n        addColumn(COLUMN_USERNAME, String(Username), \"String\");\n        addColumn(COLUMN_PASSWORD, String(Password), \"String\");\n        addColumn(COLUMN_EMAIL, String(Email), \"String\");\n        addColumn(COLUMN_PHONENUMBER, String(PhoneNumber), \"String\");\n        addColumn(COLUMN_ROLEID, String(RoleId), \"int\");\n        addColumn(COLUMN_TWOFACTORAUTH, String(TwoFactorAuth), \"bool\");\n        addColumn(COLUMN_APIKEY, String(ApiKey), \"String\");\n        addColumn(COLUMN_TOKEN, String(Token), \"String\");\n        addColumn(COLUMN_TOKENEXPIRYTIME, TokenExpiryTime.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    UserEntity(String _Username, String _Password, String _Email, String _PhoneNumber, int _RoleId, bool _TwoFactorAuth, String _ApiKey, String _Token, EBPDateTime _TokenExpiryTime) : \n        UserEntity(0, _Username, _Password, _Email, _PhoneNumber, _RoleId, _TwoFactorAuth, _ApiKey, _Token, _TokenExpiryTime)  {}\n\n    static UserEntity fromEntity(Entity entity)\n    {\n        UserEntity userentity = UserEntity();\n        userentity.fromString(entity.toString());\n        return userentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String UserEntity::COLUMN_USERNAME = \"Username\";\nconst String UserEntity::COLUMN_PASSWORD = \"Password\";\nconst String UserEntity::COLUMN_EMAIL = \"Email\";\nconst String UserEntity::COLUMN_PHONENUMBER = \"PhoneNumber\";\nconst String UserEntity::COLUMN_ROLEID = \"RoleId\";\nconst String UserEntity::COLUMN_TWOFACTORAUTH = \"TwoFactorAuth\";\nconst String UserEntity::COLUMN_APIKEY = \"ApiKey\";\nconst String UserEntity::COLUMN_TOKEN = \"Token\";\nconst String UserEntity::COLUMN_TOKENEXPIRYTIME = \"TokenExpiryTime\";\n\n\n#endif // USERENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Database\\Entities\\Security\\UserResetPassEntity.h",
        "content": "#ifndef USERRESETPASSENTITY_H\n#define USERRESETPASSENTITY_H\n\n#include \"../Entity.h\"\n\nclass UserResetPassEntity : public Entity {\npublic:\n    static const String COLUMN_USERID;\n    static const String COLUMN_RESETTOKEN;\n    static const String COLUMN_EXPIRYTIME;\n    \n\n    int UserId;\n    String ResetToken;\n    EBPDateTime ExpiryTime;\n    \n\n    UserResetPassEntity()  : Entity(){}\n\n    UserResetPassEntity(int id, int _UserId, String _ResetToken, EBPDateTime _ExpiryTime) : Entity() {\n        this->id = id;\n        UserId = _UserId;\n        ResetToken = _ResetToken;\n        ExpiryTime = _ExpiryTime;\n        \n\n        addColumn(COLUMN_USERID, String(UserId), \"int\");\n        addColumn(COLUMN_RESETTOKEN, String(ResetToken), \"String\");\n        addColumn(COLUMN_EXPIRYTIME, ExpiryTime.toDateTimeString(), \"EBPDateTime\");\n        \n    }\n\n    UserResetPassEntity(int _UserId, String _ResetToken, EBPDateTime _ExpiryTime) : \n        UserResetPassEntity(0, _UserId, _ResetToken, _ExpiryTime)  {}\n\n    static UserResetPassEntity fromEntity(Entity entity)\n    {\n        UserResetPassEntity userresetpassentity = UserResetPassEntity();\n        userresetpassentity.fromString(entity.toString());\n        return userresetpassentity;\n    }\n\n    // Setters and Getters for each field\n};\n\nconst String UserResetPassEntity::COLUMN_USERID = \"UserId\";\nconst String UserResetPassEntity::COLUMN_RESETTOKEN = \"ResetToken\";\nconst String UserResetPassEntity::COLUMN_EXPIRYTIME = \"ExpiryTime\";\n\n\n#endif // USERRESETPASSENTITY_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ErrorHandler\\ErrorHandler.h",
        "content": "// ErrorHandler.h\n\n#ifndef ERRORHANDLER_H\n#define ERRORHANDLER_H\n\n#include <string>\n#include \"IErrorHandler.h\"\n\nclass ErrorHandler : public IErrorHandler {\npublic:\n\n    void handleError(ErrorType error, const String& customMessage = \"\") override{\n    switch (error) {\n      case FileOpenError:\n        Serial.println(\"Error: Failed to open the file.\");\n        break;\n      case InvalidQuery:\n        Serial.println(\"Error: Invalid query format.\");\n        break;\n      case InvalidColumnName:\n        Serial.println(\"Error: Invalid column name.\");\n        break;\n      case CustomError:\n        Serial.println(\"Error: \" + customMessage);\n        break;\n      default:\n        Serial.println(\"Error: Unknown error.\");\n    }\n  }\n\n    void handleError(const String& errorMessage) override {\n        handleError(ErrorType::CustomError, errorMessage);\n    }\n\n  void handleError(ErrorType error) override {\n    handleError(error, \"\");\n  }\n};\n\n#endif // ERRORHANDLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ErrorHandler\\IErrorHandler.h",
        "content": "#ifndef IERRORHANDLER_H\n#define IERRORHANDLER_H\n\n#include <string>\n\nenum ErrorType {\n    FileOpenError,\n    InvalidQuery,\n    InvalidColumnName,\n    CustomError,\n    TableDoesNotExist,\n    CalibrationSensorTriggeredWhileNotMoving,\n};\n\nclass IErrorHandler {\npublic:\n    virtual ~IErrorHandler() {}\n\n    virtual void handleError(ErrorType error, const String& customMessage) = 0;\n    virtual void handleError(ErrorType error) = 0;\n    virtual void handleError(const String& errorMessage) = 0;\n};\n\n#endif // IERRORHANDLER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\EventManager\\EventManager.h",
        "content": "//"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\FileManager\\EBPFile.h",
        "content": "// EBPFile.h\n#ifndef EBP_FILE_H\n#define EBP_FILE_H\n\n#include <Arduino.h>\n#if defined(ESP32)\n  #include <LittleFS.h>\n#elif defined(ESP8266)\n  #include <FS.h>\n#endif\n#include <SD.h>\n#include \"../Context.h\"\n#include \"../Config/System/SystemConfigKeys.h\"\n#include \"IEBPFile.h\"\n\n\nclass EBPFile : public IEBPFile {\nprivate:\n  StorageType _storageType;\npublic:\n    Context* context;\n    EBPFile(Context* cntxt, StorageType storage_type) : context(cntxt), _storageType(storage_type) {\n      initialize();\n      \n    }\n\n    EBPFile(Context* cntxt, File file, StorageType storage_type): EBPFile(cntxt, storage_type){\n      internalFile = file;\n    }\n\n    void initialize() override {\n      begin();\n    }\n\n    void setInternalFile(const File& file) {\n        internalFile = file;\n    }\n\n    size_t write(uint8_t val) override {\n        size_t result = internalFile.write(val);\n        // Add your code here.\n        return result;\n    }\n\n    std::vector<FileData> Browse(String path) override{\n        initialize();\n        bool db_files = false;\n        std::vector<FileData> file_datas = std::vector<FileData>();\n        File root;\n        if (_storageType == SPIFFS_TYPE) {\n            if (path == \"/db/\")\n            {\n              path = \"/\";\n              db_files = true;\n            }\n            \n            root = LittleFS.open(path.c_str());\n        } else if (_storageType == SD_TYPE) {\n            root = SD.open(path.c_str());\n        }\n        if(root){\n          File file = root.openNextFile();\n          while(file){\n              Serial.print(\"file = \");Serial.println(file.name());\n              if (((String(file.name()).endsWith(\".db\") && !db_files) || (!String(file.name()).endsWith(\".db\") && db_files)) && _storageType == SPIFFS_TYPE)\n              {\n                file = root.openNextFile();\n                continue;\n              }              \n              FileData fileData = FileData(file.name(), file.size(), true, file.size() == 0 ? true : false);\n              file_datas.push_back(fileData);\n              file = root.openNextFile();\n          }\n          if (_storageType == SPIFFS_TYPE && !db_files)\n          {\n            FileData fileData = FileData(\"db\", 0, false, false);\n            file_datas.push_back(fileData);                \n          }\n        }\n\n        return file_datas;\n    }\n\n\n    IEBPFile* open(String _path, String mode) override {\n      path = _path;\n      // initialize();\n\n      if (_storageType == SPIFFS_TYPE) {\n        internalFile = LittleFS.open(path.c_str(), mode.c_str());\n      } else if (_storageType == SD_TYPE) {\n        internalFile = SD.open(path.c_str(), mode.c_str());\n      }\n      return this;\n    }\n\n    bool begin() {\n      // return LittleFS.begin(true);\n      if (_storageType == SPIFFS_TYPE) {\n        #if defined(ESP32)\n          return true;\n          // return LittleFS.begin();\n        #elif defined(ESP8266)\n          return LittleFS.begin();\n        #endif\n      } else if (_storageType == SD_TYPE) {\n        return SD.begin();\n      }\n      return false;\n    }\n\n    bool exists(String path) {\n      if (_storageType == SPIFFS_TYPE) {\n        return LittleFS.exists(path);\n      } else if (_storageType == SD_TYPE) {\n        return SD.exists(path);\n      }\n      return false;\n    }\n\n    bool remove(String path) {\n      internalFile.close();\n      if (_storageType == SPIFFS_TYPE) {\n        return LittleFS.remove(path);\n      } else if (_storageType == SD_TYPE) {\n        return SD.remove(path);\n      }\n      return false;\n    }\n\n    bool rename(String pathFrom, String pathTo) {\n      if (_storageType == SPIFFS_TYPE) {\n        return LittleFS.rename(pathFrom, pathTo);\n      } else if (_storageType == SD_TYPE) {\n        return SD.rename(pathFrom, pathTo);\n      }\n      return false;\n    }\n\n    bool end() {\n      if (_storageType == SPIFFS_TYPE) {\n        #if defined(ESP32)\n          LittleFS.end();\n          return true;\n        #elif defined(ESP8266)\n          LittleFS.end();\n          return true;\n        #endif\n      } else if (_storageType == SD_TYPE) {\n        // There is no explicit end() function for SD, but you could add any cleanup code here if necessary.\n        return true;\n      }\n      return false;\n    }\n    \n    void close() override {\n        internalFile.close();\n    }\n\n    operator bool() override {\n        return static_cast<bool>(internalFile);\n    }\n\n    String name() override {\n        return internalFile.name();\n    }\n\n    int available() override {\n        return internalFile.available();\n    }\n\n    int peek() override {\n        return internalFile.peek();\n    }\n\n    void flush() override {\n        internalFile.flush();\n    }\n\n    int read() override {\n        return internalFile.read();\n    }\n\n    size_t readBytes(char *buffer, size_t length) override {\n        return internalFile.readBytes(buffer, length);\n    }\n\n    String readString() override {\n        return internalFile.readString();\n    }\n\n    String readStringUntil(char terminator) override {\n        return internalFile.readStringUntil(terminator);\n    }\n\n    long position() override {\n        return internalFile.position();\n    }\n\n    bool seek(uint32_t pos) override {\n        return internalFile.seek(pos);\n    }\n\n    long size() override {\n        return internalFile.size();\n    }\n\n    bool isDirectory() override {\n        return internalFile.isDirectory();\n    }\n\n    bool createDirectory(String path) override {\n      if (_storageType == StorageType::SD_TYPE)\n      {\n        return LittleFS.mkdir(path);\n      } else if (_storageType == SD_TYPE) {\n        return SD.mkdir(path);\n      }      \n    }\n\n    IEBPFile* openNextFile(String mode) override {\n        internalFile = internalFile.openNextFile(mode.c_str());\n        return this;\n    }\n\n    void rewindDirectory() override {\n        internalFile.rewindDirectory();\n    }\n\n    bool isFile() override {\n        return !internalFile.isDirectory();\n    }\n\n    size_t getSize() override {\n        return internalFile.size();\n    }\n\n    size_t print(const __FlashStringHelper * str) override {\n        return internalFile.print(str);\n    }\n\n    size_t print(const String & str) override {\n        return internalFile.print(str);\n    }\n\n    size_t println(const String & str) override {\n        return internalFile.println(str);\n    }\n\n    size_t print(const char str[]) override {\n        return internalFile.print(str);\n    }\n\n    bool format() override {\n        if (_storageType == SPIFFS_TYPE) {\n            #if defined(ESP32)\n                return LittleFS.format();\n            #elif defined(ESP8266)\n                // ESP8266's LittleFS library does not have a format() function.\n                return false;\n            #endif\n        } else if (_storageType == SD_TYPE) {\n            // SD library does not have a format() function.\n            return false;\n        }\n        return false;\n    }\n\n    bool move(String dest) override {\n        if (rename(internalFile.name(), dest.c_str())) {\n            internalFile.close();\n            open(dest, \"r\");\n            return true;\n        }\n        return false;\n    }\n\n    bool copy(String dest) override {\n        File destFile;\n\n        if (_storageType == SPIFFS_TYPE) {\n            destFile = LittleFS.open(dest, \"w\");\n        } else if (_storageType == SD_TYPE) {\n            destFile = SD.open(dest, \"w\");\n        }\n\n        if (!destFile) {\n            return false;\n        }\n\n        internalFile.seek(0);\n\n        while (internalFile.available()) {\n            destFile.write(internalFile.read());\n        }\n\n        destFile.close();\n        return true;\n    }\n\n    bool duplicate() override {\n        String path = internalFile.path();\n        int dotIndex = path.lastIndexOf('.');\n        \n        // If a dot is found, add \"-Copy\" before the file extension\n        if (dotIndex >= 0) {\n          String newPath = path.substring(0, dotIndex) + \"-Copy\" + path.substring(dotIndex);\n          \n          // Pass the new path to the copy function\n          return copy(newPath);\n        }\n        \n        return false;\n    }\n\n    bool mkdir(String path) override {\n        return LittleFS.mkdir(path);\n    }\n\n};\n\n#endif // EBP_FILE_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\FileManager\\FileData.h",
        "content": "#ifndef FILEDATA_H\n#define FILEDATA_H\n\nclass FileData\n{\nprivate:\n    \npublic:\n    FileData(String _name, int _size, bool _isFolder, bool _isEmpty);\n    ~FileData();\n    String name;\n    int size;\n    bool isFile;\n    bool isEmpty;\n\n};\n\nFileData::FileData(String _name, int _size, bool _isFolder, bool _isEmpty)\n{\n    name = _name;\n    size = _size;\n    isFile = _isFolder;\n    isEmpty = _isEmpty;\n}\n\nFileData::~FileData()\n{\n}\n\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\FileManager\\IEBPFile.h",
        "content": "// IEBPFile.h\n#ifndef IEBP_FILE_H\n#define IEBP_FILE_H\n\n#include <Arduino.h>\n#include <FS.h>\n#include <LittleFS.h>\n#include <SD.h>\n#include \"FileData.h\"\n\nenum StorageType {\n  SPIFFS_TYPE,\n  SD_TYPE\n};\n\nclass IEBPFile {\npublic:\n    virtual ~IEBPFile() {}\n    File internalFile;\n    String path;\n    \n    virtual void initialize() = 0;\n\n    virtual size_t write(uint8_t val) = 0;\n\n    virtual bool begin() = 0;\n\n    virtual IEBPFile* open(String path, String mode) = 0;\n\n    virtual std::vector<FileData> Browse(String path) = 0;\n\n    virtual bool exists(String path) = 0;\n\n    virtual bool remove(String path) = 0;\n\n    virtual bool rename(String pathFrom, String pathTo) = 0;\n\n    virtual bool end() = 0;\n\n    virtual void close() = 0;\n    virtual operator bool() = 0;\n    virtual String name() = 0;\n\n    virtual int available() = 0;\n    virtual int peek() = 0;\n    virtual void flush() = 0;\n    virtual int read() = 0;\n    virtual size_t readBytes(char *buffer, size_t length) = 0; // Reads characters from the file into buffer\n    virtual String readString() = 0; // Reads a string from the file\n    virtual String readStringUntil(char terminator) = 0; // Reads a string from the file until a specific character\n    virtual long position() = 0; // Get the current position within the file\n    virtual bool seek(uint32_t pos) = 0; // Set the position within the file\n    virtual long size() = 0; // Get the size of the file\n    virtual bool createDirectory(String path) = 0; // create a directory\n    virtual bool isDirectory() = 0; // Check if the current file object is a directory\n    virtual IEBPFile* openNextFile(String mode) = 0;\n    virtual void rewindDirectory() = 0; // Resets a directory listing to the start\n    virtual bool isFile() = 0;\n    virtual size_t getSize() = 0;\n    virtual size_t print(const __FlashStringHelper *) = 0;\n    virtual size_t print(const String &) = 0;\n    virtual size_t println(const String &) = 0;\n    virtual size_t print(const char[]) = 0;    \n    virtual bool format() = 0;\n    virtual bool move(String dest) = 0;\n    virtual bool copy(String dest) = 0;\n    virtual bool duplicate() = 0;\n    virtual bool mkdir(String path) = 0;\n\n    static StorageType getStorageType(String storageTypeStr)\n    {\n      if (storageTypeStr == \"SPIFFS_TYPE\")\n      {\n        return StorageType::SPIFFS_TYPE;\n      } \n      else if (storageTypeStr == \"SD_TYPE\")\n      {\n        return StorageType::SD_TYPE;\n      }\n      return StorageType::SPIFFS_TYPE;      \n    }\n\n};\n\n#endif // IEBP_FILE_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\FrimwareManager\\FrimwareManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Logging\\ILog.h",
        "content": "#ifndef ILOG_H\n#define ILOG_H\n\n#include <Arduino.h>\n#include \"../Database/Entities/LogEntitiy.h\"\n\nclass ILog {\npublic:\n    virtual ~ILog() {}\n\n    virtual void log(LogLevel level, const String &title, const String &message) = 0;\n    virtual void log(const String &title, const String &message) = 0;\n    virtual void setLogLevel(LogLevel level) = 0;\n    virtual void SerialPrint(String message) = 0;\n    virtual void attachOutput(Stream *output) = 0; // For flexibility in output destinations\n    virtual void update() = 0; // For log rotation management\n    virtual void initialize() = 0; // For log initialization\n    virtual void DBLog(const String &table,String dbAction, const String &message) = 0;\n\n    // Callbacks for different log levels\n    virtual void onDebug(void (*func)(const String &, const String &)) = 0;\n    virtual void onInfo(void (*func)(const String &, const String &)) = 0;\n    virtual void onWarning(void (*func)(const String &, const String &)) = 0;\n    virtual void onError(void (*func)(const String &, const String &)) = 0;\n};\n\n#endif // ILOG_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Logging\\ILog_old.h",
        "content": "// #ifndef ILOG_H\n// #define ILOG_H\n\n// #include <Arduino.h>\n// #include \"LogTitles.h\"\n\n// class SystemLog;\n\n// class ILog {\n// public:\n//     virtual void infoDB(const String &table,String dbAction, const String &message) = 0;\n//     virtual void info(const String &title, const String &message) = 0;\n//     virtual void warning(const String &title, const String &message) = 0;\n//     virtual void error(const String &title, const String &message) = 0;\n\n//     virtual void onInfo(void (*func)(const String &)) = 0;\n//     virtual void onWarning(void (*func)(const String &)) = 0;\n//     virtual void onError(void (*func)(const String &)) = 0;\n//     String value = \"\";\n// };\n\n// #endif // ILOG_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Logging\\Log.h",
        "content": "#ifndef LOG_H\n#define LOG_H\n\n#include <vector>\n#include \"ILog.h\"\n#include \"../Context.h\"\n#include \"../Database/Controllers/LogController.h\"\n\n/**\n * @brief Log class implementing the ILog interface\n * \n * This class provides an implementation for the logging system. \n * It supports multiple log levels, log rotation, and attaching multiple output streams.\n */\nclass Log : public ILog {\nprivate:\n    Context* context;\n    LogController* logController;\n    LogLevel currentLogLevel;\n    std::vector<Stream*> outputs; // Holds the output streams\n    void (*debugCallback)(const String &, const String &);\n    void (*infoCallback)(const String &, const String &);\n    void (*warningCallback)(const String &, const String &);\n    void (*errorCallback)(const String &, const String &);\n    virtual void rotateLogs();\n\npublic:\n    Log(Context* cntxt);\n\n    virtual ~Log();\n\n    // Implementing ILog interface methods\n    virtual void log(LogLevel level, const String &title, const String &message) override;\n    virtual void log(const String &title, const String &message) override;\n    virtual void setLogLevel(LogLevel level) override;\n    virtual void SerialPrint(String message) override;\n    virtual void attachOutput(Stream *output) override;\n    virtual void update() override;\n    virtual void initialize() override;\n    void DBLog(const String &table,String dbAction, const String &message) override;\n\n    // Implementing callbacks\n    virtual void onDebug(void (*func)(const String &, const String &)) override;\n    virtual void onInfo(void (*func)(const String &, const String &)) override;\n    virtual void onWarning(void (*func)(const String &, const String &)) override;\n    virtual void onError(void (*func)(const String &, const String &)) override;\n};\n\n/**\n * @brief Construct a new Log System:: Log System object\n * \n */\nLog::Log(Context* cntxt):context(cntxt) {\n    // Initialize with default settings\n    currentLogLevel = LogLevel::DEBUG_LEVEL;\n\n    logController = new LogController(context, storageType);\n}\n\n/**\n * @brief Destroy the Log System:: Log System object\n * \n */\nLog::~Log() {\n    // Clean up resources if needed\n}\n\n/**\n * @brief Logs a message with the given level, title, and message.\n * \n * @param level LogLevel for the message\n * @param title Title of the log message\n * @param message Log message content\n */\nvoid Log::log(LogLevel level, const String &title, const String &message) {\n    String logLevelString;\n    \n    switch (level) {\n        case LogLevel::DEBUG_LEVEL:\n#ifndef LOG_LEVEL_DEBUG\n            return;\n#endif\n            logLevelString = \"DEBUG_LEVEL\";\n            break;\n        case LogLevel::INFO_LEVEL:\n#ifndef LOG_LEVEL_INFO\n            return;\n#endif\n            logLevelString = \"INFO_LEVEL\";\n            break;\n        case LogLevel::WARNING_LEVEL:\n#ifndef LOG_LEVEL_WARNING\n            return;\n#endif\n            logLevelString = \"WARNING_LEVEL\";\n            break;\n        case LogLevel::ERROR_LEVEL:\n#ifndef LOG_LEVEL_ERROR\n            return;\n#endif\n            logLevelString = \"ERROR_LEVEL\";\n            break;\n    }\n    // Implement logging logic\n    // Check log level and route message to appropriate output streams\n    if(context->getConfig()->getSystemConfig()->get(title+LogTitles::_INFO_CHANGE) == \"true\")\n    {\n        LogEntity *logEntity = new LogEntity(level, title, message);\n        // logController->Add(*logEntity);\n    }\n    \n    ///TODO: check from config to print on serial or not\n    Serial.println(context->getClock()->now().toTimeString() + \" - \" + logLevelString + \" - \" + title + \" : \" + message);\n\n    switch (level) {\n        case LogLevel::DEBUG_LEVEL:\n            if (debugCallback != nullptr) {\n                debugCallback(title, message);\n            }\n            break;\n        case LogLevel::INFO_LEVEL:\n            if (infoCallback != nullptr) {\n                infoCallback(title, message);\n            }\n            break;\n        case LogLevel::WARNING_LEVEL:\n            if (warningCallback != nullptr) {\n                warningCallback(title, message);\n            }\n            break;\n        case LogLevel::ERROR_LEVEL:\n            if (errorCallback != nullptr) {\n                errorCallback(title, message);\n            }\n            break;\n    }\n}\n\n/**\n * @brief Logs a message with the current log level, title, and message.\n * \n * @param title Title of the log message\n * @param message Log message content\n */\nvoid Log::log(const String &title, const String &message) {\n    log(currentLogLevel, title, message);\n}\n\nvoid Log::DBLog(const String &table,String dbActionStr, const String &message)\n{\n    if (table != logController->_tableName)\n    {\n        log(LogLevel::INFO_LEVEL, LogTitles::DB_CHANGE , dbActionStr + \"::\" + message + \" at \" + table);\n    }    \n}\n\n/**\n * @brief Sets the current log level of the system.\n * \n * @param level LogLevel to be set\n */\nvoid Log::setLogLevel(LogLevel level) {\n    currentLogLevel = level;\n}\n\nvoid Log::SerialPrint(String message) {\n    if(context->getConfig()->getSystemConfig()->get(SystemConfigKey::SERIAL_PRINT_ENABLE) == \"true\")\n    {\n        Serial.println(message);\n    }\n}\n\n\n/**\n * @brief Attaches an output stream for logging.\n * \n * @param output Stream pointer to be attached\n */\nvoid Log::attachOutput(Stream *output) {\n    outputs.push_back(output);\n}\n\n/**\n * @brief Rotates logs to manage log size and retention.\n * \n */\nvoid Log::rotateLogs() {\n    // Implement log rotation logic\n}\n\n/**\n * @brief \n * \n */\nvoid Log::initialize(){\n    currentLogLevel = LogLevel::DEBUG_LEVEL;\n\n    logController = new LogController(context, storageType);\n    debugCallback = nullptr;\n    infoCallback = nullptr;\n    warningCallback = nullptr;\n    errorCallback = nullptr;\n}\n\n/**\n * @brief \n * \n */\nvoid Log::update(){\n    rotateLogs();\n}\n\n/**\n * @brief Registers a callback function for DEBUG_LEVEL level logs.\n * \n * This method allows the user to set a custom callback function that will be \n * called whenever a log with DEBUG_LEVEL level is generated. The callback function \n * should accept two parameters: a title and a message, both as strings.\n * \n * @param func The callback function that takes two string parameters (title, message).\n */\nvoid Log::onDebug(void (*func)(const String &, const String &)) {\n    debugCallback = func;\n}\n\n/**\n * @brief Registers a callback function for INFO_LEVEL level logs.\n * \n * This method allows setting a custom callback for INFO_LEVEL level logs. \n * The provided function will be invoked with the log's title and message.\n * \n * @param func Callback function to be invoked for INFO_LEVEL level logs.\n */\nvoid Log::onInfo(void (*func)(const String &, const String &)) {\n    infoCallback = func;\n}\n\n/**\n * @brief Registers a callback function for WARNING_LEVEL level logs.\n * \n * Enables the attachment of a custom callback function for logs of WARNING_LEVEL level.\n * The function will receive the log's title and message as arguments.\n * \n * @param func The WARNING_LEVEL level log callback function.\n */\nvoid Log::onWarning(void (*func)(const String &, const String &)) {\n    warningCallback = func;\n}\n\n/**\n * @brief Registers a callback function for ERROR_LEVEL level logs.\n * \n * This method is used to set a custom callback for logs of the ERROR_LEVEL level.\n * The callback will be called with the log's title and message.\n * \n * @param func The ERROR_LEVEL level log callback function.\n */\nvoid Log::onError(void (*func)(const String &, const String &)) {\n    errorCallback = func;\n}\n\n\n#endif // LOG_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Logging\\LogSystem.h",
        "content": "// // path: .\\src\\Basic\\Logging\\Log.h\n\n// #ifndef LOG_H\n// #define LOG_H\n\n// #include \"../Context.h\"\n// #include \"../Database/Controllers/LogController.h\"\n// #include \"ILog.h\"\n// #include <memory>\n\n// // #include \"../Events/EventSystem.h\"\n\n// class SystemLog : public ILog {\n\n// public:\n//     Context* context;\n//     LogController* logController;\n//     // static EventSystem eventSystem;\n    \n//     SystemLog(Context* cntxt):context(cntxt)\n//     {\n//         logController = new LogController(context, storageType);\n//     }\n\n//     void infoDB(const String &table,String dbAction, const String &message) override;\n//     void info(const String &title, const String &message) override;\n//     void warning(const String &title, const String &message) override;\n//     void error(const String &title, const String &message) override;\n\n//     void onInfo(void (*func)(const String &)) override;\n//     void onWarning(void (*func)(const String &)) override;\n//     void onError(void (*func)(const String &)) override;\n//     String value = \"\";\n// };\n\n// // EventSystem Log::eventSystem;\n\n// void SystemLog::infoDB(const String &table,String dbActionStr, const String &message)\n// {\n//     if (table != logController->_tableName)\n//     {\n//         info(LogTitles::DB_CHANGE , dbActionStr + \"::\" + message + \" at \" + table);\n//     }    \n// }\n// void SystemLog::info(const String &title, const String &message) {\n//     if(context->getConfig()->getSystemConfig()->get(title+LogTitles::_INFO_CHANGE) == \"true\")\n//     {\n//         LogEntity *logEntity = new LogEntity(LogLevel::INFO, title, message);\n//         logController->Add(*logEntity);\n//     }\n//     Serial.println(title + \" - \" + message);\n//     // eventSystem.emit(\"info\", message);\n// }\n\n// void SystemLog::warning(const String &title, const String &message) {\n//     // LogEntity logEntity;\n//     // logEntity.logLevel = LogEntity::Warning;\n//     // logEntity.message = message;\n//     // logEntity.timestamp = String(millis());\n    \n//     // if(context.getConfig()->get(title+\"_warning_save\") == \"true\")\n//     // {\n//     //     logController->Add(logEntity);\n//     // }\n//     // eventSystem.emit(\"warning\", message);\n// }\n\n// void SystemLog::error(const String &title, const String &message) {\n//     // LogEntity logEntity;\n//     // logEntity.logLevel = LogEntity::Error;\n//     // logEntity.message = message;\n//     // logEntity.timestamp = String(millis());\n    \n//     // if(context.getConfig()->get(title+\"_error_save\") == \"true\")\n//     // {\n//     //     logController->Add(logEntity);\n//     // }\n//     // eventSystem.emit(\"error\", message);\n//     Serial.print(\"Error - \");Serial.print(title);Serial.print(\" - \");Serial.print(message);Serial.print(\" - \");Serial.print(context->getClock()->now().toTimeString());\n// }\n\n// void SystemLog::onInfo(void (*func)(const String &)) {\n//     // eventSystem.on(\"info\", func);\n// }\n\n// void SystemLog::onWarning(void (*func)(const String &)) {\n//     // eventSystem.on(\"warning\", func);\n// }\n\n// void SystemLog::onError(void (*func)(const String &)) {\n//     // eventSystem.on(\"error\", func);\n// }\n\n// #endif // LOG_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Logging\\LogTitles.h",
        "content": "#ifndef LOGTITLES_H\n#define LOGTITLES_H\n\nclass LogTitles\n{    \npublic:\n    //Database\n    static const String ADD_RECORD_TO_DB;\n    static const String UPDATE_RECORD_IN_DB;\n    static const String DELETE_RECORD_FROM_DB;\n    static const String REMOVE_COLUMN_FROM_DB;\n    static const String REMOVE_TABLE_FROM_DB;\n    \n    static const String ADD;\n    static const String UPDATE;\n    static const String DELETE;\n    static const String GET;\n    static const String REMOVE_COLUMN;\n    static const String REMOVE_TABLE;\n    \n    //System\n    static const String DB_CHANGE;\n    static const String SYSTEM_BOOT;\n    static const String SYSTEM_REBOOT;\n    static const String _INFO_CHANGE;\n    static const String SYSTEM_CLOCK;\n\n    //Modules\n    static const String BUTTON_LONG_PRESS;\n    static const String BUTTON_CLICK;\n    static const String RELAY_STATE_CHANGE;\n    static const String MODULE_NOT_FOUND_IN_DB;\n    static const String MODULE_ADDED_TO_DB;\n    static const String MODULE_NOT_ADDED_TO_DB;\n    \n    //SIM800\n    static const String SIM800_MESSAGE_RECIEVED;\n//MODULE_NOT_FOUND_IN_DB \n\n    static const String USER_LOGS;\n\n};\n\nconst String LogTitles::ADD_RECORD_TO_DB = \"add_record_to_db\";\nconst String LogTitles::UPDATE_RECORD_IN_DB = \"update_record_in_db\";\nconst String LogTitles::DELETE_RECORD_FROM_DB = \"delete_record_from_db\";\nconst String LogTitles::REMOVE_COLUMN_FROM_DB = \"remove_column_from_db\";\nconst String LogTitles::REMOVE_TABLE_FROM_DB = \"remove_table_from_db\";\n\nconst String LogTitles::ADD = \"add\";\nconst String LogTitles::UPDATE = \"update\";\nconst String LogTitles::DELETE = \"delete\";\nconst String LogTitles::GET = \"get\";\nconst String LogTitles::REMOVE_COLUMN = \"remove_column\";\nconst String LogTitles::REMOVE_TABLE = \"remove_table\";\n\nconst String LogTitles::DB_CHANGE = \"db_change\";\nconst String LogTitles::SYSTEM_BOOT = \"system_boot\";\nconst String LogTitles::SYSTEM_REBOOT = \"system_reboot\";\nconst String LogTitles::_INFO_CHANGE = \"_info_save\";\nconst String LogTitles::SYSTEM_CLOCK = \"system_clock\";\nconst String LogTitles::USER_LOGS = \"user_logs\";\n\nconst String LogTitles::BUTTON_LONG_PRESS = \"button_long_press\";\nconst String LogTitles::BUTTON_CLICK = \"button_click\";\nconst String LogTitles::RELAY_STATE_CHANGE = \"relay_state_changed\";\nconst String LogTitles::MODULE_NOT_FOUND_IN_DB = \"module_not_found_in_db\";\nconst String LogTitles::MODULE_ADDED_TO_DB = \"module_added_to_db\";\nconst String LogTitles::MODULE_NOT_ADDED_TO_DB = \"module_not_added_to_db\";\n\nconst String LogTitles::SIM800_MESSAGE_RECIEVED = \"sim800_message_recieved\";\n\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\IModules.h",
        "content": "#ifndef IMODULES_H\n#define IMODULES_H\n\n#include <string>\n#include <PCF8574.h>\n#include \"Modules/Button.h\"\n#include \"Modules/Relay.h\"\n#include \"Modules/OLEDLCD.h\"\n#include \"Modules/LCD16X2.h\"\n#include \"Modules/SoilMoistureSensor.h\"\n#include \"Modules/ModuleTypes.h\"\n#include \"Modules/SimCardManager.h\"\n\nclass IModules\n{\npublic:\n    virtual ~IModules() = default;\n\n    virtual Button* getButton(String name) = 0;\n    virtual Button* getButton(String name, PCF8574* pcf8574) = 0;\n    virtual int addButton(Button* button) = 0;\n    \n    virtual Relay* getRelay(String name) = 0;\n    virtual int addRelay(Relay* relay) = 0;\n\n    virtual LCD16X2* getLCD16X2(String name) = 0;\n    virtual int addLCD16X2(LCD16X2* lcd16x2) = 0;\n    \n    virtual OLEDLCD* getOLEDLCD(String name) = 0;\n    virtual void addOLEDLCD(OLEDLCD* oledlcd) = 0;\n        \n    virtual SoilMoistureSensor* getSoilMoistureSensor(String name) = 0;\n    virtual void addSoilMoistureSensor(SoilMoistureSensor* soilMoistureSensor) = 0;\n    \n    virtual SimCardManager* getSimCardManager(int tx_pin, int rx_pin) = 0;\n\n    virtual void initialize() = 0;\n};\n\n#endif // IMODULES_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules.h",
        "content": "// Modules.h\n\n#ifndef MODULESS_H\n#define MODULESS_H\n\n#include \"IModules.h\"\n\n#include \"../Database/Entities/Modules/ButtonFullEntity.h\"\n#include \"../Database/Entities/Modules/RelayFullEntity.h\"\n#include \"../Database/Entities/Modules/DHTFullEntity.h\"\n#include \"../Database/Entities/Modules/LCDFullEntity.h\"\n#include \"../Database/Entities/Modules/PhotoresistorFullEntity.h\"\n#include \"../Database/Entities/Modules/RGBFullEntity.h\"\n#include \"../Database/Entities/Modules/SoilMoistureFullEntity.h\"\n\n#include \"../Database/Controllers/Modules/ModulesController.h\"\n\n#include \"../Context.h\"\n\nconst static String NOT_FOUNDED = \"notFounded\";\n\nclass Modules: public IModules\n{\nprivate:\n    Context* context;\n    ModulesController *modulesController;\n\n    std::vector<RelayFullEntity> relays;\n    std::vector<LCDFullEntity> lcd16x2s;\n    std::vector<LCDFullEntity> oledlcds;\n    std::vector<SoilMoistureFullEntity> sensors;\n\n    ButtonFullEntity buttonFull;\n    Button* _button;\n    Button* emptyButton;\n    SimCardManager* simCardManager;\n    PCF8574* _pcf8574;\n\npublic:\n    bool isNameUnique(String name);\n    Modules(Context* context);\n\n    Button* getButton(String name) override;\n    Button* getButton(String name, PCF8574* pcf8574) override;\n    int addButton(Button* button) override;\n    Relay* getRelay(String name) override;\n    int addRelay(Relay* relay) override;\n    LCD16X2* getLCD16X2(String name) override;\n    int addLCD16X2(LCD16X2* lcd16x2) override;\n    OLEDLCD* getOLEDLCD(String name) override;\n    void addOLEDLCD(OLEDLCD* oledlcd) override;\n    SoilMoistureSensor* getSoilMoistureSensor(String name) override;\n    void addSoilMoistureSensor(SoilMoistureSensor* soilMoistureSensor) override;\n    SimCardManager* getSimCardManager(int tx_pin, int rx_pin) override;\n    void initialize() override;\n};\n\nModules::Modules(Context* cntx): context(cntx)\n{\n\n}\n\nvoid Modules::initialize()\n{\n    modulesController = new ModulesController(context, storageType);\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Modules Initialized.\");\n}\n\nButton* Modules::getButton(String name)\n{\n    Button* button;\n    buttonFull = modulesController->getButtonByName(name);\n    button = new Button(buttonFull.PinNumber, name, buttonFull.ActiveHigh, buttonFull.PullupActive, buttonFull.ButtonType);\n    button->setDebounceDelay(buttonFull.DebounceDelay);\n    // button->setLongPressTime(buttonFull.)\n    return  button;\n}\n\nButton* Modules::getButton(String name, PCF8574* pcf8574)\n{\n    Button* button;\n    buttonFull = modulesController->getButtonByName(name);\n    if (buttonFull.ButtonType == \"PCF8574\")\n    {\n        button = new Button(buttonFull.PinNumber, name, buttonFull.ActiveHigh, buttonFull.PullupActive, Button::getButtonType(buttonFull.ButtonType), pcf8574);        \n    }\n    else if(buttonFull.ButtonType == \"PIN\")\n    {\n        button = new Button(buttonFull.PinNumber, name, buttonFull.ActiveHigh, buttonFull.PullupActive, buttonFull.ButtonType);\n    }\n    button->setDebounceDelay(buttonFull.DebounceDelay);\n    // button->setLongPressTime(buttonFull.)\n    return button;\n}\n\nint Modules::addButton(Button* button)\n{\n    ButtonFullEntity *buttonEntity = button->getEntity();\n    if (!isNameUnique(buttonEntity->Name))\n    {\n        return -1;\n    }\n    modulesController = new ModulesController(context, storageType);\n    int button_id = modulesController->AddButton(*buttonEntity);\n    context->getLogger()->log(LogLevel::INFO_LEVEL, LogTitles::MODULE_ADDED_TO_DB, \"Button name : \" + buttonEntity->Name);\n    return button_id;\n}\n\nRelay* Modules::getRelay(String name)\n{\n    relays = modulesController->getAllRelays();\n    for (size_t i = 0; i < relays.size(); i++)\n    {\n        RelayFullEntity relay = relays.at(i);\n        if (relay.Name == name)\n        {\n            return new Relay(relay.PinNumber, name, relay.NormallyOpen); \n        }        \n    }\n    context->getLogger()->log(LogLevel::ERROR_LEVEL, LogTitles::MODULE_NOT_FOUND_IN_DB, \"Relay name : \" + name);\n    return new Relay(-1, NOT_FOUNDED, true); // Empty Relay\n}\n\nint32_t Modules::addRelay(Relay* relay)\n{\n    RelayFullEntity *relayEntity = relay->getEntity();\n    if (!isNameUnique(relayEntity->Name))\n    {\n        return -1;\n    }\n\n    int _id = modulesController->AddRelay(*relayEntity);\n    if(_id == -1)\n    {\n        context->getLogger()->log(LogLevel::ERROR_LEVEL, LogTitles::MODULE_ADDED_TO_DB, \"Relay name : \" + relayEntity->Name);\n    }\n    else{\n        context->getLogger()->log(LogLevel::INFO_LEVEL,LogTitles::MODULE_NOT_ADDED_TO_DB, \"Relay name : \" + relayEntity->Name);\n    }\n    return _id;\n}\n\n// Continuing from previous code ...\n\nLCD16X2* Modules::getLCD16X2(String name)\n{\n    lcd16x2s = modulesController->getAllLCDs();\n    for (size_t i = 0; i < lcd16x2s.size(); i++)\n    {\n        LCDFullEntity oled = lcd16x2s.at(i);\n        if (oled.Name == name)\n        {\n            return new LCD16X2(name, oled.Address, oled.Cols, oled.Rows); \n        }        \n    }\n    context->getLogger()->log(LogLevel::ERROR_LEVEL,LogTitles::MODULE_NOT_FOUND_IN_DB, \"LCD16X2 name : \" + name);\n    return new LCD16X2(NOT_FOUNDED, -1, 0, 0); // Empty LCD16X2\n}\n\nint Modules::addLCD16X2(LCD16X2* oledlcd)\n{\n    LCDFullEntity *oledEntity = oledlcd->getEntity();\n    if (!isNameUnique(oledEntity->Name))\n    {\n        return -1;\n    }\n    int _id = modulesController->AddLCD(*oledEntity);\n    if(_id == -1)\n    {\n        context->getLogger()->log(LogLevel::ERROR_LEVEL,LogTitles::MODULE_NOT_ADDED_TO_DB, \"LCD16X2 name : \" + oledEntity->Name);\n    }\n    else{\n        context->getLogger()->log(LogLevel::INFO_LEVEL,LogTitles::MODULE_ADDED_TO_DB, \"LCD16X2 name : \" + oledEntity->Name);\n    }\n    return _id;\n}\n\nOLEDLCD* Modules::getOLEDLCD(String name)\n{\n    oledlcds = modulesController->getAllLCDs();\n    for (size_t i = 0; i < oledlcds.size(); i++)\n    {\n        LCDFullEntity lcd = oledlcds.at(i);\n        if (lcd.Name == name)\n        {\n            return new OLEDLCD(name, lcd.Address, lcd.Cols, lcd.Rows); \n        }        \n    }\n    context->getLogger()->log(LogLevel::ERROR_LEVEL,LogTitles::MODULE_NOT_FOUND_IN_DB, \"LCDHandler name : \" + name);\n    return new OLEDLCD(NOT_FOUNDED, -1, 0, 0); // Empty LCDHandler\n}\n\nvoid Modules::addOLEDLCD(OLEDLCD* lcdHandler)\n{\n    LCDFullEntity *lcdEntity = lcdHandler->getEntity();\n    if (!isNameUnique(lcdEntity->Name))\n    {\n        return;\n    }\n    modulesController->AddLCD(*lcdEntity);\n    context->getLogger()->log(LogLevel::INFO_LEVEL,LogTitles::MODULE_ADDED_TO_DB, \"LCDHandler name : \" + lcdEntity->Name);\n}\n\nSoilMoistureSensor* Modules::getSoilMoistureSensor(String name)\n{\n    sensors = modulesController->getAllSoilMoistures();\n    for (size_t i = 0; i < sensors.size(); i++)\n    {\n        SoilMoistureFullEntity sensor = sensors.at(i);\n        if (sensor.Name == name)\n        {\n            return new SoilMoistureSensor(name, sensor.ConnectionType, sensor.NodeId, sensor.PinNumber, sensor.DryTreshold, sensor.WetTreshold); \n        }        \n    }\n    context->getLogger()->log(LogLevel::ERROR_LEVEL,LogTitles::MODULE_NOT_FOUND_IN_DB, \"SoilMoistureSensor name : \" + name);\n    return new SoilMoistureSensor( NOT_FOUNDED,\"\" , -1, -1, 0, 0); // Empty SoilMoistureSensor\n}\n\nvoid Modules::addSoilMoistureSensor(SoilMoistureSensor* soilMoistureSensor)\n{\n    SoilMoistureFullEntity *sensorEntity = soilMoistureSensor->getEntity();\n    if (!isNameUnique(sensorEntity->Name))\n    {\n        return;\n    }\n    modulesController->AddSoilMoisture(*sensorEntity);\n    context->getLogger()->log(LogLevel::INFO_LEVEL,LogTitles::MODULE_ADDED_TO_DB, \"SoilMoistureSensor name : \" + sensorEntity->Name);\n}\n\nSimCardManager* Modules::getSimCardManager(int tx_pin, int rx_pin)\n{\n    return simCardManager;\n}\n\nbool Modules::isNameUnique(String name)\n{\n    std::vector<ModuleEntity> modules = modulesController->Get(String(ModuleEntity::COLUMN_NAME + \"=\" + name));\n    if (modules.size() == 0)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }    \n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\Button.h",
        "content": "#ifndef BUTTON_H\n#define BUTTON_H\n\n#include <functional>\n#include <Arduino.h>\n#include <Wire.h>\n#include <PCF8574.h>\n#include \"../../Database/Entities/Modules/ButtonFullEntity.h\"\n#include \"ModuleTypes.h\"\n\nenum class ButtonType { PIN, PCF8574 };\nenum class ClickType { None, Clicked, LongPressClicked };\n\nclass Button\n{\npublic:\n    using ButtonCallback = std::function<void(Button*)>;\nprivate:\n    String name;\n    uint8_t pin_number;\n    PCF8574* pcf8574;\n    ButtonType buttonType;\n    bool activeHigh;\n    bool pullUpActive;\n    bool pressed;\n    bool lastState;\n    String connectionType;\n    int nodeId;\n    bool waitingForRelease; // new member variable to track button release\n    unsigned long lastDebounceTime;\n    unsigned long debounceDelay;\n    unsigned long longPressTime;\n    unsigned long buttonDownTime;\n    bool reading;\n    long press_time;\n    bool longPressTriggered = false;\n    uint8_t pcf_address;\n    bool onClickSeted;\n    bool onLongPressSeted;\n\n\n    ButtonCallback onClickFunction;\n    ButtonCallback onLongPressFunction;\npublic:\n    Button(uint8_t pin_number, String name, bool activeHigh, bool pullUpActive, ButtonType buttonType, PCF8574* pcf8574);\n    Button(uint8_t pin_number, String name, bool activeHigh, bool pullUpActive, ButtonType buttonType);\n    Button(uint8_t pin_number, String name, bool activeHigh, bool pullUpActive, String buttonTypeStr);\n    Button(uint8_t pin_number, String name, bool activeHigh, bool pullUpActive);\n    // Button();\n    \n    void setOnClick(ButtonCallback function);\n    void setOnLongPress(ButtonCallback function);\n    void setDebounceDelay(unsigned long delay);\n    void setLongPressTime(unsigned long time);\n    bool getState();\n    String getName();\n    void update();\n    ButtonFullEntity* getEntity();\n    static String getButtonType(ButtonType buttonType);\n    static ButtonType getButtonType(String buttonTypeStr);\n    int getPinNumber();\n    bool getActiveHigh();\n    bool getPullUpActive();\n};\n\n// Button::Button()\n// {\n    \n// }\nButton::Button(uint8_t _pin_number, String _name, bool _activeHigh, bool _pullUpActive, ButtonType _buttonType, PCF8574* _pcf8574)\n    : pin_number(_pin_number), activeHigh(_activeHigh), pullUpActive(_pullUpActive), name(_name), \n      pressed(false), lastState(false), lastDebounceTime(0), debounceDelay(60), longPressTime(2000), buttonDownTime(0),\n      buttonType(_buttonType), onClickFunction(NULL), onLongPressFunction(nullptr), pcf8574(_pcf8574), onClickSeted(false), onLongPressSeted(false)\n{\n    if (buttonType == ButtonType::PIN)\n    {\n        pinMode(pin_number, pullUpActive ? INPUT_PULLUP : INPUT);\n    }\n    else if(buttonType == ButtonType::PCF8574)\n    {\n        // pcf8574 = new PCF8574(pcf_address);//read from settings\n\t    \n        pcf8574->pinMode(pin_number, INPUT);\n        \n\n    }\n    lastState = false;\n    pressed = false;\n    \n}\nButton::Button(uint8_t _pin_number, String _name, bool _activeHigh, bool _pullUpActive, ButtonType _buttonType):\n    Button(_pin_number, _name, _activeHigh, _pullUpActive, _buttonType, 0)\n{\n\n}\nButton::Button(uint8_t _pin_number, String _name, bool _activeHigh = true, bool _pullUpActive = false):\n    Button(_pin_number, _name, _activeHigh, _pullUpActive, ButtonType::PIN)\n{\n\n}\n\nButton::Button(uint8_t _pin_number, String _name, bool _activeHigh, bool _pullUpActive, String _buttonTypeStr):\n    Button(_pin_number, _name, _activeHigh, _pullUpActive, Button::getButtonType(_buttonTypeStr))\n{\n\n}\n\nButtonFullEntity* Button::getEntity()\n{\n    String buttonTypeStr = Button::getButtonType(buttonType);\n    ButtonFullEntity *buttonEntity = new ButtonFullEntity(0, 0, name, ModuleTypes::BUTTON, connectionType, nodeId, pin_number,  buttonTypeStr, activeHigh, pullUpActive, debounceDelay);\n    return buttonEntity;\n}\n\nvoid Button::update() {\n    uint8_t reading;\n\n    if (buttonType == ButtonType::PIN) {\n        reading = digitalRead(pin_number);\n    } else if (buttonType == ButtonType::PCF8574) {\n        reading = pcf8574->digitalRead(pin_number);\n    }\n\n    if (activeHigh) {\n        reading = !reading;\n    }\n\n    if (debounceDelay == 0 && reading == true && onClickSeted)\n    {\n        onClickFunction(this);\n        return;\n    }\n    \n    unsigned long now = millis();\n    if (reading != lastState && reading == true) {\n        lastDebounceTime = now;\n    }\n\n    if ((now - lastDebounceTime) > debounceDelay) {\n        if (reading != pressed) {\n            pressed = reading;\n            if (pressed) {\n                // Button pressed\n                buttonDownTime = now;\n                waitingForRelease = true; // set the flag to wait for button release\n            } else {\n                // Button released\n                unsigned long pressDuration = now - buttonDownTime;\n                if (!longPressTriggered && (pressDuration >= debounceDelay)) {\n                    // onClickFunction(this);\n                }\n                longPressTriggered = false; // reset the longPressTriggered flag when the button is released\n                waitingForRelease = false; // reset the flag when the button is released\n            }\n        } else if (waitingForRelease && pressed) {\n            // Button is still pressed and waiting for release\n            if (now - buttonDownTime > debounceDelay) {\n                // Button held down after debounce delay, trigger onClickFunction again\n                if (onClickSeted)\n                {\n                    onClickFunction(this);\n                }\n                waitingForRelease = false; // reset the flag to wait for release again\n                \n            }\n        } else if (!longPressTriggered && pressed && longPressTime > 0 && (now - buttonDownTime) > longPressTime) {\n            // The button is pressed and longPressTime passed.\n            if (onLongPressSeted)\n            {\n                onLongPressFunction(this);\n                longPressTriggered = true;\n            }\n            \n        }\n    }\n    lastState = reading;\n}\n\nvoid Button::setOnClick(ButtonCallback function)\n{\n    onClickSeted = true;\n    onClickFunction = function;\n}\n\nvoid Button::setOnLongPress(ButtonCallback function)\n{\n    onLongPressSeted = true;\n    onLongPressFunction = function;\n}\n\nvoid Button::setDebounceDelay(unsigned long delay)\n{\n    debounceDelay = delay;\n}\n\nvoid Button::setLongPressTime(unsigned long time)\n{\n    longPressTime = time;\n}\n\nbool Button::getState()\n{\n    return pressed;\n}\n\nString Button::getName()\n{\n    return name;\n}\n\nString Button::getButtonType(ButtonType buttonType)\n{\n    if (buttonType == ButtonType::PIN)\n    {\n        return \"PIN\";\n    }\n    else if (buttonType == ButtonType::PCF8574)\n    {\n        return \"PCF8574\";\n    }\n}\n\nButtonType Button::getButtonType(String buttonTypeStr)\n{\n    if (buttonTypeStr == \"PIN\")\n    {\n        return ButtonType::PIN;\n    }\n    else if (buttonTypeStr == \"PCF8574\")\n    {\n        return ButtonType::PCF8574;\n    }    \n\n}\n\nint Button::getPinNumber()\n{\n    return pin_number;\n}\n\nbool Button::getActiveHigh()\n{\n    return activeHigh;\n}\n\nbool Button::getPullUpActive()\n{\n    return pullUpActive;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\IButton.h",
        "content": "#ifndef IBUTTON_H\n#define IBUTTON_H\n\n#include <Arduino.h>\n#include <Wire.h>\n#include <PCF8574.h>\n#include \"../../Database/Entities/Modules/ButtonFullEntity.h\"\n\nenum class ButtonType { PIN, PCF8574 };\nenum class ClickType { None, Clicked, LongPressClicked };\n\nclass IButton\n{\npublic:\n    \n    virtual void setOnClick(void (*function)(IButton*)) = 0;\n    virtual void setOnLongPress(void (*function)(IButton*)) = 0;\n    virtual void setDebounceDelay(unsigned long delay) = 0;\n    virtual void setLongPressTime(unsigned long time) = 0;\n    virtual bool getState() = 0;\n    virtual String getName() = 0;\n    virtual void update() = 0;\n    virtual ButtonFullEntity* getEntity() = 0;\n    virtual ~IButton() {}\n};\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\ILCD.h",
        "content": "#ifndef ILCD_H\n#define ILCD_H\n\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include \"../../Database/Entities/Modules/LCDFullEntity.h\"\n\nenum LCDTypes {OLED_LCD, LCD_16X2};\n\nclass ILCD\n{\npublic:\n    virtual void drawText(String text, int textSize) = 0;\n    virtual void Clean() = 0;\n    virtual LCDFullEntity* getEntity() = 0;\n    static String getLCDType(LCDTypes lcdType)\n    {\n        if (lcdType == LCDTypes::LCD_16X2)\n        {\n            return \"LCD16X2\";\n        }\n        else if (lcdType == LCDTypes::OLED_LCD)\n        {\n            return \"OLED\";\n        }\n    }\n\n    static LCDTypes getLCDType(String lcdTypeStr)\n    {\n        if (lcdTypeStr == \"LCD16X2\")\n        {\n            return LCDTypes::LCD_16X2;\n        }\n        else if (lcdTypeStr == \"OLED\")\n        {\n            return LCDTypes::OLED_LCD;\n        }    \n   \n    }\n};\n\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\IRelay.h",
        "content": "#ifndef IRELAY_H\n#define IRELAY_H\n\n#include \"../../Database/Entities/Modules/RelayFullEntity.h\"\n#include <Arduino.h>\n\nclass IRelay\n{\npublic:\n    virtual void turnOn() = 0;\n    virtual void turnOff() = 0;\n    virtual bool getState() = 0;\n    virtual void update() = 0;\n    virtual void turnOnAfterDelay(unsigned long delay_millis) = 0;\n    virtual void turnOffAfterDelay(unsigned long delay_millis) = 0;\n    virtual void turnOnForDelay(unsigned long delay_millis) = 0;\n    virtual void turnOffForDelay(unsigned long delay_millis) = 0;\n    virtual RelayFullEntity* getEntity() = 0;\n\n\n};\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\ISoilMoistureSensor.h",
        "content": "#ifndef ISOILMOISTURESENSOR_H\n#define ISOILMOISTURESENSOR_H\n\n#include <string>\n#include \"../../Database/Entities/Modules/SoilMoistureFullEntity.h\"\n\nclass ISoilMoistureSensor {\npublic:\n    virtual ~ISoilMoistureSensor() {}\n    virtual void initialize() = 0;\n    virtual int readMoisture() = 0;\n    virtual bool isDry() = 0;\n    virtual bool isWet() = 0;\n    virtual String getName() = 0;\n    virtual String getConnectionType() = 0;\n    virtual int getNodeId() = 0;\n    virtual int getSensorPin() = 0;\n    virtual int getDryThreshold() = 0;\n    virtual int getWetThreshold() = 0;\n    virtual SoilMoistureFullEntity* getEntity() = 0;\n\n};\n\n#endif //ISOILMOISTURESENSOR_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\LCD16X2.h",
        "content": "#ifndef LCD16x2_H\n#define LCD16x2_H\n\n#include \"ModuleTypes.h\"\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include \"../../Database/Entities/Modules/LCDFullEntity.h\"\n\nclass LCD16X2\n{\nprivate:\n    String name;\n    String connectionType;\n    int nodeId;\n    int SCREEN_WIDTH = 128; // OLED display width, in pixels\n    int SCREEN_HEIGHT = 32; // OLED display height, in pixels\n    int SCREEN_ADDRESS = 0x3C;\n    int OLED_RESET = -1;\n    Adafruit_SSD1306 display;\n\npublic:\n    LCD16X2(String _name, int address, int width, int hight);\n    void drawText(String text, int textSize);\n    void Clean();\n    LCDFullEntity* getEntity();\n    static String getLCDType(LCDTypes lcdType);\n    static LCDTypes getLCDType(String lcdTypeStr);\n};\n\nLCD16X2::LCD16X2(String _name, int address, int width, int height) : display(width, height, &Wire, OLED_RESET)\n{\n    SCREEN_WIDTH = width;\n    SCREEN_HEIGHT = height;\n    SCREEN_ADDRESS = address;\n    name = _name;\n    connectionType = \"\";\n    nodeId = 0;\n    \n    if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {\n        Serial.println(F(\"SSD1306 allocation failed\"));\n        for(;;); // Don't proceed, loop forever\n    }\n    display.display();\n    delay(2000); // Pause for 2 seconds\n\n    // Clear the buffer\n    display.clearDisplay();\n    display.setTextSize(1);\n    display.setCursor(5, 5);\n    display.println(\"E-B-P\");\n    // Show the display buffer on the screen. You MUST call display() after\n    // drawing commands to make them visible on screen!\n    display.display();\n    delay(2000);\n}\n\nLCDFullEntity* LCD16X2::getEntity()\n{\n    String lcdTypeStr = getLCDType(LCDTypes::LCD_16X2);\n    LCDFullEntity *lcdEntity = new LCDFullEntity(0, 0, name, ModuleTypes::LCD, connectionType, nodeId, -1,  SCREEN_ADDRESS, SCREEN_HEIGHT, SCREEN_WIDTH, lcdTypeStr);\n    return lcdEntity;\n}\n\nvoid LCD16X2::drawText(String text, int textSize)\n{\n    display.clearDisplay();\n\n    display.setTextSize(textSize); // Draw 2X-scale text\n    display.setTextColor(SSD1306_WHITE);\n    display.setCursor(10, 0);\n    display.println(text);\n    display.display();\n}\n\nvoid LCD16X2::Clean()\n{\n    display.clearDisplay();\n    display.display();\n}\n\nString LCD16X2::getLCDType(LCDTypes lcdType)\n{\n    if (lcdType == LCDTypes::LCD_16X2)\n    {\n        return \"LCD16X2\";\n    }\n    else if (lcdType == LCDTypes::OLED_LCD)\n    {\n        return \"OLED\";\n    }\n}\n\nLCDTypes LCD16X2::getLCDType(String lcdTypeStr)\n{\n    if (lcdTypeStr == \"LCD16X2\")\n    {\n        return LCDTypes::LCD_16X2;\n    }\n    else if (lcdTypeStr == \"OLED\")\n    {\n        return LCDTypes::OLED_LCD;\n    }    \n\n}\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\ModuleTypes.h",
        "content": "#ifndef MODULETYPES_h\n#define MODULETYPES_h\n\nenum LCDTypes {OLED_LCD, LCD_16X2};\n\nclass ModuleTypes {\npublic:\n    static const String BUTTON;\n    static const String RELAY;\n    static const String SOILMOISTURE;\n    static const String LCD;\n    static const String DHT;\n    static const String RGB;\n    static const String PHOTORESISTOR;\n};\n\nconst String ModuleTypes::BUTTON = \"Button\";\nconst String ModuleTypes::RELAY = \"Relay\";\nconst String ModuleTypes::SOILMOISTURE = \"SoilMoisture\";\nconst String ModuleTypes::LCD = \"LCD\";\nconst String ModuleTypes::DHT = \"DHT\";\nconst String ModuleTypes::RGB = \"RGB\";\nconst String ModuleTypes::PHOTORESISTOR = \"PhotoResistor\";\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\OLEDLCD.h",
        "content": "#ifndef OLEDLCD_H\n#define OLEDLCD_H\n\n#include \"ModuleTypes.h\"\n#include <Wire.h>\n#include <LiquidCrystal_I2C.h>\n#include <SPI.h>\n#include <Wire.h>\n#include <Adafruit_GFX.h>\n#include <Adafruit_SSD1306.h>\n#include \"../../Database/Entities/Modules/LCDFullEntity.h\"\n\nclass OLEDLCD {\n  private:\n    String name;\n    uint8_t lcdColumns; \n    uint8_t lcdRows;\n    uint8_t lcdAddress;\n    String connectionType;\n    int nodeId;\n    LiquidCrystal_I2C lcd;\n\n  public:\n    OLEDLCD(String name, uint8_t address, uint8_t columns, uint8_t rows) \n      : lcdColumns(columns), lcdRows(rows), lcdAddress(address), name(name), lcd(address, columns, rows)\n      {\n        begin();\n      }\n\n    void begin() {\n      lcd.begin(lcdColumns, lcdRows);\n      lcd.init();\n      lcd.init();\n      lcd.backlight();\n      lcd.clear();\n    }\n\n    LCDFullEntity* getEntity()\n    {\n        String lcdTypeStr = getLCDType(LCDTypes::LCD_16X2);\n        LCDFullEntity *lcdEntity = new LCDFullEntity(0, 0, name, ModuleTypes::LCD, connectionType, nodeId, -1,  lcdAddress, lcdRows, lcdColumns, lcdTypeStr);\n        return lcdEntity;\n    }\n    void print(const String& message) {\n      lcd.print(message);\n    }\n\n    void printAt(uint8_t col, uint8_t row, const String& message) {\n      lcd.setCursor(col, row);\n      lcd.print(message);\n    }\n\n    void drawText(String text, int textSize)\n    {\n      print(text);\n    }\n\n    void Clean(){\n      lcd.clear();\n    }\n\n    static String getLCDType(LCDTypes lcdType)\n    {\n        if (lcdType == LCDTypes::LCD_16X2)\n        {\n            return \"LCD16X2\";\n        }\n        else if (lcdType == LCDTypes::OLED_LCD)\n        {\n            return \"OLED\";\n        }\n    }\n\n    static LCDTypes getLCDType(String lcdTypeStr)\n    {\n        if (lcdTypeStr == \"LCD16X2\")\n        {\n            return LCDTypes::LCD_16X2;\n        }\n        else if (lcdTypeStr == \"OLED\")\n        {\n            return LCDTypes::OLED_LCD;\n        }    \n   \n    }\n};\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\Relay.h",
        "content": "#ifndef RELAY_H\n#define RELAY_H\n\n#include \"ModuleTypes.h\"\n#include \"../../Database/Entities/Modules/RelayFullEntity.h\"\n\nclass Relay\n{\nprivate:\n    String name;\n    int pin_number;\n    String connectionType;\n    int nodeId;\n    bool state;\n    bool normallyOpen;\n    unsigned long delay_millis;\n    unsigned long start_time;\n    enum { IDLE, TURN_ON_AFTER_DELAY, TURN_OFF_AFTER_DELAY, TURN_ON_FOR_DELAY, TURN_OFF_FOR_DELAY } mode;\n\npublic:\n    Relay(int pin_number, String name, bool normallyOpen = true);\n\n    void turnOn();\n    void turnOff();\n    bool getState();\n    void update();\n    void turnOnAfterDelay(unsigned long delay_millis);\n    void turnOffAfterDelay(unsigned long delay_millis);\n    void turnOnForDelay(unsigned long delay_millis);\n    void turnOffForDelay(unsigned long delay_millis);\n    RelayFullEntity* getEntity();\n\n};\n\nRelay::Relay(int pin_number, String name, bool normallyOpen)\n    : pin_number(pin_number), state(false), name(name), normallyOpen(normallyOpen), mode(IDLE)\n{\n    pinMode(pin_number, OUTPUT);\n    digitalWrite(pin_number, normallyOpen ? LOW : HIGH);\n}\n\nRelayFullEntity* Relay::getEntity()\n{\n    return new RelayFullEntity(0, 0, name, ModuleTypes::RELAY, connectionType, nodeId, pin_number, normallyOpen);\n}\n\nvoid Relay::turnOn()\n{\n    digitalWrite(pin_number, normallyOpen ? HIGH : LOW);\n    if (!state)\n    {\n        state = true;\n    }\n}\n\nvoid Relay::turnOff()\n{\n    digitalWrite(pin_number, normallyOpen ? LOW : HIGH);\n    if(state)\n    {\n        state = false;\n    }\n}\n\nbool Relay::getState()\n{\n    return state;\n}\n\nvoid Relay::update()\n{\n    switch(mode)\n    {\n        case TURN_ON_AFTER_DELAY:\n            if (millis() - start_time >= delay_millis)\n            {\n                turnOn();\n                mode = IDLE;\n            }\n            break;\n        case TURN_OFF_AFTER_DELAY:\n            if (millis() - start_time >= delay_millis)\n            {\n                turnOff();\n                mode = IDLE;\n            }\n            break;\n        case TURN_ON_FOR_DELAY:\n            if (millis() - start_time >= delay_millis)\n            {\n                turnOff();\n                mode = IDLE;\n            }\n            break;\n        case TURN_OFF_FOR_DELAY:\n            if (millis() - start_time >= delay_millis)\n            {\n                turnOn();\n                mode = IDLE;\n            }\n            break;\n    }\n}\n\nvoid Relay::turnOnAfterDelay(unsigned long delay_millis)\n{\n    this->delay_millis = delay_millis;\n    start_time = millis();\n    mode = TURN_ON_AFTER_DELAY;\n}\n\nvoid Relay::turnOffAfterDelay(unsigned long delay_millis)\n{\n    this->delay_millis = delay_millis;\n    start_time = millis();\n    mode = TURN_OFF_AFTER_DELAY;\n}\n\nvoid Relay::turnOnForDelay(unsigned long delay_millis)\n{\n    turnOn();\n    this->delay_millis = delay_millis;\n    start_time = millis();\n    mode = TURN_ON_FOR_DELAY;\n}\n\nvoid Relay::turnOffForDelay(unsigned long delay_millis)\n{\n    turnOff();\n    this->delay_millis = delay_millis;\n    start_time = millis();\n    mode = TURN_OFF_FOR_DELAY;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\SimCardManager.h",
        "content": "#ifndef SIMCARDMANAGER_H\n#define SIMCARDMANAGER_H\n\n#include <Arduino.h>\n#include <HardwareSerial.h>\n\nusing MessageCallback = std::function<void(String, String)>;\n\nclass SimCardManager\n{\npublic:\n    SimCardManager(int rxPin, int txPin) : _sim800(1), _rxPin(rxPin), _txPin(txPin), _lastMillis(0) \n    {\n      initialize();\n    }\n\n    void initialize() {\n        _sim800.begin(4800, SERIAL_8N1, _rxPin, _txPin); // RX, TX\n        delay(1000);\n        _sim800.println(\"AT\");\n        delay(1000);\n        _sim800.println(\"AT+CMGF=1\");\n        delay(1000);\n        _sim800.println(\"AT+CNMI=1,2,0,0,0\");\n        delay(1000);\n        // Other initialization can be added here\n    }\n\nvoid update() {\n  if (_sim800.available() && millis() - _lastMillis > 1000) {\n    String response = _sim800.readString();\n    Serial.println(response);\n\n    // parse the response, extract phone number and message\n    String phoneNumber = \"\"; \n    String message = \"\"; \n\n    // check if the response contains \"+CMT:\"\n    int indexCMT = response.indexOf(\"+CMT:\");\n    if (indexCMT != -1) {\n      int indexFirstQuote = response.indexOf(\"\\\"\", indexCMT);\n      int indexSecondQuote = response.indexOf(\"\\\"\", indexFirstQuote + 1);\n      \n      // extract the phone number\n      phoneNumber = response.substring(indexFirstQuote + 1, indexSecondQuote);\n      \n      // extract the message\n      int indexNewLine = response.indexOf(\"\\n\", indexSecondQuote);\n      if (indexNewLine != -1) {\n        message = response.substring(indexNewLine + 1);\n        message.trim();  // remove leading/trailing whitespaces\n      }\n    }\n\n    if (_onMessageReceived && phoneNumber != \"\" && message != \"\") {\n      _onMessageReceived(phoneNumber, message);\n    }\n\n    _lastMillis = millis();\n  }\n}\n\n    bool sendMessage(String phoneNumber, String message) {\n        _sim800.println(\"AT+CMGF=1\"); // set to SMS mode\n        _sim800.print(\"AT+CMGS=\\\"\");\n        _sim800.print(phoneNumber);\n        _sim800.println(\"\\\"\");\n\n        _sim800.println(message);\n        _sim800.write(26); // send Ctrl+Z\n\n        // here you could check if the message was sent successfully\n        // return true if successful, false otherwise\n        return true;\n    }\n\n    void setOnMessageReceived(MessageCallback function) {\n        _onMessageReceived = function;\n    }\n\nprivate:\n    HardwareSerial _sim800;\n    int _rxPin, _txPin;\n    unsigned long _lastMillis;\n    MessageCallback _onMessageReceived;\n};\n\n#endif //SIMCARDMANAGER_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\ModuleManager\\Modules\\SoilMoistureSensor.h",
        "content": "#ifndef SOILMOISTURE_H\n#define SOILMOISTURE_H\n\n#include \"ISoilMoistureSensor.h\"\n#include <string>\n#include \"ModuleTypes.h\"\n\nclass SoilMoistureSensor : public ISoilMoistureSensor {\nprivate:\n  String name;\n  String connectionType;\n  int nodeId;\n  int sensorPin;       // Pin connected to the soil moisture sensor\n  int dryThreshold;    // Threshold value indicating dry soil\n  int wetThreshold;    // Threshold value indicating wet soil\n\npublic:\n  SoilMoistureSensor(String name, String connectionType, int nodeId, int sensorPin, int dryThreshold, int wetThreshold)\n    : name(name), connectionType(connectionType), nodeId(nodeId), sensorPin(sensorPin), dryThreshold(dryThreshold), wetThreshold(wetThreshold) {}\n\n  void initialize() override {\n    pinMode(sensorPin, INPUT);\n  }\n\n  int readMoisture() override {\n    int moisture = analogRead(sensorPin);\n    return moisture;\n  }\n\n  bool isDry() override {\n    int moisture = readMoisture();\n    return moisture <= dryThreshold;\n  }\n\n  bool isWet() override {\n    int moisture = readMoisture();\n    return moisture >= wetThreshold;\n  }\n\n  String getName() override {\n    return name;\n  }\n\n  String getConnectionType() override {\n    return connectionType;\n  }\n\n  int getNodeId() override {\n    return nodeId;\n  }\n\n  int getSensorPin() override {\n    return sensorPin;\n  }\n\n  int getDryThreshold() override {\n    return dryThreshold;\n  }\n\n  int getWetThreshold() override {\n    return wetThreshold;\n  }\n\n  SoilMoistureFullEntity* getEntity() override\n  {\n    SoilMoistureFullEntity *soilMoistureEntity = new SoilMoistureFullEntity(0, 0, name, ModuleTypes::SOILMOISTURE, connectionType, nodeId, sensorPin,  dryThreshold, wetThreshold, \"Analog\");\n    return soilMoistureEntity;\n  }\n};\n\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\INetwork.h",
        "content": "#ifndef INETWORK\n#define INETWORK\n#include <HTTPS_Server_Generic.h>\n// #include \"MeshNetwork/IMeshNetworkManager.h\"\n#include \"WiFi/IWiFiManager.h\"\n#include \"MeshNetwork/Receive.h\"\n#include \"LambdaResourceNode.h\"\n\nusing namespace httpsserver;\n\nstruct CertificateData{\n    unsigned char* certificate;\n    uint16_t certificate_length;\n    unsigned char* privatekey;\n    uint16_t privateky_length;\n};\n\nclass INetwork {\npublic:\n    virtual void initialize() = 0;\n    virtual void addApis(std::vector<ApiInterface*> apis) = 0;\n    virtual void update() = 0;\n    // virtual IMeshNetworkManager* getMeshManager() = 0;\n    virtual IWiFiManager* getWiFiManager() = 0;\n    virtual HTTPServer& getHTTPServer() = 0;\n    virtual HTTPSServer& getHTTPSServer() = 0;\n    virtual void addApi(ResourceNode* api) = 0;\n    virtual void addUrlNotFound(ResourceNode* api) = 0;\n    virtual Receive* getReceive() = 0;\n\n};\n\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\LambdaResourceNode.h",
        "content": "#ifndef LAMBDARESOURCENODE_H\n#define LAMBDARESOURCENODE_H\n\n#include <map>\n#include <string>\n#include <functional>\n\nclass LambdaResourceNode : public httpsserver::ResourceNode {\npublic:\n    LambdaResourceNode(const std::string &path, const std::string &method, \n                       std::function<void(HTTPRequest *, HTTPResponse *)> lambda)\n    : httpsserver::ResourceNode(path, method, &LambdaResourceNode::staticHandler), \n      lambda_(lambda) {\n        lambdaMap_[path] = lambda;\n    }\n\n    static const std::string REQUEST_METHOD_GET;\n    static const std::string REQUEST_METHOD_POST;\n    static const std::string REQUEST_METHOD_PUT;\n    static const std::string REQUEST_METHOD_DELETE;\n\nprivate:\n    std::function<void(HTTPRequest *, HTTPResponse *)> lambda_;\n    static std::map<std::string, std::function<void(HTTPRequest *, HTTPResponse *)>> lambdaMap_;\n\n    static void staticHandler(HTTPRequest *req, HTTPResponse *res) {\n        std::string path = req->getRequestString(); // Get the path from the request\n        auto it = lambdaMap_.find(path);\n        if (it != lambdaMap_.end()) {\n            it->second(req, res); // Execute the lambda function associated with the path\n        }\n    }\n};\n\nstd::map<std::string, std::function<void(HTTPRequest *, HTTPResponse *)>> LambdaResourceNode::lambdaMap_;\n\n\nconst std::string LambdaResourceNode::REQUEST_METHOD_GET = \"GET\";\nconst std::string LambdaResourceNode::REQUEST_METHOD_POST = \"POST\";\nconst std::string LambdaResourceNode::REQUEST_METHOD_PUT = \"PUT\";\nconst std::string LambdaResourceNode::REQUEST_METHOD_DELETE = \"DELETE\";\n#endif //LAMBDARESOURCENODE_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\Network.h",
        "content": "#ifndef Network_H\n#define Network_H\n\n#define ASYNC_TCP_SSL_ENABLED 1\n\n#include \"INetwork.h\"\n#include \"IPAddress.h\"\n#if defined(ESP8266)\n#include <ESP8266HTTPClient.h>\n#else\n#include <HTTPClient.h>\n#endif\n#include \"../Context.h\"\n// #include \"MeshNetwork/MeshNetworkManager.h\"\n#include \"WiFi/WiFiManager.h\"\n\n#include \"apis/System/AddSystemApis.h\"\n#include \"apis/Modules/AddModulesApis.h\"\n#include \"apis/Authorization/AuthorizationApis.h\"\n\n// The HTTPS Server comes in a separate namespace. For easier use, include it here.\nusing namespace httpsserver;\n\nstruct ServerTaskParams {\n    HTTPSServer* httpsServer;\n    HTTPServer* httpServer;\n    bool https_enabled;\n    // Add other members as needed\n};\n\nclass Network : public INetwork {\nprivate:\n    // AsyncWebServer server;\n    HTTPServer* httpServer;\n    HTTPSServer* httpsServer;\n    // HTTPClient http;\n    Context* context;\n    Receive receive;\n    SSLCert cert;\n\n    void configureWebServer();\n    void rebootESP(String message);\n    // MeshNetworkManager* meshManager;\n    WiFiManager* wiFiManager;\n    CertificateData _certificateData;\n    static void serverTask(ServerTaskParams* params);\n    static void serverTaskWrapper(void *params);\n\npublic:\n    Network(Context* context);\n    Network(Context* context, CertificateData certificateDate);\n    void initialize() override;\n    void addApi(ResourceNode* api) override;\n    void addUrlNotFound(ResourceNode* api) override;\n    void addApis(std::vector<ApiInterface*> apis) override;\n    void update() override;\n    // IMeshNetworkManager* getMeshManager() override;\n    IWiFiManager* getWiFiManager() override;\n    HTTPServer& getHTTPServer() override;\n    HTTPSServer& getHTTPSServer() override;\n\n    Receive* getReceive() override;\n    void begin();\n};\n\nNetwork::Network(Context* cntxt) : context(cntxt)\n{\n\n}\n\nNetwork::Network(Context* ctxt, CertificateData certificateData): context(ctxt), _certificateData(certificateData)\n{\n\n}\n\nvoid Network::rebootESP(String message) {\n    context->getLogger()->log(LogLevel::INFO_LEVEL, LogTitles::SYSTEM_REBOOT, String(\"Rebooting ESP: \" + message));\n    ESP.restart();\n}\n\nHTTPServer& Network::getHTTPServer()\n{\n  return *httpServer;\n}\n\nHTTPSServer& Network::getHTTPSServer()\n{\n  return *httpsServer;\n}\n\nReceive* Network::getReceive()\n{\n  return &receive;\n}\n\nvoid Network::configureWebServer() {\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Configuring Web Server ...\");\n    \n    if (_https_enabled)\n    {\n      \n      cert = SSLCert(\n                      _certificateData.certificate, _certificateData.certificate_length,\n                      _certificateData.privatekey, _certificateData.privateky_length\n                    );\n\n      // First, we create the HTTPSServer with the certificate created above\n      httpsServer = new HTTPSServer(&cert);\n      // Additionally, we create an HTTPServer for unencrypted traffic\n    }\n    httpServer = new HTTPServer();\n\n    createSystemApis(context);\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"System Apis Created.\");    \n    createAuthorizationApis(context);\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Authorization Apis Created.\");\n    createModulesApis(context);\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Module Apis Created.\");\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Web Server Configured.\");\n}\n\nvoid Network::addUrlNotFound(ResourceNode* api)\n{\n  httpServer->setDefaultNode(api);\n  if (_https_enabled)\n  {\n    httpsServer->setDefaultNode(api);\n  }\n}\n\nvoid Network::addApi(ResourceNode* api)\n{\n  httpServer->registerNode(api);\n  if (_https_enabled)\n  {\n    httpsServer->registerNode(api);\n  }\n}\n\nvoid Network::addApis(std::vector<ApiInterface*> apis)\n{\n  for (size_t i = 0; i < apis.size(); i++)\n  {\n    ApiInterface* api = apis.at(i);\n    receive.registerClass(String(api->getClassPath().c_str()), api);\n  } \n}\n\nvoid Network::begin() {\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Starting Webserver ...\");\n  ServerTaskParams* params = new ServerTaskParams;\n  params->httpsServer = httpsServer;\n  params->httpServer = httpServer;\n  params->https_enabled = _https_enabled;\n  // Set other members as needed\n  xTaskCreatePinnedToCore(serverTaskWrapper, \"https443\", 6144, params, 1, NULL, ARDUINO_RUNNING_CORE);\n}\n\nvoid Network::serverTaskWrapper(void *params) {\n    \n    ServerTaskParams* taskParams = static_cast<ServerTaskParams*>(params);\n    Network::serverTask(taskParams);\n}\n\nvoid Network::serverTask(ServerTaskParams* params) {\n    // Use params->httpsServer and params->httpServer here\n    params->httpServer->start();\n    if (params->https_enabled)\n    {\n      params->httpsServer->start();\n    }\n    \n\n    if (params->httpServer->isRunning())\n    {\n      Serial.println(\"HTTP Server is ready.\");\n      if(params->https_enabled  && params->httpsServer->isRunning())\n      {\n        Serial.println(\"HTTPS Server is ready.\");\n      }\n\n      // \"loop()\" function of the separate task\n      while (true)\n      {\n        // This call will let the server do its work\n        params->httpServer->loop();\n        if (params->https_enabled)\n        {\n          params->httpsServer->loop();\n        }\n\n        // Other code would go here...\n        delay(1);\n      }\n    }\n    \n}\n\nvoid Network::initialize() {\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Initializing Network ...\");\n\n  // meshManager = new MeshNetworkManager(*context);\n\n  wiFiManager = new WiFiManager(context);\n\n  int stationCount = 0;\n\n  // WiFi.mode(WIFI_MODE_AP);\n  if(context->getConfig()->getSystemConfig()->get(SystemConfigKey::WIFI_MODE_AP) == \"true\")\n  {\n    wiFiManager->configureAccessPointMode();\n    stationCount = stationCount + 1;\n  }\n  if(context->getConfig()->getSystemConfig()->get(SystemConfigKey::WIFI_MODE_WIFI) == \"true\")\n  {\n    if(stationCount > 1)\n    {\n      context->getLogger()->log(LogLevel::ERROR_LEVEL, LogTitles::SYSTEM_BOOT, \"Mesh and AccesPoint are active and Wifi can not run. but it is true.\");\n      return;\n    }\n    else if(stationCount == 1)\n    {\n      // WiFi.mode(WIFI_MODE_STA);\n    }\n    else\n    {\n      // WiFi.mode(WIFI_MODE_STA);\n    }\n    wiFiManager->configureStationMode();\n  }\n  if(context->getConfig()->getSystemConfig()->get(SystemConfigKey::WIFI_MODE_MESH) == \"true\")\n  {\n    // meshManager->initialize();\n    stationCount = stationCount + 1;\n  }\n  else\n  {\n    if (stationCount == 0)\n    {\n      wiFiManager->configureAccessPointMode();\n    }    \n  }\n  wiFiManager->displayNetworkInfo();\n  configureWebServer();\n\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Network Initialized.\");\n}\n\nvoid Network::update() {\n  // meshManager->loop();  \n    // syncDatabaseLoop();\n}\n\n// IMeshNetworkManager* Network::getMeshManager()\n// {\n//   return meshManager;\n// }\n\nIWiFiManager* Network::getWiFiManager()\n{\n  return wiFiManager;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\ApiInterface.h",
        "content": "#ifndef APIINTERFACE_H\n#define APIINTERFACE_H\n\n// ApiInterface.h\n#include <map>\n#include <string>\n#include <sstream>\n#include <Arduino.h>\n#include <HTTPS_Server_Generic.h>\n#include \"../../FileManager/IEBPFile.h\"\n\nusing namespace httpsserver;\n\nclass ApiInterface {\npublic:\n    virtual String callFunction(String functionName, std::map<String, String> parameters) = 0;\n    virtual String getClassPath() = 0;\n\n    static const String MISSING_INPUT_PARAMS_MESSAGE;\n    static const String CREATE_SUCCESFULL_MESSAGE;\n    static const String CREATE_FAILED_MESSAGE;\n    static const String DELETE_FAILED_MESSAGE;\n    static const String DELETE_SUCCESFULL_MESSAGE;\n    static const String UPDATE_SUCCESFULL_MESSAGE;\n    static const String UPDATE_FAILED_MESSAGE;\n    static const String NO_FUNCTION_MESSAGE;\n    static const String PAGE_NOT_FOUND_MESSAGE;\n};\n\nconst String ApiInterface::MISSING_INPUT_PARAMS_MESSAGE = \"missing some input params in your request\";\nconst String ApiInterface::CREATE_FAILED_MESSAGE = \"Create Operation Failed!\";\nconst String ApiInterface::CREATE_SUCCESFULL_MESSAGE = \"Create Succesfull\";\nconst String ApiInterface::DELETE_FAILED_MESSAGE = \"Delete Operation Failed!\";\nconst String ApiInterface::DELETE_SUCCESFULL_MESSAGE = \"Delete Succesfull\";\nconst String ApiInterface::UPDATE_SUCCESFULL_MESSAGE = \"Update Succesfull\";\nconst String ApiInterface::UPDATE_FAILED_MESSAGE = \"Update Operation Failed!\";\nconst String ApiInterface::NO_FUNCTION_MESSAGE = \"There is no function named \";\nconst String ApiInterface::PAGE_NOT_FOUND_MESSAGE = \"<!DOCTYPE html><html><body style=\\\"background-color:black; color:white; text-align:center; height:100vh; display:flex; align-items:center; justify-content:center; margin:0;\\\"><h1>Page Not Found!</h1></body></html>\";\n\n\nvoid response(HTTPResponse * res, int status_code, String status_text, String content_type, String response_text)\n{\n    res->setStatusCode(status_code);\n    res->setStatusText(status_text.c_str());\n    res->setHeader(\"Content-Type\", content_type.c_str());\n    res->println(response_text);\n}\n\nvoid response(HTTPResponse * res, int status_code, String content_type, String response_text)\n{\n    res->setStatusCode(status_code);\n    res->setStatusText(String(status_code).c_str());\n    res->setHeader(\"Content-Type\", content_type.c_str());\n    res->println(response_text);\n}\n\nvoid response(HTTPResponse * res, int status_code, String response_text)\n{\n    res->setStatusCode(status_code);\n    res->setStatusText(String(status_code).c_str());\n    res->setHeader(\"Content-Type\", \"text/html\");\n    res->println(response_text);\n}\n\nvoid response(HTTPResponse * res, String response_text)\n{\n    res->setStatusCode(200);\n    res->setStatusText(\"Succesfull\");\n    res->setHeader(\"Content-Type\", \"text/html\");\n    res->println(response_text);\n}\n\nString getQueryParameterString(HTTPRequest * req, String parameter)\n{\n    std::string output;\n    req->getParams()->getQueryParameter(parameter.c_str(), output);\n    return String(output.c_str());\n}\n\nint getQueryParameterint(HTTPRequest * req, String parameter)\n{\n    std::string output;\n    req->getParams()->getQueryParameter(parameter.c_str(), output);\n    int number;\n    std::stringstream ss(output);\n\n    if (ss >> number && ss.eof()) {\n        // Successfully converted to an int\n        return number;\n    } else {\n        // Conversion failed, return -9999\n        return -9999;\n    }\n}\n\nvoid DownloadFile(HTTPResponse *res, String filename, String contentType, StorageType storageType) {\n  // Set content type based on file extension\n//   std::string _contentType = \"application/octet-stream\"; // Default content type\n    std::string _contentType ; // Default content type\n    if (contentType == \"\")\n    {\n        // Determine content type based on file extension\n        if (filename.endsWith(\".html\")) {\n            _contentType = \"text/html\";\n        } else if (filename.endsWith(\".css\")) {\n            _contentType = \"text/css\";\n        } else if (filename.endsWith(\".js\")) {\n            _contentType = \"text/javascript\";\n        } else if (filename.endsWith(\".json\")) {\n            _contentType = \"application/json\";\n        } else if (filename.endsWith(\".png\")) {\n            _contentType = \"image/png\";\n        } else if (filename.endsWith(\".jpg\") || filename.endsWith(\".jpeg\")) {\n            _contentType = \"image/jpeg\";\n        } else if (filename.endsWith(\".svg\")) {\n            _contentType = \"image/svg+xml\";\n        } else if (filename.endsWith(\".gif\")) {\n            _contentType = \"image/gif\";\n        } else if (filename.endsWith(\".pdf\")) {\n            _contentType = \"application/pdf\";\n        } else if (filename.endsWith(\".xml\")) {\n            _contentType = \"application/xml\";\n        } else if (filename.endsWith(\".txt\") || filename.endsWith(\".db\")) {\n            _contentType = \"text/plain\";\n        } else if (filename.endsWith(\".mp3\")) {\n            _contentType = \"audio/mpeg\";\n        } else if (filename.endsWith(\".mp4\")) {\n            _contentType = \"video/mp4\";\n        } else if (filename != \"\") {\n            // Set a default content type for unknown file types\n            _contentType = \"text/html\";\n        } \n    } else {\n        // if contentType is filled by user, add it to header content type\n        _contentType = std::string(contentType.c_str());\n    }\n  \n    File file;\n    if (storageType == StorageType::SPIFFS_TYPE) {\n        file = LittleFS.open(filename.c_str(), \"r\");\n    } else if (storageType == StorageType::SD_TYPE) {\n        file = SD.open(filename.c_str(), \"r\");\n    }\n\n  // Set response headers\n//   res->setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + std::string(filename.c_str()) + \"\\\"\");\n    res->setHeader(\"Content-Type\", _contentType);\n//   res->setHeader(\"Content-Length\", std::string(String(file.size()).c_str()));\n\n    // Send the file content\n    uint8_t buffer[256];\n    size_t bytesRead;\n\n    while ((bytesRead = file.read(buffer, sizeof(buffer))) > 0) {\n        res->write(buffer, bytesRead);\n    }\n\n    // Close the file\n    file.close();\n}\n\nvoid RedirectUrl(HTTPResponse * res, String url)\n{\n    res->setStatusCode(303);\n    res->setStatusText(\"See Other\");\n    res->setHeader(\"Location\", url.c_str());\n    res->println(\"Redirecting...\");    \n}\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\AccountActivityLogApis.h",
        "content": "#ifndef ACCOUNTACTIVITYLOGAPIS_h\n#define ACCOUNTACTIVITYLOGAPIS_h\n\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/AccountActivityLogController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass AccountActivityLogApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    AccountActivityLogController* accountactivitylogController;\n    std::string class_path = \"/accountactivitylog\";\n\npublic:\n    AccountActivityLogApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, String Activity, EBPDateTime Timestamp);\n    String handleupdate(int id, int UserId, String Activity, EBPDateTime Timestamp);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nAccountActivityLogApis::AccountActivityLogApis(Context* cntxt, bool add_apis): context(cntxt) {\n    accountactivitylogController = new AccountActivityLogController(context, storageType);\n    \n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"Activity\") || !req->getParams()->isQueryParameterSet(\"Timestamp\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string Activity;\n        req->getParams()->getQueryParameter(\"Activity\", Activity);\n    std::string Timestamp;\n        req->getParams()->getQueryParameter(\"Timestamp\", Timestamp);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(Activity.c_str()), String(Timestamp.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"Activity\") || !req->getParams()->isQueryParameterSet(\"Timestamp\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string Activity;\n        req->getParams()->getQueryParameter(\"Activity\", Activity);\n    std::string Timestamp;\n        req->getParams()->getQueryParameter(\"Timestamp\", Timestamp);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(Activity.c_str()), String(Timestamp.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTACTIVITYLOG_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString AccountActivityLogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString AccountActivityLogApis::handlecreate(int UserId, String Activity, EBPDateTime Timestamp) {\n    AccountActivityLogEntity* accountactivitylogEntity = new AccountActivityLogEntity(UserId, Activity, Timestamp);\n    int id = accountactivitylogController->Add(*accountactivitylogEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString AccountActivityLogApis::handleupdate(int id, int UserId, String Activity, EBPDateTime Timestamp) {\n    AccountActivityLogEntity* accountactivitylogEntity = new AccountActivityLogEntity(id, UserId, Activity, Timestamp);\n    \n    if (accountactivitylogController->Update(*accountactivitylogEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString AccountActivityLogApis::handledelete(int id) {\n    \n    if (accountactivitylogController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString AccountActivityLogApis::handlegetAll() {\n    return accountactivitylogController->GetAllJson();\n}\nString AccountActivityLogApis::handlegetById(int id) {\n    return accountactivitylogController->GetById(id).toJson();\n}\nString AccountActivityLogApis::handleget(String query) {\n    return accountactivitylogController->GetJson(query);\n}\n\nString AccountActivityLogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"Activity\"], parameters[\"Timestamp\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"Activity\"], parameters[\"Timestamp\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //ACCOUNTACTIVITYLOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\AccountLockoutApis.h",
        "content": "#ifndef ACCOUNTLOCKOUTAPIS_h\n#define ACCOUNTLOCKOUTAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/AccountLockoutController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass AccountLockoutApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    AccountLockoutController* accountlockoutController;\n    std::string class_path = \"/accountlockout\";\n\npublic:\n    AccountLockoutApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, EBPDateTime LockoutStartTime, EBPDateTime LockoutEndTime);\n    String handleupdate(int id, int UserId, EBPDateTime LockoutStartTime, EBPDateTime LockoutEndTime);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nAccountLockoutApis::AccountLockoutApis(Context* cntxt, bool add_apis): context(cntxt) {\n    accountlockoutController = new AccountLockoutController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"LockoutStartTime\") || !req->getParams()->isQueryParameterSet(\"LockoutEndTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string LockoutStartTime;\n        req->getParams()->getQueryParameter(\"LockoutStartTime\", LockoutStartTime);\n    std::string LockoutEndTime;\n        req->getParams()->getQueryParameter(\"LockoutEndTime\", LockoutEndTime);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(LockoutStartTime.c_str()), String(LockoutEndTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"LockoutStartTime\") || !req->getParams()->isQueryParameterSet(\"LockoutEndTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string LockoutStartTime;\n        req->getParams()->getQueryParameter(\"LockoutStartTime\", LockoutStartTime);\n    std::string LockoutEndTime;\n        req->getParams()->getQueryParameter(\"LockoutEndTime\", LockoutEndTime);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(LockoutStartTime.c_str()), String(LockoutEndTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ACCOUNTLOCKOUT_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString AccountLockoutApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString AccountLockoutApis::handlecreate(int UserId, EBPDateTime LockoutStartTime, EBPDateTime LockoutEndTime) {\n    AccountLockoutEntity* accountlockoutEntity = new AccountLockoutEntity(UserId, LockoutStartTime, LockoutEndTime);\n    int id = accountlockoutController->Add(*accountlockoutEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString AccountLockoutApis::handleupdate(int id, int UserId, EBPDateTime LockoutStartTime, EBPDateTime LockoutEndTime) {\n    AccountLockoutEntity* accountlockoutEntity = new AccountLockoutEntity(id, UserId, LockoutStartTime, LockoutEndTime);\n    \n    if (accountlockoutController->Update(*accountlockoutEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString AccountLockoutApis::handledelete(int id) {\n    \n    if (accountlockoutController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString AccountLockoutApis::handlegetAll() {\n    return accountlockoutController->GetAllJson();\n}\nString AccountLockoutApis::handlegetById(int id) {\n    return accountlockoutController->GetById(id).toJson();\n}\nString AccountLockoutApis::handleget(String query) {\n    return accountlockoutController->GetJson(query);\n}\n\nString AccountLockoutApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"LockoutStartTime\"], parameters[\"LockoutEndTime\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"LockoutStartTime\"], parameters[\"LockoutEndTime\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //ACCOUNTLOCKOUTApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\AuthenticationApis.h",
        "content": "\n#ifndef AuthenticationApis_h\n#define AuthenticationApis_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/LoginAttemptController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass AuthenticationApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    std::string class_path = \"/authentication\";\n\npublic:\n    AuthenticationApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    void handlelogin(HTTPResponse * res, String username, String password);\n    String handlelogin(String username, String password);\n    String handlelogout(String username);\n    String handlepasswordReset(String username);\n    String handlepasswordResetConfirm(String username, String reset_token, String new_password);\n    String handletwoFactorAuth(String username);\n    String handletwoFactorAuthConfirm(String username, String otp_code);\n    String handleaccountLock(String username);\n    String handleaccountUnlock(String username);\n    String handlesecurityQuestionAnswer(String username, String question_id, String answer);\n};\n\nAuthenticationApis::AuthenticationApis(Context* cntxt, bool add_apis): context(cntxt) {\n    if (!add_apis) return;    \n    \n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/login\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        // if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"username\") || !req->getParams()->isQueryParameterSet(\"password\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String username = getQueryParameterString(req, \"username\");\n        String password = getQueryParameterString(req, \"password\");\n        \n        handlelogin(res, username, password);\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/logout\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::GetData)){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"username\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String username = getQueryParameterString(req, \"username\");\n        \n        response(res, handlelogout(username)); \n    }));\n\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/passwordReset\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!request->hasParam(\"username\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n\n    //     String username = request->getParam(\"username\")->value();\n        \n    //     request->send(200, \"text/html\", handlepasswordReset(username));\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/passwordResetConfirm\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!request->hasParam(\"username\") || !request->hasParam(\"new_password\") || !request->hasParam(\"token\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     String reset_token = request->getParam(\"token\")->value();\n    //     String new_password = request->getParam(\"new_password\")->value();\n        \n    //     request->send(200, \"text/html\", handlepasswordResetConfirm(username, reset_token, new_password));\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/twoFactorAuth\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!request->hasParam(\"username\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     handletwoFactorAuth(username);\n    //     request->send(200, \"text/html\", \"Successful\");\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/twoFactorAuthConfirm\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!request->hasParam(\"username\") || !request->hasParam(\"otp_code\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     String otp_code = request->getParam(\"otp_code\")->value();\n        \n    //     request->send(200, \"text/html\", handletwoFactorAuthConfirm(username, otp_code));\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/accountLock\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!context->getSecurity()->checkAuthentication(request, AuthorizationPermissions::AUTHENTICATION_ACCOUNTLOCK)){return;}\n    //     if (!request->hasParam(\"username\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     handleaccountLock(username);\n    //     request->send(200, \"text/html\", \"Successful\");\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/accountUnlock\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!context->getSecurity()->checkAuthentication(request, AuthorizationPermissions::AUTHENTICATION_ACCOUNTUNLOCK)){return;}\n    //     if (!request->hasParam(\"username\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     handleaccountUnlock(username);\n    //     request->send(200, \"text/html\", \"Successful\");\n    // }));\n    // context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/securityQuestionAnswer\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n    //     if (!request->hasParam(\"username\") || !request->hasParam(\"question_id\") || !request->hasParam(\"answer\"))\n    //     {\n    //         request->send(400, \"text/html\", \"missing some input params in your request\");\n    //     }\n    //     String username = request->getParam(\"username\")->value();\n    //     String question_id = request->getParam(\"question_id\")->value();\n    //     String answer = request->getParam(\"answer\")->value();\n    //     handlesecurityQuestionAnswer(username, question_id, answer);\n    //     request->send(200, \"text/html\", \"Successful\");\n    // }));\n}\n\nString AuthenticationApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\n\nString AuthenticationApis::handlelogin(String username, String password) {\n    return context->getSecurity()->login(username, password).getMessage();\n}\n\nvoid AuthenticationApis::handlelogin(HTTPResponse * res, String username, String password) {\n    LoginResult result = context->getSecurity()->login(username, password);\n    if (result.Succesfull)\n    {\n        response(res, result.getMessage());\n    }\n    else{\n        response(res, 401, result.getMessage());\n    }\n    \n}\n\nString AuthenticationApis::handlelogout(String username) {\n    return context->getSecurity()->logout(username).getMessage();\n}\n\nString AuthenticationApis::handlepasswordReset(String username) {\n    return \"\";\n}\nString AuthenticationApis::handlepasswordResetConfirm(String username, String reset_token, String new_password) {\n    return \"\";\n}\nString AuthenticationApis::handletwoFactorAuth(String username) {\n    return \"\";\n}\nString AuthenticationApis::handletwoFactorAuthConfirm(String username, String otp_code) {\n    return \"\";\n}\nString AuthenticationApis::handleaccountLock(String username) {\n    return \"\";\n}\nString AuthenticationApis::handleaccountUnlock(String username) {\n    return \"\";\n}\nString AuthenticationApis::handlesecurityQuestionAnswer(String username, String question_id, String answer) {\n    return \"\";\n}\n\nString AuthenticationApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlelogin\") {\n        handlelogin(parameters[\"username\"], parameters[\"password\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handlelogout\") {\n        return handlelogout(parameters[\"username\"]);\n    }\n    if (functionName == \"handlepasswordReset\") {\n        handlepasswordReset(parameters[\"username\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handlepasswordResetConfirm\") {\n        handlepasswordResetConfirm(parameters[\"username\"], parameters[\"reset_token\"], parameters[\"new_password\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handletwoFactorAuth\") {\n        handletwoFactorAuth(parameters[\"username\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handletwoFactorAuthConfirm\") {\n        handletwoFactorAuthConfirm(parameters[\"username\"], parameters[\"otp_code\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handleaccountLock\") {\n        handleaccountLock(parameters[\"username\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handleaccountUnlock\") {\n        handleaccountUnlock(parameters[\"username\"]);\n        return \"OK\";\n    }\n    if (functionName == \"handlesecurityQuestionAnswer\") {\n        handlesecurityQuestionAnswer(parameters[\"username\"], parameters[\"question_id\"], parameters[\"answer\"]);\n        return \"OK\";\n    }\n    return \"\";\n}\n\n#endif //AuthenticationApis_h"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\AuthorizationApis.h",
        "content": "#ifndef AUTHORIZATIONAPIS_H\n#define AUTHORIZATIONAPIS_H\n\n#include \"../../../Security/AuthorizationPermissions.h\"\n#include \"UserApis.h\"\n#include \"RoleApis.h\"\n#include \"PermissionApis.h\"\n#include \"RolePermissionApis.h\"\n#include \"UserResetPassApis.h\"\n#include \"SecurityQuestionApis.h\"\n#include \"SecurityQuestionTitleApis.h\"\n#include \"LoginAttemptApis.h\"\n#include \"AccountLockoutApis.h\"\n#include \"TwoFactorAuthApis.h\"\n#include \"AccountActivityLogApis.h\"\n#include \"AuthenticationApis.h\"\n\n\nvoid createAuthorizationApis(Context* context)\n{\n    std::vector<ApiInterface*> apis = std::vector<ApiInterface*>();\n    \n    UserApis* userApis = new UserApis(context, true);\n    apis.push_back(userApis);\n    \n    RoleApis* roleApis = new RoleApis(context, true);\n    apis.push_back(roleApis);\n    \n    PermissionApis* permissionApis = new PermissionApis(context, true);\n    apis.push_back(permissionApis);\n    \n    RolePermissionApis* rolepermissionApis = new RolePermissionApis(context, true);\n    apis.push_back(rolepermissionApis);\n    \n    // UserResetPassApis* userresetpassApis = new UserResetPassApis(context, true);\n    // apis.push_back(userresetpassApis);\n    \n    // SecurityQuestionApis* securityquestionApis = new SecurityQuestionApis(context, true);\n    // apis.push_back(securityquestionApis);\n    \n    // SecurityQuestionTitleApis* securityquestiontitleApis = new SecurityQuestionTitleApis(context, true);\n    // apis.push_back(securityquestiontitleApis);\n    \n    // LoginAttemptApis* loginattemptApis = new LoginAttemptApis(context, true);\n    // apis.push_back(loginattemptApis);\n    \n    // AccountLockoutApis* accountlockoutApis = new AccountLockoutApis(context, true);\n    // apis.push_back(accountlockoutApis);\n    \n    AuthenticationApis* authenticationApis = new AuthenticationApis(context, true);\n    apis.push_back(authenticationApis);\n    \n    // TwoFactorAuthApis* twofactorauthApis = new TwoFactorAuthApis(context, true);\n    // apis.push_back(twofactorauthApis);\n    \n    // AccountActivityLogApis* accountactivitylogApis = new AccountActivityLogApis(context, true);\n    // apis.push_back(accountactivitylogApis);\n    \n\n    context->getNetwork()->addApis(apis);\n}\n\n#endif //AUTHORIZATIONAPIS_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\LoginAttemptApis.h",
        "content": "#ifndef LOGINATTEMPTAPIS_h\n#define LOGINATTEMPTAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/LoginAttemptController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass LoginAttemptApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    LoginAttemptController* loginattemptController;\n    std::string class_path = \"/loginattempt\";\n\npublic:\n    LoginAttemptApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, EBPDateTime Timestamp);\n    String handleupdate(int id, int UserId, EBPDateTime Timestamp);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nLoginAttemptApis::LoginAttemptApis(Context* cntxt, bool add_apis): context(cntxt) {\n    loginattemptController = new LoginAttemptController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"Timestamp\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string Timestamp;\n        req->getParams()->getQueryParameter(\"Timestamp\", Timestamp);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(Timestamp.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"Timestamp\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string Timestamp;\n        req->getParams()->getQueryParameter(\"Timestamp\", Timestamp);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(Timestamp.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::LOGINATTEMPT_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString LoginAttemptApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString LoginAttemptApis::handlecreate(int UserId, EBPDateTime Timestamp) {\n    LoginAttemptEntity* loginattemptEntity = new LoginAttemptEntity(UserId, Timestamp);\n    int id = loginattemptController->Add(*loginattemptEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString LoginAttemptApis::handleupdate(int id, int UserId, EBPDateTime Timestamp) {\n    LoginAttemptEntity* loginattemptEntity = new LoginAttemptEntity(id, UserId, Timestamp);\n    \n    if (loginattemptController->Update(*loginattemptEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString LoginAttemptApis::handledelete(int id) {\n    \n    if (loginattemptController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString LoginAttemptApis::handlegetAll() {\n    return loginattemptController->GetAllJson();\n}\nString LoginAttemptApis::handlegetById(int id) {\n    return loginattemptController->GetById(id).toJson();\n}\nString LoginAttemptApis::handleget(String query) {\n    return loginattemptController->GetJson(query);\n}\n\nString LoginAttemptApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"Timestamp\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"Timestamp\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //LOGINATTEMPTApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\PermissionApis.h",
        "content": "#ifndef PERMISSIONAPIS_h\n#define PERMISSIONAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/PermissionController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass PermissionApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    PermissionController* permissionController;\n    std::string class_path = \"/permission\";\n\npublic:\n    PermissionApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String PermissionName, String PermissionGroup);\n    String handleupdate(int id, String PermissionName, String PermissionGroup);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nPermissionApis::PermissionApis(Context* cntxt, bool add_apis): context(cntxt) {\n    permissionController = new PermissionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"PermissionName\") || !req->getParams()->isQueryParameterSet(\"PermissionGroup\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string PermissionName;\n        req->getParams()->getQueryParameter(\"PermissionName\", PermissionName);\n    std::string PermissionGroup;\n        req->getParams()->getQueryParameter(\"PermissionGroup\", PermissionGroup);\n\n        response(res, handlecreate(String(PermissionName.c_str()), String(PermissionGroup.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"PermissionName\") || !req->getParams()->isQueryParameterSet(\"PermissionGroup\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string PermissionName;\n        req->getParams()->getQueryParameter(\"PermissionName\", PermissionName);\n    std::string PermissionGroup;\n        req->getParams()->getQueryParameter(\"PermissionGroup\", PermissionGroup);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(PermissionName.c_str()), String(PermissionGroup.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::PERMISSION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString PermissionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString PermissionApis::handlecreate(String PermissionName, String PermissionGroup) {\n    PermissionEntity* permissionEntity = new PermissionEntity(PermissionName, PermissionGroup);\n    int id = permissionController->Add(*permissionEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString PermissionApis::handleupdate(int id, String PermissionName, String PermissionGroup) {\n    PermissionEntity* permissionEntity = new PermissionEntity(id, PermissionName, PermissionGroup);\n    \n    if (permissionController->Update(*permissionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString PermissionApis::handledelete(int id) {\n    \n    if (permissionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString PermissionApis::handlegetAll() {\n    return permissionController->GetAllJson();\n}\nString PermissionApis::handlegetById(int id) {\n    return permissionController->GetById(id).toJson();\n}\nString PermissionApis::handleget(String query) {\n    return permissionController->GetJson(query);\n}\n\nString PermissionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"PermissionName\"], parameters[\"PermissionGroup\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"PermissionName\"], parameters[\"PermissionGroup\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //PERMISSIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\RoleApis.h",
        "content": "#ifndef ROLEAPIS_h\n#define ROLEAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/RoleController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass RoleApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    RoleController* roleController;\n    std::string class_path = \"/role\";\n\npublic:\n    RoleApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String RoleName);\n    String handleupdate(int id, String RoleName);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nRoleApis::RoleApis(Context* cntxt, bool add_apis): context(cntxt) {\n    roleController = new RoleController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"RoleName\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string RoleName;\n        req->getParams()->getQueryParameter(\"RoleName\", RoleName);\n\n        response(res, handlecreate(String(RoleName.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"RoleName\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string RoleName;\n        req->getParams()->getQueryParameter(\"RoleName\", RoleName);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(RoleName.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLE_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString RoleApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString RoleApis::handlecreate(String RoleName) {\n    RoleEntity* roleEntity = new RoleEntity(RoleName);\n    int id = roleController->Add(*roleEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString RoleApis::handleupdate(int id, String RoleName) {\n    RoleEntity* roleEntity = new RoleEntity(id, RoleName);\n    \n    if (roleController->Update(*roleEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString RoleApis::handledelete(int id) {\n    \n    if (roleController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString RoleApis::handlegetAll() {\n    return roleController->GetAllJson();\n}\nString RoleApis::handlegetById(int id) {\n    return roleController->GetById(id).toJson();\n}\nString RoleApis::handleget(String query) {\n    return roleController->GetJson(query);\n}\n\nString RoleApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"RoleName\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"RoleName\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //ROLEApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\RolePermissionApis.h",
        "content": "#ifndef ROLEPERMISSIONAPIS_h\n#define ROLEPERMISSIONAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/RolePermissionController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass RolePermissionApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    RolePermissionController* rolepermissionController;\n    std::string class_path = \"/rolepermission\";\n\npublic:\n    RolePermissionApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int RoleId, int PermissionId);\n    String handleupdate(int id, int RoleId, int PermissionId);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nRolePermissionApis::RolePermissionApis(Context* cntxt, bool add_apis): context(cntxt) {\n    rolepermissionController = new RolePermissionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"RoleId\") || !req->getParams()->isQueryParameterSet(\"PermissionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string RoleId;\n        req->getParams()->getQueryParameter(\"RoleId\", RoleId);\n    std::string PermissionId;\n        req->getParams()->getQueryParameter(\"PermissionId\", PermissionId);\n\n        response(res, handlecreate(String(RoleId.c_str()).toInt(), String(PermissionId.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"RoleId\") || !req->getParams()->isQueryParameterSet(\"PermissionId\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string RoleId;\n        req->getParams()->getQueryParameter(\"RoleId\", RoleId);\n    std::string PermissionId;\n        req->getParams()->getQueryParameter(\"PermissionId\", PermissionId);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(RoleId.c_str()).toInt(), String(PermissionId.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::ROLEPERMISSION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString RolePermissionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString RolePermissionApis::handlecreate(int RoleId, int PermissionId) {\n    RolePermissionEntity* rolepermissionEntity = new RolePermissionEntity(RoleId, PermissionId);\n    int id = rolepermissionController->Add(*rolepermissionEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString RolePermissionApis::handleupdate(int id, int RoleId, int PermissionId) {\n    RolePermissionEntity* rolepermissionEntity = new RolePermissionEntity(id, RoleId, PermissionId);\n    \n    if (rolepermissionController->Update(*rolepermissionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString RolePermissionApis::handledelete(int id) {\n    \n    if (rolepermissionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString RolePermissionApis::handlegetAll() {\n    return rolepermissionController->GetAllJson();\n}\nString RolePermissionApis::handlegetById(int id) {\n    return rolepermissionController->GetById(id).toJson();\n}\nString RolePermissionApis::handleget(String query) {\n    return rolepermissionController->GetJson(query);\n}\n\nString RolePermissionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"RoleId\"].toInt(), parameters[\"PermissionId\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"RoleId\"].toInt(), parameters[\"PermissionId\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //ROLEPERMISSIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\SecurityQuestionApis.h",
        "content": "#ifndef SECURITYQUESTIONAPIS_h\n#define SECURITYQUESTIONAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/SecurityQuestionController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass SecurityQuestionApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    SecurityQuestionController* securityquestionController;\n    std::string class_path = \"/securityquestion\";\n\npublic:\n    SecurityQuestionApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, String SecurityQuestionTitleId, String Answer);\n    String handleupdate(int id, int UserId, String SecurityQuestionTitleId, String Answer);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nSecurityQuestionApis::SecurityQuestionApis(Context* cntxt, bool add_apis): context(cntxt) {\n    securityquestionController = new SecurityQuestionController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"SecurityQuestionTitleId\") || !req->getParams()->isQueryParameterSet(\"Answer\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string SecurityQuestionTitleId;\n        req->getParams()->getQueryParameter(\"SecurityQuestionTitleId\", SecurityQuestionTitleId);\n    std::string Answer;\n        req->getParams()->getQueryParameter(\"Answer\", Answer);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(SecurityQuestionTitleId.c_str()), String(Answer.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"SecurityQuestionTitleId\") || !req->getParams()->isQueryParameterSet(\"Answer\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string SecurityQuestionTitleId;\n        req->getParams()->getQueryParameter(\"SecurityQuestionTitleId\", SecurityQuestionTitleId);\n    std::string Answer;\n        req->getParams()->getQueryParameter(\"Answer\", Answer);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(SecurityQuestionTitleId.c_str()), String(Answer.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTION_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString SecurityQuestionApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString SecurityQuestionApis::handlecreate(int UserId, String SecurityQuestionTitleId, String Answer) {\n    SecurityQuestionEntity* securityquestionEntity = new SecurityQuestionEntity(UserId, SecurityQuestionTitleId, Answer);\n    int id = securityquestionController->Add(*securityquestionEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString SecurityQuestionApis::handleupdate(int id, int UserId, String SecurityQuestionTitleId, String Answer) {\n    SecurityQuestionEntity* securityquestionEntity = new SecurityQuestionEntity(id, UserId, SecurityQuestionTitleId, Answer);\n    \n    if (securityquestionController->Update(*securityquestionEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString SecurityQuestionApis::handledelete(int id) {\n    \n    if (securityquestionController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString SecurityQuestionApis::handlegetAll() {\n    return securityquestionController->GetAllJson();\n}\nString SecurityQuestionApis::handlegetById(int id) {\n    return securityquestionController->GetById(id).toJson();\n}\nString SecurityQuestionApis::handleget(String query) {\n    return securityquestionController->GetJson(query);\n}\n\nString SecurityQuestionApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"SecurityQuestionTitleId\"], parameters[\"Answer\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"SecurityQuestionTitleId\"], parameters[\"Answer\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //SECURITYQUESTIONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\SecurityQuestionTitleApis.h",
        "content": "#ifndef SECURITYQUESTIONTITLEAPIS_h\n#define SECURITYQUESTIONTITLEAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/SecurityQuestionTitleController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass SecurityQuestionTitleApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    SecurityQuestionTitleController* securityquestiontitleController;\n    std::string class_path = \"/securityquestiontitle\";\n\npublic:\n    SecurityQuestionTitleApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String QuestionTitle);\n    String handleupdate(int id, String QuestionTitle);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nSecurityQuestionTitleApis::SecurityQuestionTitleApis(Context* cntxt, bool add_apis): context(cntxt) {\n    securityquestiontitleController = new SecurityQuestionTitleController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"QuestionTitle\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string QuestionTitle;\n        req->getParams()->getQueryParameter(\"QuestionTitle\", QuestionTitle);\n\n        response(res, handlecreate(String(QuestionTitle.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"QuestionTitle\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string QuestionTitle;\n        req->getParams()->getQueryParameter(\"QuestionTitle\", QuestionTitle);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(QuestionTitle.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::SECURITYQUESTIONTITLE_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString SecurityQuestionTitleApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString SecurityQuestionTitleApis::handlecreate(String QuestionTitle) {\n    SecurityQuestionTitleEntity* securityquestiontitleEntity = new SecurityQuestionTitleEntity(QuestionTitle);\n    int id = securityquestiontitleController->Add(*securityquestiontitleEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString SecurityQuestionTitleApis::handleupdate(int id, String QuestionTitle) {\n    SecurityQuestionTitleEntity* securityquestiontitleEntity = new SecurityQuestionTitleEntity(id, QuestionTitle);\n    \n    if (securityquestiontitleController->Update(*securityquestiontitleEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString SecurityQuestionTitleApis::handledelete(int id) {\n    \n    if (securityquestiontitleController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString SecurityQuestionTitleApis::handlegetAll() {\n    return securityquestiontitleController->GetAllJson();\n}\nString SecurityQuestionTitleApis::handlegetById(int id) {\n    return securityquestiontitleController->GetById(id).toJson();\n}\nString SecurityQuestionTitleApis::handleget(String query) {\n    return securityquestiontitleController->GetJson(query);\n}\n\nString SecurityQuestionTitleApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"QuestionTitle\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"QuestionTitle\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //SECURITYQUESTIONTITLEApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\TwoFactorAuthApis.h",
        "content": "#ifndef TWOFACTORAUTHAPIS_h\n#define TWOFACTORAUTHAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/TwoFactorAuthController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass TwoFactorAuthApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    TwoFactorAuthController* twofactorauthController;\n    std::string class_path = \"/twofactorauth\";\n\npublic:\n    TwoFactorAuthApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, String OtpCode, EBPDateTime ExpiryTime);\n    String handleupdate(int id, int UserId, String OtpCode, EBPDateTime ExpiryTime);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nTwoFactorAuthApis::TwoFactorAuthApis(Context* cntxt, bool add_apis): context(cntxt) {\n    twofactorauthController = new TwoFactorAuthController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"OtpCode\") || !req->getParams()->isQueryParameterSet(\"ExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string OtpCode;\n        req->getParams()->getQueryParameter(\"OtpCode\", OtpCode);\n    std::string ExpiryTime;\n        req->getParams()->getQueryParameter(\"ExpiryTime\", ExpiryTime);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(OtpCode.c_str()), String(ExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"OtpCode\") || !req->getParams()->isQueryParameterSet(\"ExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string OtpCode;\n        req->getParams()->getQueryParameter(\"OtpCode\", OtpCode);\n    std::string ExpiryTime;\n        req->getParams()->getQueryParameter(\"ExpiryTime\", ExpiryTime);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(OtpCode.c_str()), String(ExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::TWOFACTORAUTH_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString TwoFactorAuthApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString TwoFactorAuthApis::handlecreate(int UserId, String OtpCode, EBPDateTime ExpiryTime) {\n    TwoFactorAuthEntity* twofactorauthEntity = new TwoFactorAuthEntity(UserId, OtpCode, ExpiryTime);\n    int id = twofactorauthController->Add(*twofactorauthEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString TwoFactorAuthApis::handleupdate(int id, int UserId, String OtpCode, EBPDateTime ExpiryTime) {\n    TwoFactorAuthEntity* twofactorauthEntity = new TwoFactorAuthEntity(id, UserId, OtpCode, ExpiryTime);\n    \n    if (twofactorauthController->Update(*twofactorauthEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString TwoFactorAuthApis::handledelete(int id) {\n    \n    if (twofactorauthController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString TwoFactorAuthApis::handlegetAll() {\n    return twofactorauthController->GetAllJson();\n}\nString TwoFactorAuthApis::handlegetById(int id) {\n    return twofactorauthController->GetById(id).toJson();\n}\nString TwoFactorAuthApis::handleget(String query) {\n    return twofactorauthController->GetJson(query);\n}\n\nString TwoFactorAuthApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"OtpCode\"], parameters[\"ExpiryTime\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"OtpCode\"], parameters[\"ExpiryTime\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //TWOFACTORAUTHApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\UserApis.h",
        "content": "#ifndef USERAPIS_h\n#define USERAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/UserController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass UserApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    UserController* userController;\n    std::string class_path = \"/user\";\n\npublic:\n    UserApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Username, String Password, String Email, String PhoneNumber, int RoleId, bool TwoFactorAuth, String ApiKey, String Token, EBPDateTime TokenExpiryTime);\n    String handleupdate(int id, String Username, String Password, String Email, String PhoneNumber, int RoleId, bool TwoFactorAuth, String ApiKey, String Token, EBPDateTime TokenExpiryTime);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nUserApis::UserApis(Context* cntxt, bool add_apis): context(cntxt) {\n    userController = new UserController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Username\") || !req->getParams()->isQueryParameterSet(\"Password\") || !req->getParams()->isQueryParameterSet(\"Email\") || !req->getParams()->isQueryParameterSet(\"PhoneNumber\") || !req->getParams()->isQueryParameterSet(\"RoleId\") || !req->getParams()->isQueryParameterSet(\"TwoFactorAuth\") || !req->getParams()->isQueryParameterSet(\"ApiKey\") || !req->getParams()->isQueryParameterSet(\"Token\") || !req->getParams()->isQueryParameterSet(\"TokenExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string Username;\n        req->getParams()->getQueryParameter(\"Username\", Username);\n    std::string Password;\n        req->getParams()->getQueryParameter(\"Password\", Password);\n    std::string Email;\n        req->getParams()->getQueryParameter(\"Email\", Email);\n    std::string PhoneNumber;\n        req->getParams()->getQueryParameter(\"PhoneNumber\", PhoneNumber);\n    std::string RoleId;\n        req->getParams()->getQueryParameter(\"RoleId\", RoleId);\n    std::string TwoFactorAuth;\n        req->getParams()->getQueryParameter(\"TwoFactorAuth\", TwoFactorAuth);\n    std::string ApiKey;\n        req->getParams()->getQueryParameter(\"ApiKey\", ApiKey);\n    std::string Token;\n        req->getParams()->getQueryParameter(\"Token\", Token);\n    std::string TokenExpiryTime;\n        req->getParams()->getQueryParameter(\"TokenExpiryTime\", TokenExpiryTime);\n\n        response(res, handlecreate(String(Username.c_str()), String(Password.c_str()), String(Email.c_str()), String(PhoneNumber.c_str()), String(RoleId.c_str()).toInt(), String(TwoFactorAuth.c_str()).toInt(), String(ApiKey.c_str()), String(Token.c_str()), String(TokenExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Username\") || !req->getParams()->isQueryParameterSet(\"Password\") || !req->getParams()->isQueryParameterSet(\"Email\") || !req->getParams()->isQueryParameterSet(\"PhoneNumber\") || !req->getParams()->isQueryParameterSet(\"RoleId\") || !req->getParams()->isQueryParameterSet(\"TwoFactorAuth\") || !req->getParams()->isQueryParameterSet(\"ApiKey\") || !req->getParams()->isQueryParameterSet(\"Token\") || !req->getParams()->isQueryParameterSet(\"TokenExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string Username;\n        req->getParams()->getQueryParameter(\"Username\", Username);\n    std::string Password;\n        req->getParams()->getQueryParameter(\"Password\", Password);\n    std::string Email;\n        req->getParams()->getQueryParameter(\"Email\", Email);\n    std::string PhoneNumber;\n        req->getParams()->getQueryParameter(\"PhoneNumber\", PhoneNumber);\n    std::string RoleId;\n        req->getParams()->getQueryParameter(\"RoleId\", RoleId);\n    std::string TwoFactorAuth;\n        req->getParams()->getQueryParameter(\"TwoFactorAuth\", TwoFactorAuth);\n    std::string ApiKey;\n        req->getParams()->getQueryParameter(\"ApiKey\", ApiKey);\n    std::string Token;\n        req->getParams()->getQueryParameter(\"Token\", Token);\n    std::string TokenExpiryTime;\n        req->getParams()->getQueryParameter(\"TokenExpiryTime\", TokenExpiryTime);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(Username.c_str()), String(Password.c_str()), String(Email.c_str()), String(PhoneNumber.c_str()), String(RoleId.c_str()).toInt(), String(TwoFactorAuth.c_str()).toInt(), String(ApiKey.c_str()), String(Token.c_str()), String(TokenExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USER_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString UserApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString UserApis::handlecreate(String Username, String Password, String Email, String PhoneNumber, int RoleId, bool TwoFactorAuth, String ApiKey, String Token, EBPDateTime TokenExpiryTime) {\n    UserEntity* userEntity = new UserEntity(Username, Password, Email, PhoneNumber, RoleId, TwoFactorAuth, ApiKey, Token, TokenExpiryTime);\n    int id = userController->Add(*userEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString UserApis::handleupdate(int id, String Username, String Password, String Email, String PhoneNumber, int RoleId, bool TwoFactorAuth, String ApiKey, String Token, EBPDateTime TokenExpiryTime) {\n    UserEntity* userEntity = new UserEntity(id, Username, Password, Email, PhoneNumber, RoleId, TwoFactorAuth, ApiKey, Token, TokenExpiryTime);\n    \n    if (userController->Update(*userEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString UserApis::handledelete(int id) {\n    \n    if (userController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString UserApis::handlegetAll() {\n    return userController->GetAllJson();\n}\nString UserApis::handlegetById(int id) {\n    return userController->GetById(id).toJson();\n}\nString UserApis::handleget(String query) {\n    return userController->GetJson(query);\n}\n\nString UserApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Username\"], parameters[\"Password\"], parameters[\"Email\"], parameters[\"PhoneNumber\"], parameters[\"RoleId\"].toInt(), parameters[\"TwoFactorAuth\"].toInt(), parameters[\"ApiKey\"], parameters[\"Token\"], parameters[\"TokenExpiryTime\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Username\"], parameters[\"Password\"], parameters[\"Email\"], parameters[\"PhoneNumber\"], parameters[\"RoleId\"].toInt(), parameters[\"TwoFactorAuth\"].toInt(), parameters[\"ApiKey\"], parameters[\"Token\"], parameters[\"TokenExpiryTime\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //USERApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Authorization\\UserResetPassApis.h",
        "content": "#ifndef USERRESETPASSAPIS_h\n#define USERRESETPASSAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Security/UserResetPassController.h\"\n#include \"../../../Security/AuthorizationPermissions.h\"\n\nclass UserResetPassApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    UserResetPassController* userresetpassController;\n    std::string class_path = \"/userresetpass\";\n\npublic:\n    UserResetPassApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int UserId, String ResetToken, EBPDateTime ExpiryTime);\n    String handleupdate(int id, int UserId, String ResetToken, EBPDateTime ExpiryTime);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nUserResetPassApis::UserResetPassApis(Context* cntxt, bool add_apis): context(cntxt) {\n    userresetpassController = new UserResetPassController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_CREATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"ResetToken\") || !req->getParams()->isQueryParameterSet(\"ExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string ResetToken;\n        req->getParams()->getQueryParameter(\"ResetToken\", ResetToken);\n    std::string ExpiryTime;\n        req->getParams()->getQueryParameter(\"ExpiryTime\", ExpiryTime);\n\n        response(res, handlecreate(String(UserId.c_str()).toInt(), String(ResetToken.c_str()), String(ExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_UPDATE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"UserId\") || !req->getParams()->isQueryParameterSet(\"ResetToken\") || !req->getParams()->isQueryParameterSet(\"ExpiryTime\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string UserId;\n        req->getParams()->getQueryParameter(\"UserId\", UserId);\n    std::string ResetToken;\n        req->getParams()->getQueryParameter(\"ResetToken\", ResetToken);\n    std::string ExpiryTime;\n        req->getParams()->getQueryParameter(\"ExpiryTime\", ExpiryTime);\n        \n        response(res, handleupdate(String(id.c_str()).toInt(), String(UserId.c_str()).toInt(), String(ResetToken.c_str()), String(ExpiryTime.c_str())));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_DELETE)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handledelete(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_GET)){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        \n        response(res, handlegetById(String(id.c_str()).toInt()));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, AuthorizationPermissions::USERRESETPASS_GET)){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n        \n        response(res, handleget(String(query.c_str())));\n    }));\n}\n\nString UserResetPassApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString UserResetPassApis::handlecreate(int UserId, String ResetToken, EBPDateTime ExpiryTime) {\n    UserResetPassEntity* userresetpassEntity = new UserResetPassEntity(UserId, ResetToken, ExpiryTime);\n    int id = userresetpassController->Add(*userresetpassEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString UserResetPassApis::handleupdate(int id, int UserId, String ResetToken, EBPDateTime ExpiryTime) {\n    UserResetPassEntity* userresetpassEntity = new UserResetPassEntity(id, UserId, ResetToken, ExpiryTime);\n    \n    if (userresetpassController->Update(*userresetpassEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString UserResetPassApis::handledelete(int id) {\n    \n    if (userresetpassController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString UserResetPassApis::handlegetAll() {\n    return userresetpassController->GetAllJson();\n}\nString UserResetPassApis::handlegetById(int id) {\n    return userresetpassController->GetById(id).toJson();\n}\nString UserResetPassApis::handleget(String query) {\n    return userresetpassController->GetJson(query);\n}\n\nString UserResetPassApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"UserId\"].toInt(), parameters[\"ResetToken\"], parameters[\"ExpiryTime\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"UserId\"].toInt(), parameters[\"ResetToken\"], parameters[\"ExpiryTime\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //USERRESETPASSApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\AddModulesApis.h",
        "content": "\n#ifndef ADDMODULESAPIS_H\n#define ADDMODULESAPIS_H\n\n#include \"ModulePermissions.h\"\n#include \"ButtonApis.h\"\n#include \"ModuleApis.h\"\n#include \"RelayApis.h\"\n#include \"LCDApis.h\"\n#include \"DHTApis.h\"\n#include \"PhotoresistorApis.h\"\n#include \"RGBApis.h\"\n#include \"SoilMoistureApis.h\"\n\n\nvoid createModulesApis(Context* context)\n{\n    std::vector<ApiInterface*> apis = std::vector<ApiInterface*>();\n\n    \n    ButtonApis* buttonApis = new ButtonApis(context, true);\n    apis.push_back(buttonApis);\n    \n    ModuleApis* moduleApis = new ModuleApis(context, true);\n    apis.push_back(moduleApis);\n    \n    RelayApis* relayApis = new RelayApis(context, true);\n    apis.push_back(relayApis);\n    \n    LCDApis* lcdApis = new LCDApis(context, true);\n    apis.push_back(lcdApis);\n    \n    DHTApis* dhtApis = new DHTApis(context, true);\n    apis.push_back(dhtApis);\n    \n    PhotoresistorApis* photoresistorApis = new PhotoresistorApis(context, true);\n    apis.push_back(photoresistorApis);\n    \n    RGBApis* rgbApis = new RGBApis(context, true);\n    apis.push_back(rgbApis);\n    \n    SoilMoistureApis* soilmoistureApis = new SoilMoistureApis(context, true);\n    apis.push_back(soilmoistureApis);\n    \n\n    context->getNetwork()->addApis(apis);\n}\n\n#endif //APIS_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\ButtonApis.h",
        "content": "#ifndef BUTTONAPIS_h\n#define BUTTONAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/ButtonController.h\"\n#include \"ModulePermissions.h\"\n\nclass ButtonApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    ButtonController* buttonController;\n    std::string class_path = \"/button\";\n\npublic:\n    ButtonApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int ModuleId, String ButtonType, bool ActiveHigh, bool PullupActive, int DebounceDelay);\n    String handleupdate(int id, int ModuleId, String ButtonType, bool ActiveHigh, bool PullupActive, int DebounceDelay);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nButtonApis::ButtonApis(Context* cntxt, bool add_apis): context(cntxt) {\n    buttonController = new ButtonController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"ButtonType\") || !req->getParams()->isQueryParameterSet(\"ActiveHigh\") || !req->getParams()->isQueryParameterSet(\"PullupActive\") || !req->getParams()->isQueryParameterSet(\"DebounceDelay\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    String ButtonType = getQueryParameterString(req, \"ButtonType\");\n    bool ActiveHigh = boolean(getQueryParameterString(req, \"ActiveHigh\"));\n    bool PullupActive = boolean(getQueryParameterString(req, \"PullupActive\"));\n    int DebounceDelay = getQueryParameterint(req, \"DebounceDelay\");\n\n        response(res, handlecreate(ModuleId, ButtonType, ActiveHigh, PullupActive, DebounceDelay));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"ButtonType\") || !req->getParams()->isQueryParameterSet(\"ActiveHigh\") || !req->getParams()->isQueryParameterSet(\"PullupActive\") || !req->getParams()->isQueryParameterSet(\"DebounceDelay\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    String ButtonType = getQueryParameterString(req, \"ButtonType\");\n    bool ActiveHigh = boolean(getQueryParameterString(req, \"ActiveHigh\"));\n    bool PullupActive = boolean(getQueryParameterString(req, \"PullupActive\"));\n    int DebounceDelay = getQueryParameterint(req, \"DebounceDelay\");\n        \n        response(res, handleupdate(id, ModuleId, ButtonType, ActiveHigh, PullupActive, DebounceDelay));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::BUTTON_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString ButtonApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString ButtonApis::handlecreate(int ModuleId, String ButtonType, bool ActiveHigh, bool PullupActive, int DebounceDelay) {\n    ButtonEntity* buttonEntity = new ButtonEntity(ModuleId, ButtonType, ActiveHigh, PullupActive, DebounceDelay);\n    int id = buttonController->Add(*buttonEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString ButtonApis::handleupdate(int id, int ModuleId, String ButtonType, bool ActiveHigh, bool PullupActive, int DebounceDelay) {\n    ButtonEntity* buttonEntity = new ButtonEntity(id, ModuleId, ButtonType, ActiveHigh, PullupActive, DebounceDelay);\n    \n    if (buttonController->Update(*buttonEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString ButtonApis::handledelete(int id) {\n    \n    if (buttonController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString ButtonApis::handlegetAll() {\n    return buttonController->GetAllJson();\n}\nString ButtonApis::handlegetById(int id) {\n    return buttonController->GetById(id).toJson();\n}\nString ButtonApis::handleget(String query) {\n    return buttonController->GetJson(query);\n}\n\nString ButtonApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"ModuleId\"].toInt(), parameters[\"ButtonType\"], parameters[\"ActiveHigh\"].toInt(), parameters[\"PullupActive\"].toInt(), parameters[\"DebounceDelay\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"ModuleId\"].toInt(), parameters[\"ButtonType\"], parameters[\"ActiveHigh\"].toInt(), parameters[\"PullupActive\"].toInt(), parameters[\"DebounceDelay\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //BUTTONApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\DHTApis.h",
        "content": "#ifndef DHTAPIS_h\n#define DHTAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/DHTController.h\"\n#include \"ModulePermissions.h\"\n\nclass DHTApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    DHTController* dhtController;\n    std::string class_path = \"/dht\";\n\npublic:\n    DHTApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Type, int DryTreshold, int WetTreshold, int CoolTreshold, int HotTreshold);\n    String handleupdate(int id, String Type, int DryTreshold, int WetTreshold, int CoolTreshold, int HotTreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nDHTApis::DHTApis(Context* cntxt, bool add_apis): context(cntxt) {\n    dhtController = new DHTController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Type\") || !req->getParams()->isQueryParameterSet(\"DryTreshold\") || !req->getParams()->isQueryParameterSet(\"WetTreshold\") || !req->getParams()->isQueryParameterSet(\"CoolTreshold\") || !req->getParams()->isQueryParameterSet(\"HotTreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Type = getQueryParameterString(req, \"Type\");\n    int DryTreshold = getQueryParameterint(req, \"DryTreshold\");\n    int WetTreshold = getQueryParameterint(req, \"WetTreshold\");\n    int CoolTreshold = getQueryParameterint(req, \"CoolTreshold\");\n    int HotTreshold = getQueryParameterint(req, \"HotTreshold\");\n\n        response(res, handlecreate(Type, DryTreshold, WetTreshold, CoolTreshold, HotTreshold));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Type\") || !req->getParams()->isQueryParameterSet(\"DryTreshold\") || !req->getParams()->isQueryParameterSet(\"WetTreshold\") || !req->getParams()->isQueryParameterSet(\"CoolTreshold\") || !req->getParams()->isQueryParameterSet(\"HotTreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Type = getQueryParameterString(req, \"Type\");\n    int DryTreshold = getQueryParameterint(req, \"DryTreshold\");\n    int WetTreshold = getQueryParameterint(req, \"WetTreshold\");\n    int CoolTreshold = getQueryParameterint(req, \"CoolTreshold\");\n    int HotTreshold = getQueryParameterint(req, \"HotTreshold\");\n        \n        response(res, handleupdate(id, Type, DryTreshold, WetTreshold, CoolTreshold, HotTreshold));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::DHT_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString DHTApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString DHTApis::handlecreate(String Type, int DryTreshold, int WetTreshold, int CoolTreshold, int HotTreshold) {\n    DHTEntity* dhtEntity = new DHTEntity(Type, DryTreshold, WetTreshold, CoolTreshold, HotTreshold);\n    int id = dhtController->Add(*dhtEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString DHTApis::handleupdate(int id, String Type, int DryTreshold, int WetTreshold, int CoolTreshold, int HotTreshold) {\n    DHTEntity* dhtEntity = new DHTEntity(id, Type, DryTreshold, WetTreshold, CoolTreshold, HotTreshold);\n    \n    if (dhtController->Update(*dhtEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString DHTApis::handledelete(int id) {\n    \n    if (dhtController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString DHTApis::handlegetAll() {\n    return dhtController->GetAllJson();\n}\nString DHTApis::handlegetById(int id) {\n    return dhtController->GetById(id).toJson();\n}\nString DHTApis::handleget(String query) {\n    return dhtController->GetJson(query);\n}\n\nString DHTApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Type\"], parameters[\"DryTreshold\"].toInt(), parameters[\"WetTreshold\"].toInt(), parameters[\"CoolTreshold\"].toInt(), parameters[\"HotTreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Type\"], parameters[\"DryTreshold\"].toInt(), parameters[\"WetTreshold\"].toInt(), parameters[\"CoolTreshold\"].toInt(), parameters[\"HotTreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //DHTApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\LCDApis.h",
        "content": "#ifndef LCDAPIS_h\n#define LCDAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/LCDController.h\"\n#include \"ModulePermissions.h\"\n\nclass LCDApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    LCDController* lcdController;\n    std::string class_path = \"/lcd\";\n\npublic:\n    LCDApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int ModuleId, int Address, int Rows, int Cols, String Type);\n    String handleupdate(int id, int ModuleId, int Address, int Rows, int Cols, String Type);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nLCDApis::LCDApis(Context* cntxt, bool add_apis): context(cntxt) {\n    lcdController = new LCDController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"Address\") || !req->getParams()->isQueryParameterSet(\"Rows\") || !req->getParams()->isQueryParameterSet(\"Cols\") || !req->getParams()->isQueryParameterSet(\"Type\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    int Address = getQueryParameterint(req, \"Address\");\n    int Rows = getQueryParameterint(req, \"Rows\");\n    int Cols = getQueryParameterint(req, \"Cols\");\n    String Type = getQueryParameterString(req, \"Type\");\n\n        response(res, handlecreate(ModuleId, Address, Rows, Cols, Type));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"Address\") || !req->getParams()->isQueryParameterSet(\"Rows\") || !req->getParams()->isQueryParameterSet(\"Cols\") || !req->getParams()->isQueryParameterSet(\"Type\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    int Address = getQueryParameterint(req, \"Address\");\n    int Rows = getQueryParameterint(req, \"Rows\");\n    int Cols = getQueryParameterint(req, \"Cols\");\n    String Type = getQueryParameterString(req, \"Type\");\n        \n        response(res, handleupdate(id, ModuleId, Address, Rows, Cols, Type));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::LCD_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString LCDApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString LCDApis::handlecreate(int ModuleId, int Address, int Rows, int Cols, String Type) {\n    LCDEntity* lcdEntity = new LCDEntity(ModuleId, Address, Rows, Cols, Type);\n    int id = lcdController->Add(*lcdEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString LCDApis::handleupdate(int id, int ModuleId, int Address, int Rows, int Cols, String Type) {\n    LCDEntity* lcdEntity = new LCDEntity(id, ModuleId, Address, Rows, Cols, Type);\n    \n    if (lcdController->Update(*lcdEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString LCDApis::handledelete(int id) {\n    \n    if (lcdController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString LCDApis::handlegetAll() {\n    return lcdController->GetAllJson();\n}\nString LCDApis::handlegetById(int id) {\n    return lcdController->GetById(id).toJson();\n}\nString LCDApis::handleget(String query) {\n    return lcdController->GetJson(query);\n}\n\nString LCDApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"ModuleId\"].toInt(), parameters[\"Address\"].toInt(), parameters[\"Rows\"].toInt(), parameters[\"Cols\"].toInt(), parameters[\"Type\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"ModuleId\"].toInt(), parameters[\"Address\"].toInt(), parameters[\"Rows\"].toInt(), parameters[\"Cols\"].toInt(), parameters[\"Type\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //LCDApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\ModuleApis.h",
        "content": "#ifndef MODULEAPIS_h\n#define MODULEAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/ModulesController.h\"\n#include \"ModulePermissions.h\"\n\nclass ModuleApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    ModulesController* moduleController;\n    std::string class_path = \"/module\";\n\npublic:\n    ModuleApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Name, String ModuleType, String ConnectionType, int NodeId, int PinNumber);\n    String handleupdate(int id, String Name, String ModuleType, String ConnectionType, int NodeId, int PinNumber);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nModuleApis::ModuleApis(Context* cntxt, bool add_apis): context(cntxt) {\n    moduleController = new ModulesController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"ModuleType\") || !req->getParams()->isQueryParameterSet(\"ConnectionType\") || !req->getParams()->isQueryParameterSet(\"NodeId\") || !req->getParams()->isQueryParameterSet(\"PinNumber\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Name = getQueryParameterString(req, \"Name\");\n    String ModuleType = getQueryParameterString(req, \"ModuleType\");\n    String ConnectionType = getQueryParameterString(req, \"ConnectionType\");\n    int NodeId = getQueryParameterint(req, \"NodeId\");\n    int PinNumber = getQueryParameterint(req, \"PinNumber\");\n\n        response(res, handlecreate(Name, ModuleType, ConnectionType, NodeId, PinNumber));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Name\") || !req->getParams()->isQueryParameterSet(\"ModuleType\") || !req->getParams()->isQueryParameterSet(\"ConnectionType\") || !req->getParams()->isQueryParameterSet(\"NodeId\") || !req->getParams()->isQueryParameterSet(\"PinNumber\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Name = getQueryParameterString(req, \"Name\");\n    String ModuleType = getQueryParameterString(req, \"ModuleType\");\n    String ConnectionType = getQueryParameterString(req, \"ConnectionType\");\n    int NodeId = getQueryParameterint(req, \"NodeId\");\n    int PinNumber = getQueryParameterint(req, \"PinNumber\");\n        \n        response(res, handleupdate(id, Name, ModuleType, ConnectionType, NodeId, PinNumber));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::MODULE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString ModuleApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString ModuleApis::handlecreate(String Name, String ModuleType, String ConnectionType, int NodeId, int PinNumber) {\n    ModuleEntity* moduleEntity = new ModuleEntity(Name, ModuleType, ConnectionType, NodeId, PinNumber);\n    int id = moduleController->Add(*moduleEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString ModuleApis::handleupdate(int id, String Name, String ModuleType, String ConnectionType, int NodeId, int PinNumber) {\n    ModuleEntity* moduleEntity = new ModuleEntity(id, Name, ModuleType, ConnectionType, NodeId, PinNumber);\n    \n    if (moduleController->Update(*moduleEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString ModuleApis::handledelete(int id) {\n    \n    if (moduleController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString ModuleApis::handlegetAll() {\n    return moduleController->GetAllJson();\n}\nString ModuleApis::handlegetById(int id) {\n    return moduleController->GetById(id).toJson();\n}\nString ModuleApis::handleget(String query) {\n    return moduleController->GetJson(query);\n}\n\nString ModuleApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Name\"], parameters[\"ModuleType\"], parameters[\"ConnectionType\"], parameters[\"NodeId\"].toInt(), parameters[\"PinNumber\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Name\"], parameters[\"ModuleType\"], parameters[\"ConnectionType\"], parameters[\"NodeId\"].toInt(), parameters[\"PinNumber\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //MODULEApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\ModulePermissions.h",
        "content": "#ifndef MODULEPERMISSIONS_H\n#define MODULEPERMISSIONS_H\n\n#include \"../../../Context.h\"\n\nclass ModulePermissions\n{\npublic:\n    static const String BUTTON_CREATE;\n    static const String BUTTON_UPDATE;\n    static const String BUTTON_DELETE;\n    static const String BUTTON_GET;\n    static const String MODULE_CREATE;\n    static const String MODULE_UPDATE;\n    static const String MODULE_DELETE;\n    static const String MODULE_GET;\n    static const String RELAY_CREATE;\n    static const String RELAY_UPDATE;\n    static const String RELAY_DELETE;\n    static const String RELAY_GET;\n    static const String LCD_CREATE;\n    static const String LCD_UPDATE;\n    static const String LCD_DELETE;\n    static const String LCD_GET;\n    static const String DHT_CREATE;\n    static const String DHT_UPDATE;\n    static const String DHT_DELETE;\n    static const String DHT_GET;\n    static const String PHOTORESISTOR_CREATE;\n    static const String PHOTORESISTOR_UPDATE;\n    static const String PHOTORESISTOR_DELETE;\n    static const String PHOTORESISTOR_GET;\n    static const String RGB_CREATE;\n    static const String RGB_UPDATE;\n    static const String RGB_DELETE;\n    static const String RGB_GET;\n    static const String SOILMOISTURE_CREATE;\n    static const String SOILMOISTURE_UPDATE;\n    static const String SOILMOISTURE_DELETE;\n    static const String SOILMOISTURE_GET;\n\n\n    static void addPermissions(Context* context);\n};\n\nvoid ModulePermissions::addPermissions(Context* context)\n{\n    context->getSecurity()->addPermissionForAdmin(BUTTON_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(BUTTON_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(BUTTON_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(BUTTON_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(MODULE_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(MODULE_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(MODULE_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(MODULE_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RELAY_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RELAY_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RELAY_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RELAY_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LCD_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LCD_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LCD_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LCD_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(DHT_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(DHT_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(DHT_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(DHT_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PHOTORESISTOR_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PHOTORESISTOR_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PHOTORESISTOR_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(PHOTORESISTOR_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RGB_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RGB_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RGB_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(RGB_GET, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURE_CREATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURE_UPDATE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURE_DELETE, \"ModuleApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SOILMOISTURE_GET, \"ModuleApis Permissions\");\n\n}\n\nconst String ModulePermissions::BUTTON_CREATE = \"button_create\";\nconst String ModulePermissions::BUTTON_UPDATE = \"button_update\";\nconst String ModulePermissions::BUTTON_DELETE = \"button_delete\";\nconst String ModulePermissions::BUTTON_GET = \"button_get\";\nconst String ModulePermissions::MODULE_CREATE = \"module_create\";\nconst String ModulePermissions::MODULE_UPDATE = \"module_update\";\nconst String ModulePermissions::MODULE_DELETE = \"module_delete\";\nconst String ModulePermissions::MODULE_GET = \"module_get\";\nconst String ModulePermissions::RELAY_CREATE = \"relay_create\";\nconst String ModulePermissions::RELAY_UPDATE = \"relay_update\";\nconst String ModulePermissions::RELAY_DELETE = \"relay_delete\";\nconst String ModulePermissions::RELAY_GET = \"relay_get\";\nconst String ModulePermissions::LCD_CREATE = \"lcd_create\";\nconst String ModulePermissions::LCD_UPDATE = \"lcd_update\";\nconst String ModulePermissions::LCD_DELETE = \"lcd_delete\";\nconst String ModulePermissions::LCD_GET = \"lcd_get\";\nconst String ModulePermissions::DHT_CREATE = \"dht_create\";\nconst String ModulePermissions::DHT_UPDATE = \"dht_update\";\nconst String ModulePermissions::DHT_DELETE = \"dht_delete\";\nconst String ModulePermissions::DHT_GET = \"dht_get\";\nconst String ModulePermissions::PHOTORESISTOR_CREATE = \"photoresistor_create\";\nconst String ModulePermissions::PHOTORESISTOR_UPDATE = \"photoresistor_update\";\nconst String ModulePermissions::PHOTORESISTOR_DELETE = \"photoresistor_delete\";\nconst String ModulePermissions::PHOTORESISTOR_GET = \"photoresistor_get\";\nconst String ModulePermissions::RGB_CREATE = \"rgb_create\";\nconst String ModulePermissions::RGB_UPDATE = \"rgb_update\";\nconst String ModulePermissions::RGB_DELETE = \"rgb_delete\";\nconst String ModulePermissions::RGB_GET = \"rgb_get\";\nconst String ModulePermissions::SOILMOISTURE_CREATE = \"soilmoisture_create\";\nconst String ModulePermissions::SOILMOISTURE_UPDATE = \"soilmoisture_update\";\nconst String ModulePermissions::SOILMOISTURE_DELETE = \"soilmoisture_delete\";\nconst String ModulePermissions::SOILMOISTURE_GET = \"soilmoisture_get\";\n\n\n#endif // PERMISSIONS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\PhotoresistorApis.h",
        "content": "#ifndef PHOTORESISTORAPIS_h\n#define PHOTORESISTORAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/PhotoresistorController.h\"\n#include \"ModulePermissions.h\"\n\nclass PhotoresistorApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    PhotoresistorController* photoresistorController;\n    std::string class_path = \"/photoresistor\";\n\npublic:\n    PhotoresistorApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int LowTreshold, int HighTreshold);\n    String handleupdate(int id, int LowTreshold, int HighTreshold);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nPhotoresistorApis::PhotoresistorApis(Context* cntxt, bool add_apis): context(cntxt) {\n    photoresistorController = new PhotoresistorController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"LowTreshold\") || !req->getParams()->isQueryParameterSet(\"HighTreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int LowTreshold = getQueryParameterint(req, \"LowTreshold\");\n    int HighTreshold = getQueryParameterint(req, \"HighTreshold\");\n\n        response(res, handlecreate(LowTreshold, HighTreshold));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"LowTreshold\") || !req->getParams()->isQueryParameterSet(\"HighTreshold\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int LowTreshold = getQueryParameterint(req, \"LowTreshold\");\n    int HighTreshold = getQueryParameterint(req, \"HighTreshold\");\n        \n        response(res, handleupdate(id, LowTreshold, HighTreshold));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::PHOTORESISTOR_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString PhotoresistorApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString PhotoresistorApis::handlecreate(int LowTreshold, int HighTreshold) {\n    PhotoresistorEntity* photoresistorEntity = new PhotoresistorEntity(LowTreshold, HighTreshold);\n    int id = photoresistorController->Add(*photoresistorEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString PhotoresistorApis::handleupdate(int id, int LowTreshold, int HighTreshold) {\n    PhotoresistorEntity* photoresistorEntity = new PhotoresistorEntity(id, LowTreshold, HighTreshold);\n    \n    if (photoresistorController->Update(*photoresistorEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString PhotoresistorApis::handledelete(int id) {\n    \n    if (photoresistorController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString PhotoresistorApis::handlegetAll() {\n    return photoresistorController->GetAllJson();\n}\nString PhotoresistorApis::handlegetById(int id) {\n    return photoresistorController->GetById(id).toJson();\n}\nString PhotoresistorApis::handleget(String query) {\n    return photoresistorController->GetJson(query);\n}\n\nString PhotoresistorApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"LowTreshold\"].toInt(), parameters[\"HighTreshold\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"LowTreshold\"].toInt(), parameters[\"HighTreshold\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //PHOTORESISTORApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\RelayApis.h",
        "content": "#ifndef RELAYAPIS_h\n#define RELAYAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/RelayController.h\"\n#include \"ModulePermissions.h\"\n\nclass RelayApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    RelayController* relayController;\n    std::string class_path = \"/relay\";\n\npublic:\n    RelayApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int ModuleId, bool NormallyOpen);\n    String handleupdate(int id, int ModuleId, bool NormallyOpen);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nRelayApis::RelayApis(Context* cntxt, bool add_apis): context(cntxt) {\n    relayController = new RelayController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"NormallyOpen\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    bool NormallyOpen = boolean(getQueryParameterString(req, \"NormallyOpen\"));\n\n        response(res, handlecreate(ModuleId, NormallyOpen));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"ModuleId\") || !req->getParams()->isQueryParameterSet(\"NormallyOpen\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int ModuleId = getQueryParameterint(req, \"ModuleId\");\n    bool NormallyOpen = boolean(getQueryParameterString(req, \"NormallyOpen\"));\n        \n        response(res, handleupdate(id, ModuleId, NormallyOpen));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RELAY_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString RelayApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString RelayApis::handlecreate(int ModuleId, bool NormallyOpen) {\n    RelayEntity* relayEntity = new RelayEntity(ModuleId, NormallyOpen);\n    int id = relayController->Add(*relayEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString RelayApis::handleupdate(int id, int ModuleId, bool NormallyOpen) {\n    RelayEntity* relayEntity = new RelayEntity(id, ModuleId, NormallyOpen);\n    \n    if (relayController->Update(*relayEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString RelayApis::handledelete(int id) {\n    \n    if (relayController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString RelayApis::handlegetAll() {\n    return relayController->GetAllJson();\n}\nString RelayApis::handlegetById(int id) {\n    return relayController->GetById(id).toJson();\n}\nString RelayApis::handleget(String query) {\n    return relayController->GetJson(query);\n}\n\nString RelayApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"ModuleId\"].toInt(), parameters[\"NormallyOpen\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"ModuleId\"].toInt(), parameters[\"NormallyOpen\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //RELAYApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\RGBApis.h",
        "content": "#ifndef RGBAPIS_h\n#define RGBAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/RGBController.h\"\n#include \"ModulePermissions.h\"\n\nclass RGBApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    RGBController* rgbController;\n    std::string class_path = \"/rgb\";\n\npublic:\n    RGBApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String Type, int Rpin, int Gpin, int Bpin);\n    String handleupdate(int id, String Type, int Rpin, int Gpin, int Bpin);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nRGBApis::RGBApis(Context* cntxt, bool add_apis): context(cntxt) {\n    rgbController = new RGBController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"Type\") || !req->getParams()->isQueryParameterSet(\"Rpin\") || !req->getParams()->isQueryParameterSet(\"Gpin\") || !req->getParams()->isQueryParameterSet(\"Bpin\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String Type = getQueryParameterString(req, \"Type\");\n    int Rpin = getQueryParameterint(req, \"Rpin\");\n    int Gpin = getQueryParameterint(req, \"Gpin\");\n    int Bpin = getQueryParameterint(req, \"Bpin\");\n\n        response(res, handlecreate(Type, Rpin, Gpin, Bpin));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"Type\") || !req->getParams()->isQueryParameterSet(\"Rpin\") || !req->getParams()->isQueryParameterSet(\"Gpin\") || !req->getParams()->isQueryParameterSet(\"Bpin\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String Type = getQueryParameterString(req, \"Type\");\n    int Rpin = getQueryParameterint(req, \"Rpin\");\n    int Gpin = getQueryParameterint(req, \"Gpin\");\n    int Bpin = getQueryParameterint(req, \"Bpin\");\n        \n        response(res, handleupdate(id, Type, Rpin, Gpin, Bpin));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::RGB_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString RGBApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString RGBApis::handlecreate(String Type, int Rpin, int Gpin, int Bpin) {\n    RGBEntity* rgbEntity = new RGBEntity(Type, Rpin, Gpin, Bpin);\n    int id = rgbController->Add(*rgbEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString RGBApis::handleupdate(int id, String Type, int Rpin, int Gpin, int Bpin) {\n    RGBEntity* rgbEntity = new RGBEntity(id, Type, Rpin, Gpin, Bpin);\n    \n    if (rgbController->Update(*rgbEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString RGBApis::handledelete(int id) {\n    \n    if (rgbController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString RGBApis::handlegetAll() {\n    return rgbController->GetAllJson();\n}\nString RGBApis::handlegetById(int id) {\n    return rgbController->GetById(id).toJson();\n}\nString RGBApis::handleget(String query) {\n    return rgbController->GetJson(query);\n}\n\nString RGBApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"Type\"], parameters[\"Rpin\"].toInt(), parameters[\"Gpin\"].toInt(), parameters[\"Bpin\"].toInt());\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"Type\"], parameters[\"Rpin\"].toInt(), parameters[\"Gpin\"].toInt(), parameters[\"Bpin\"].toInt());\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //RGBApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\Modules\\SoilMoistureApis.h",
        "content": "#ifndef SOILMOISTUREAPIS_h\n#define SOILMOISTUREAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/Modules/SoilMoistureController.h\"\n#include \"ModulePermissions.h\"\n\nclass SoilMoistureApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    SoilMoistureController* soilmoistureController;\n    std::string class_path = \"/soilmoisture\";\n\npublic:\n    SoilMoistureApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(int DryTreshold, int WetTreshold, String Type);\n    String handleupdate(int id, int DryTreshold, int WetTreshold, String Type);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nSoilMoistureApis::SoilMoistureApis(Context* cntxt, bool add_apis): context(cntxt) {\n    soilmoistureController = new SoilMoistureController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"DryTreshold\") || !req->getParams()->isQueryParameterSet(\"WetTreshold\") || !req->getParams()->isQueryParameterSet(\"Type\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int DryTreshold = getQueryParameterint(req, \"DryTreshold\");\n    int WetTreshold = getQueryParameterint(req, \"WetTreshold\");\n    String Type = getQueryParameterString(req, \"Type\");\n\n        response(res, handlecreate(DryTreshold, WetTreshold, Type));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"DryTreshold\") || !req->getParams()->isQueryParameterSet(\"WetTreshold\") || !req->getParams()->isQueryParameterSet(\"Type\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        int DryTreshold = getQueryParameterint(req, \"DryTreshold\");\n    int WetTreshold = getQueryParameterint(req, \"WetTreshold\");\n    String Type = getQueryParameterString(req, \"Type\");\n        \n        response(res, handleupdate(id, DryTreshold, WetTreshold, Type));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, ModulePermissions::SOILMOISTURE_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString SoilMoistureApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString SoilMoistureApis::handlecreate(int DryTreshold, int WetTreshold, String Type) {\n    SoilMoistureEntity* soilmoistureEntity = new SoilMoistureEntity(DryTreshold, WetTreshold, Type);\n    int id = soilmoistureController->Add(*soilmoistureEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString SoilMoistureApis::handleupdate(int id, int DryTreshold, int WetTreshold, String Type) {\n    SoilMoistureEntity* soilmoistureEntity = new SoilMoistureEntity(id, DryTreshold, WetTreshold, Type);\n    \n    if (soilmoistureController->Update(*soilmoistureEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString SoilMoistureApis::handledelete(int id) {\n    \n    if (soilmoistureController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString SoilMoistureApis::handlegetAll() {\n    return soilmoistureController->GetAllJson();\n}\nString SoilMoistureApis::handlegetById(int id) {\n    return soilmoistureController->GetById(id).toJson();\n}\nString SoilMoistureApis::handleget(String query) {\n    return soilmoistureController->GetJson(query);\n}\n\nString SoilMoistureApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"DryTreshold\"].toInt(), parameters[\"WetTreshold\"].toInt(), parameters[\"Type\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"DryTreshold\"].toInt(), parameters[\"WetTreshold\"].toInt(), parameters[\"Type\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //SOILMOISTUREApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\AddSystemApis.h",
        "content": "\n#ifndef ADDSYSTEMAPIS_H\n#define ADDSYSTEMAPIS_H\n\n#include \"SystemPermissions.h\"\n#include \"ClockApis.h\"\n#include \"FileApis.h\"\n#include \"LogApis.h\"\n#include \"SSIDApis.h\"\n#include \"SystemConfigApis.h\"\n#include \"WiFiApis.h\"\n\n\nvoid createSystemApis(Context* context)\n{\n    std::vector<ApiInterface*> apis = std::vector<ApiInterface*>();\n\n    \n    ClockApis*  clockApis= new ClockApis(context, true);\n    apis.push_back(clockApis);\n    \n    FileApis*  fileApis= new FileApis(context, true);\n    apis.push_back(fileApis);\n    \n    LogApis* logApis = new LogApis(context, true);\n    apis.push_back(logApis);\n    \n    SSIDApis*  sSIDApis= new SSIDApis(context, true);\n    apis.push_back(sSIDApis);\n    \n    SystemConfigAPis*  systemConfigAPis= new SystemConfigAPis(context, true);\n    apis.push_back(systemConfigAPis);\n    \n    WiFiApis* wiFiApis = new WiFiApis(context, true);\n    apis.push_back(wiFiApis);\n\n    context->getNetwork()->addApis(apis);\n}\n\n#endif //APIS_H\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\ClockApis.h",
        "content": "#ifndef ClockApis_h\n#define ClockApis_h\n\n#include \"../../../Context.h\"\n#include \"SystemPermissions.h\"\n\nclass ClockApis : public ApiInterface {\npublic:\n    // Constructor\n    ClockApis(Context* context, bool add_apis);\n\n\n    // APIs\n    EBPDateTime now();\n    JalaliDateTime nowJalali();\n    void adjust(const EBPDateTime& dateTime);\n    void syncTimeWithServer();\n\n    String callFunction(String functionName, std::map<String, String> parameters);\n\nprivate:\n    std::string class_path = \"/clock\";\n    String getClassPath() override;\n    Context* context;\n};\n\nClockApis::ClockApis(Context* cntxt, bool add_apis) : context(cntxt) {\n    if (!add_apis) return;\n\n    // Add API for getting the current time\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/now\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::CLOCK_GET) == AuthorizationResults::SUCCESFULL){return;}\n        EBPDateTime currentTime = this->now();\n        String output = currentTime.toDateTimeString();\n        response(res, output);\n    }));\n\n    // Add API for getting the current Jalali time\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/nowJalali\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::CLOCK_GET) == AuthorizationResults::SUCCESFULL){return;}\n        JalaliDateTime currentJalaliTime = this->nowJalali();\n        response(res, currentJalaliTime.toDateTimeString());\n    }));\n\n    // Add API for adjusting the time\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/adjustTime\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::CLOCK_SET) == AuthorizationResults::SUCCESFULL){return;}\n        \n        if (!req->getParams()->isQueryParameterSet(\"date\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        // Extract dateTime from the request\n        EBPDateTime dateTime = EBPDateTime(getQueryParameterint(req, \"date\")); // Assume this object can be constructed from the request\n\n        this->adjust(dateTime);\n\n        response(res, 200, \"text/plain\", \"Time adjusted successfully\");\n    }));\n\n    // Add API for syncing time with the server\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/syncTime\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::CLOCK_SET) == AuthorizationResults::SUCCESFULL){return;}\n        this->syncTimeWithServer();\n        response(res, 200, \"text/plain\", \"Time synced with server successfully\");\n    }));\n}\n\nString ClockApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nEBPDateTime ClockApis::now() {\n    return context->getClock()->now();\n}\n\nJalaliDateTime ClockApis::nowJalali() {\n    return context->getClock()->nowJalali();\n}\n\nvoid ClockApis::adjust(const EBPDateTime& dateTime) {\n    context->getClock()->adjust(dateTime);\n}\n\nvoid ClockApis::syncTimeWithServer() {\n    context->getClock()->syncTimeWithServer();\n}\n\nString ClockApis::callFunction(String functionName, std::map<String, String> parameters) {\n    // Handling 'now' function call\n    if (functionName == \"now\") {\n        return now().toDateTimeString();\n    }\n\n    // Handling 'nowJalali' function call\n    if (functionName == \"nowJalali\") {\n        return nowJalali().toDateTimeString();\n    }\n\n    // Handling 'adjust' function call\n    if (functionName == \"adjust\") {\n        if (!parameters.count(\"date\")) {\n            return \"Missing 'date' parameter for adjust function\";\n        }\n        EBPDateTime dateTime = EBPDateTime(parameters[\"date\"]); // Convert the string to EBPDateTime\n        adjust(dateTime);\n        return \"Time adjusted successfully\";\n    }\n\n    // Handling 'syncTimeWithServer' function call\n    if (functionName == \"syncTimeWithServer\") {\n        syncTimeWithServer();\n        return \"Time synced with server successfully\";\n    }\n\n    // If the function name does not match any known function\n    return String(\"No such function: \") + functionName;\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\FileApis.h",
        "content": "#ifndef FILE_API_H\n#define FILE_API_H\n\n#include <ArduinoJson.h>\n#include \"../../../Context.h\"\n#include \"../ApiInterface.h\"\n#include \"../../../FileManager/EBPFile.h\"\n#include \"SystemPermissions.h\"\n\nclass FileApis : public ApiInterface{\nprivate:\n    Context* context;\n\npublic:\n    std::string class_path = \"/fileApi\";\n    FileApis(Context* context, bool add_apis);\n    String getClassPath() override;\n\n    String handleBrowseFolder(String path, int offset, int count, StorageType _storageType);\n    String handleOpen(String path, String mod, StorageType _storageType);\n    void handleFileUploadAndRedirect(HTTPRequest *req, HTTPResponse *res, String path, StorageType storageType_path);\n    void handleRoot(HTTPResponse* res);\n    String handleDelete(String path, StorageType _storageType);\n    String handleWrite(String path, String content, StorageType _storageType);\n    String handleFormat(StorageType _storageType);\n    String handleRename(String path, String new_name, StorageType _storageType);\n    String handleMove(String source_path, String destination_path, StorageType _storageType);\n    String handleCopy(String source_path, String destination_path, StorageType _storageType);\n    String handleDuplicate(String path, StorageType _storageType);\n    String handleMkDir(String path, StorageType _storageType);\n    \n    String callFunction(String functionName, std::map<String, String> parameters);\n    \n};\n\nFileApis::FileApis(Context* cntxt, bool add_apis) : context(cntxt) {\n    if (!add_apis) return;\n    \n    context->getNetwork()->addApi(new ResourceNode(\"/\", LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        this->handleRoot(res);\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/browse_folder\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if(req->getParams()->isQueryParameterSet(\"path\")) {\n            String path = getQueryParameterString(req, \"path\");\n            int offset = 0;\n            int count = 1000;\n            if(req->getParams()->isQueryParameterSet(\"offset\") && req->getParams()->isQueryParameterSet(\"count\")) {\n                offset = getQueryParameterint(req, \"offset\");\n                count = getQueryParameterint(req, \"count\");\n            }\n            \n            StorageType _storageType = storageType;\n            if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n            {\n                _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n            }\n\n            response(res, 200, \"application/json\", handleBrowseFolder(path, offset, count, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/open\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        if(req->getParams()->isQueryParameterSet(\"path\")) {\n            String path = getQueryParameterString(req, \"path\");\n            String content = this->handleOpen(path, \"r\", _storageType);\n            response(res, content);\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        if(req->getParams()->isQueryParameterSet(\"path\")) {\n            String path = getQueryParameterString(req, \"path\");\n            String content = handleDelete(path, _storageType);\n            response(res, content);\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/write\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"path\") && req->getParams()->isQueryParameterSet(\"content\")) {\n            String path = getQueryParameterString(req, \"path\");\n            String content = handleWrite(path, content, _storageType);\n            response(res, handleWrite(path, content, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/format\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        response(res, handleFormat(_storageType));\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/rename\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"path\") && req->getParams()->isQueryParameterSet(\"new_name\")) {\n            String path = getQueryParameterString(req, \"path\");\n            String new_name = getQueryParameterString(req, \"new_name\");\n            response(res, handleRename(path, new_name, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/move\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"source_path\") && req->getParams()->isQueryParameterSet(\"destination_path\")) {\n            String source_path = getQueryParameterString(req, \"source_path\");\n            String destination_path = getQueryParameterString(req, \"destination_path\");\n            response(res, handleMove(source_path, destination_path, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/copy\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"source_path\") && req->getParams()->isQueryParameterSet(\"destination_path\")) {\n            String source_path = getQueryParameterString(req, \"source_path\");\n            String destination_path = getQueryParameterString(req, \"destination_path\");\n            response(res, handleCopy(source_path, destination_path, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/duplicate\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"path\")) {\n            String path = getQueryParameterString(req, \"path\");\n            response(res, handleDuplicate(path, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/mkdir\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n        \n        if(req->getParams()->isQueryParameterSet(\"path\")) {\n            String path = getQueryParameterString(req, \"path\");\n            response(res, handleMkDir(path, _storageType));\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(\"/files\", LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        String file_html = String(R\"rawliteral(\n            <!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>File Manager</title><style>body{font-family:Arial,sans-serif;color:#333}#container{display:flex;height:100vh}#nav{flex:1;border-right:1px solid #ccc;overflow:auto;padding:20px}#content{flex:2;padding:20px}table{width:100%;border-collapse:collapse}th,td{padding:10px;text-align:left}tr:nth-child(even){background-color:#f2f2f2}.icon{width:20px;height:20px;margin-right:10px}#upload-form{display:flex;align-items:center;gap:10px;margin-bottom:20px}.custom-file-upload{padding:5px 10px;background:#3498db;color:#fff;border-radius:5px;cursor:pointer}.custom-file-upload:hover{background:#2980b9}#file-upload{display:none}.upload-btn{padding:5px 10px;background:#2ecc71;border:none;color:#fff;border-radius:5px;cursor:pointer}.upload-btn:hover{background:#27ae60}#storage-toggle{margin-right:10px}.storage_info{width:0;height:0}#storage-toggle{display:flex;justify-content:center;padding:10px;background-color:#f2f2f2;border-radius:30px;margin-bottom:20px}#storage-toggle label{cursor:pointer;padding:10px 20px;border-radius:20px;font-weight:bold}input[type=\"radio\"]{display:none}input[type=\"radio\"]:checked+label{background-color:#3498db;color:#fff}#file-path{margin-left:10px;border:none;background:#f2f2f2;padding:5px 10px;border-radius:5px;font-size:16px;color:#555;box-shadow:0 2px 5px rgba(0,0,0,.1);transition:box-shadow .3s ease}#file-path:focus{box-shadow:0 2px 5px rgba(0,0,0,.2);outline:none}.custom-file-upload{padding:5px 10px;background:#3498db;color:#fff;border-radius:5px;cursor:pointer;display:inline-block;transition:background .3s ease}.custom-file-upload:hover{background:#2980b9}</style></head><body><div id=\"container\"><div id=\"nav\"><h2>Folders</h2><ul id=\"folders\"></ul></div><div id=\"content\"><div id=\"storage-toggle\"><input type=\"radio\" id=\"SD\" name=\"storage\" value=\"SD_TYPE\" onchange=\"handleStorageToggle()\"><label for=\"SD\">SD</label><input type=\"radio\" id=\"LittleFS\" name=\"storage\" value=\"SPIFFS_TYPE\" checked onchange=\"handleStorageToggle()\"><label for=\"LittleFS\">SPIFFS</label></div><form method=\"POST\" action=\"/upload_spiffs\" enctype=\"multipart/form-data\" id=\"upload-form\"><label for=\"file-upload\" class=\"custom-file-upload\"><i class=\"fa fa-cloud-upload\"></i> Choose File</label><input id=\"file-upload\" type=\"file\" name=\"data\" onchange=\"showFileName()\"/><input type=\"text\" id=\"file-path\" readonly><button type=\"submit\" name=\"upload\" class=\"upload-btn\" title=\"Upload File\">Upload</button></form><h2 id=\"currentPath\"></h2><table><thead><tr><th>Name</th><th>Type</th><th>Size</th><th>Actions</th></tr></thead><tbody id=\"files\"></tbody></table></div></div><div id=\"storage-info\" style=\"visibility: hidden;\"><span id=\"currentStorage\">SD</span></div><script>let currentPath=\"/\",currentData=null,currentStorage=\"SPIFFS_TYPE\";function handleStorageToggle() {\n    var form = document.getElementById(\"upload-form\");\n    var storageOptions = document.getElementsByName(\"storage\");\n\n    for (var i = 0, length = storageOptions.length; i < length; i++) {\n        if (storageOptions[i].checked) {\n            // Update the action of the form based on the selected storage type\n            form.action = storageOptions[i].value === \"SD_TYPE\" ? \"/upload_sd\" : \"/upload_spiffs\";\n\n            // Update currentStorage to reflect the selected option\n            currentStorage = storageOptions[i].value === \"SD_TYPE\" ? \"SD_TYPE\" : \"SPIFFS_TYPE\";\n            document.getElementById(\"currentStorage\").textContent = currentStorage === \"SD_TYPE\" ? \"SD\" : \"SPIFFS\";\n\n            // Refresh the file view with the new storage type\n            browse(currentPath);\n            break;\n        }\n    }\n}\nfunction browse(e){fetch(`/fileApi/browse_folder?path=${e}&storage_type=${currentStorage}`).then(e=>e.json()).then(e=>(currentData=e,updateView(e))).catch(e=>{console.error(\"Error:\",e)})}function updateView(e){document.getElementById(\"currentPath\").textContent=currentPath;const n=document.getElementById(\"files\");while(n.firstChild)n.firstChild.remove();for(const t of e){let e=window.location.origin;const r=document.createElement(\"tr\");let o=t.is_file?\"\ud83d\udcc4\":\"\ud83d\udcc1\";t.name=t.name.startsWith(\"/\")?t.name.slice(1):t.name;let c=e+\"/\"+t.name;r.innerHTML=`<td><a href=\"${c}\" target=\"_blank\" class=\"fileLink\"><span class=\"icon\">${o}</span>${t.name}</a></td><td>${t.is_file?\"file\":\"directory\"}</td><td>${t.size||\"\"}</td><td><button onclick=\"openItem('${t.name}')\">Open</button><button>Rename</button><button onclick=\"deleteItem('${t.name}')\">Delete</button></td>`,n.appendChild(r)}}function openItem(name) {\n    const itemPath = currentPath.endsWith(\"/\") ? currentPath + name : currentPath + \"/\" + name;\n    const item = currentData.find(e => e.name === name);\n\n    if (item && !item.is_file) {\n        // If the item is a folder, update currentPath and browse the new path\n        currentPath = itemPath;\n        browse(currentPath + \"/\");\n    } else if (item && item.is_file) {\n        // If the item is a file, open it as before\n        fetch(`/fileApi/open?path=${itemPath}&storage_type=${currentStorage}`)\n            .then(response => response.text())\n            .then(data => {\n                const newWindow = window.open(\"\", \"_blank\");\n                newWindow.document.write(`<pre>${data}</pre>`);\n            })\n            .catch(error => {\n                console.error(\"Error:\", error);\n            });\n    }\n}\nfunction deleteItem(e){fetch(`/fileApi/delete?path=${currentPath}${e}&storage_type=${currentStorage}`,{method:\"DELETE\"}).then(e=>e.headers.get(\"content-type\")===\"application/json\"?e.json():e.text()).then(e=>{typeof e===\"string\"||e.success?(alert(\"Deleted \"+e),browse(currentPath)):alert(\"Error: \"+e.error)}).catch(e=>{console.error(\"Error:\",e)})}function showFileName(){const e=document.getElementById(\"file-upload\"),n=document.getElementById(\"file-path\");n.value=e.value.split(\"\\\\\").pop()}browse(currentPath)</script></body></html>\n\n\n            )rawliteral\");\n        response(res, file_html);\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(\"/upload_spiffs\", LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        handleFileUploadAndRedirect(req, res, \"/\", StorageType::SPIFFS_TYPE);\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(\"/upload_sd\", LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        handleFileUploadAndRedirect(req, res, \"/\", StorageType::SD_TYPE);\n    }));\n    \n    context->getNetwork()->addUrlNotFound(new ResourceNode(\"\", LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        \n        String _path = String(req->getRequestString().c_str());//request->urlDecode(request->url());\n        String content_type = \"\";\n        \n        StorageType _storageType = storageType;\n        if(req->getParams()->isQueryParameterSet(\"storage_type\"))\n        {\n            _storageType = EBPFile::getStorageType(getQueryParameterString(req, \"storage_type\"));\n        }\n\n        bool file_in_storage = false;\n        if (_storageType == StorageType::SD_TYPE)\n        {\n            if(context->getSD()->exists(_path)) file_in_storage = true;\n        }\n        else\n        {\n            if(context->getLittleFS()->exists(_path)) file_in_storage = true;\n        }\n\n        if(req->getParams()->isQueryParameterSet(\"content_type\")) {\n            content_type = getQueryParameterString(req, \"content_type\");\n        }\n\n        if (file_in_storage)\n        {\n            DownloadFile(res, _path, content_type, storageType);\n        }\n        else\n        {\n            response(res, PAGE_NOT_FOUND_MESSAGE);\n        }\n        \n    }));\n}\n\nString FileApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString FileApis::callFunction(String functionName, std::map<String, String> parameters) {\n    StorageType _storageType = EBPFile::getStorageType(parameters[\"storage_type\"]);\n\n    if (functionName == \"handleBrowseFolder\") {\n        return handleBrowseFolder(parameters[\"path\"], parameters[\"offset\"].toInt(), parameters[\"count\"].toInt(), _storageType);\n    } else if (functionName == \"handleOpen\") {\n        return handleOpen(parameters[\"path\"], parameters[\"mod\"], _storageType);\n    } else if (functionName == \"handleDelete\") {\n        return handleDelete(parameters[\"path\"], _storageType);\n    } else if (functionName == \"handleWrite\") {\n        return handleWrite(parameters[\"path\"], parameters[\"content\"], _storageType);\n    } else if (functionName == \"handleFormat\") {\n        return handleFormat(_storageType);\n    } else if (functionName == \"handleRename\") {\n        return handleRename(parameters[\"path\"], parameters[\"new_name\"], _storageType);\n    } else if (functionName == \"handleMove\") {\n        return handleMove(parameters[\"source_path\"], parameters[\"destination_path\"], _storageType);\n    } else if (functionName == \"handleCopy\") {\n        return handleCopy(parameters[\"source_path\"], parameters[\"destination_path\"], _storageType);\n    } else if (functionName == \"handleDuplicate\") {\n        return handleDuplicate(parameters[\"path\"], _storageType);\n    } else {\n        return \"Error: The function doesn't exist\";\n    }\n}\n\nvoid FileApis::handleRoot(HTTPResponse* res)\n{\n    String _path;\n    bool fileExists = false;\n    _path = \"/index.html\";\n    if (storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (context->getLittleFS()->exists(_path))\n        {\n            fileExists = true;\n        }\n    }\n    else if (storageType == StorageType::SD_TYPE)\n    {\n        if (context->getSD()->exists(_path))\n        {\n            fileExists = true;\n        }\n    }\n\n    if (fileExists)\n    {\n        DownloadFile(res, _path, \"text/html\", storageType);\n    }\n    \n    _path = \"/files.html\";\n    if (storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (context->getLittleFS()->exists(_path))\n        {\n            fileExists = true;\n        }\n    }\n    else if (storageType == StorageType::SD_TYPE)\n    {\n        if (context->getSD()->exists(_path))\n        {\n            fileExists = true;\n        }\n    }\n\n    if (fileExists)\n    {\n        DownloadFile(res, _path, \"text/html\", storageType);\n    }\n    else{\n        RedirectUrl(res, \"/files\");\n    }\n}\n\n\nString FileApis::handleBrowseFolder(String path, int offset, int count, StorageType _storageType) {\n    std::vector<FileData> files;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        files = context->getLittleFS()->Browse(path);\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        files = context->getSD()->Browse(path);\n    }     \n\n    DynamicJsonDocument doc(2048);\n    JsonArray array = doc.to<JsonArray>();\n\n    // Implementing the pagination\n    int currentCount = 0;\n    for(int i = offset; i < files.size() && currentCount < count; i++, currentCount++) {\n        JsonObject obj = array.createNestedObject();\n        obj[\"name\"] = files[i].name;\n        obj[\"is_file\"] = files[i].isFile;\n        obj[\"is_empty\"] = files[i].isEmpty;\n        obj[\"size\"] = files[i].size;  \n    }\n\n    String response;\n    serializeJson(doc, response);\n\n    return response;\n}\n\nString FileApis::handleOpen(String path, String mod, StorageType _storageType) {\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        return context->getLittleFS()->open(path, mod)->readString();\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        return context->getSD()->open(path, mod)->readString();\n    } \n}\n\nString FileApis::handleDelete(String path, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        success = context->getLittleFS()->remove(path);\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        success = context->getSD()->remove(path);\n    } \n\n    if (success)\n    {\n        return \"File Deleted Succesfull.\";\n    }else{\n        return \"An error occured while Delete file.\";\n    }    \n}\n\nString FileApis::handleWrite(String path, String content, StorageType _storageType) {\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        context->getLittleFS()->open(path, \"w\");\n        context->getLittleFS()->print(content);\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        context->getSD()->open(path, \"w\");\n        context->getSD()->print(content);\n    } \n    return \"File writed succesfully.\";\n}\n\nString FileApis::handleFormat(StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if(context->getLittleFS()->format())\n        {\n            success = true;\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if(context->getSD()->format())\n        {\n            success = true;\n        }\n    } \n\n    if (success)\n    {\n        return \"Storage Formated Succesfull\";\n    }else {\n        return \"An error occured while formating\";\n    }\n    \n}\n\nString FileApis::handleRename(String path, String new_name, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if(context->getLittleFS()->rename(path, new_name))\n        {\n            success = true;\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if(context->getSD()->rename(path, new_name))\n        {\n            success = true;\n        }\n    } \n\n    if (success)\n    {\n        return \"File renamed Succesfull\";\n    }else {\n        return \"An error occured while renaming file\";\n    }\n}\n\nString FileApis::handleMove(String source_path, String destination_path, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (context->getLittleFS()->open(source_path, \"w\"))\n        {\n            if(context->getLittleFS()->move(destination_path))\n            {\n                success = true;\n            }\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if (context->getSD()->open(source_path, \"w\"))\n        {\n            if(context->getSD()->move(destination_path))\n            {\n                success = true;\n            }\n        }\n    } \n\n    if (success)\n    {\n        return \"File moved Succesfull\";\n    }else {\n        return \"An error occured while moving file\";\n    }\n}\n\nString FileApis::handleCopy(String source_path, String destination_path, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (context->getLittleFS()->open(source_path, \"w\"))\n        {\n            if(context->getLittleFS()->copy(destination_path))\n            {\n                success = true;\n            }\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if (context->getSD()->open(source_path, \"w\"))\n        {\n            if(context->getSD()->copy(destination_path))\n            {\n                success = true;\n            }\n        }\n    } \n\n    if (success)\n    {\n        return \"File copied Succesfull\";\n    }else {\n        return \"An error occured while copying file\";\n    }\n}\n\nString FileApis::handleDuplicate(String path, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (context->getLittleFS()->open(path, \"w\"))\n        {\n            if(context->getLittleFS()->duplicate())\n            {\n                success = true;\n            }\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if (context->getSD()->open(path, \"w\"))\n        {\n            if(context->getSD()->duplicate())\n            {\n                success = true;\n            }\n        }\n    } \n\n    if (success)\n    {\n        return \"File moved Succesfull\";\n    }else {\n        return \"An error occured while renaming file\";\n    } \n}\n\nString FileApis::handleMkDir(String path, StorageType _storageType) {\n    bool success = false;\n    if (_storageType == StorageType::SPIFFS_TYPE)\n    {\n        if (LittleFS.mkdir(path))\n        {\n            success = true;\n        }\n    }\n    else if (_storageType == StorageType::SD_TYPE)\n    {\n        if (SD.mkdir(path))\n        {\n            success = true;            \n        }\n    } \n\n    if (success)\n    {\n        return \"Folder Created Succesfully\";\n    }\n    else\n    {\n        return \"Error Ocured While Creating Folder.\";\n    } \n}\n\nvoid FileApis::handleFileUploadAndRedirect(HTTPRequest *req, HTTPResponse *res, String path, StorageType storageType_path) {\n  // Check if it's a POST request\n  if (req->getMethod() == \"POST\") {\n    // Use the HTTPMultipartBodyParser to parse the uploaded file\n    HTTPBodyParser *parser = new HTTPMultipartBodyParser(req);\n\n    while (parser->nextField()) {\n      std::string name = parser->getFieldName();\n      std::string filename = parser->getFieldFilename();\n\n      // Check if the field is a file\n      if (name == \"data\") {\n        // Check file name validity and all that, but we skip that.\n        std::string pathname = std::string(path.c_str()) + filename;\n        File file;\n        if (storageType_path == StorageType::SD_TYPE)\n        {\n            file = SD.open(pathname.c_str(), \"w\");\n        }\n        else\n        {\n            file = LittleFS.open(pathname.c_str(), \"w\");\n        }\n        \n        size_t fileLength = 0;\n\n        // Write the file content\n        while (!parser->endOfField()) {\n          byte buf[512];\n          size_t readLength = parser->read(buf, 512);\n          file.write(buf, readLength);\n          fileLength += readLength;\n        }\n\n        file.close();\n        delete parser;\n\n        // Redirect to \"/files\" after successful file upload\n        RedirectUrl(res, \"/files\");\n        return;\n      }\n    }\n\n    // If no file field found, send an error response\n    res->setStatusCode(400);\n    res->setStatusText(\"Bad Request\");\n    res->println(\"400 Bad Request - No file uploaded\");\n  } else {\n    // If it's not a POST request, send an error response\n    res->setStatusCode(405);\n    res->setStatusText(\"Method Not Allowed\");\n    res->println(\"405 Method Not Allowed - Only POST requests are allowed\");\n  }\n}\n\n\n\n#endif // FILE_API_H\n\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\LogApis.h",
        "content": "#ifndef LOGAPIS_h\n#define LOGAPIS_h\n\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/LogController.h\"\n#include \"SystemPermissions.h\"\n\nclass LogApis : public ApiInterface\n{\nprivate:\n    Context* context;\n    LogController* logController;\n    std::string class_path = \"/log\";\n\npublic:\n    LogApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    \n    String handlecreate(String logLevel, String logTitle, String message);\n    String handleupdate(int id, String logLevel, String logTitle, String message);\n    String handledelete(int id);\n    String handlegetAll();\n    String handlegetById(int id);\n    String handleget(String query);\n};\n\nLogApis::LogApis(Context* cntxt, bool add_apis): context(cntxt) {\n    logController = new LogController(context, storageType);\n\n    if (!add_apis) return;    \n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"logLevel\") || !req->getParams()->isQueryParameterSet(\"logTitle\") || !req->getParams()->isQueryParameterSet(\"message\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        String logLevel = getQueryParameterString(req, \"logLevel\");\n    String logTitle = getQueryParameterString(req, \"logTitle\");\n    String message = getQueryParameterString(req, \"message\");\n\n        response(res, handlecreate(logLevel, logTitle, message));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"logLevel\") || !req->getParams()->isQueryParameterSet(\"logTitle\") || !req->getParams()->isQueryParameterSet(\"message\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        String logLevel = getQueryParameterString(req, \"logLevel\");\n    String logTitle = getQueryParameterString(req, \"logTitle\");\n    String message = getQueryParameterString(req, \"message\");\n        \n        response(res, handleupdate(id, logLevel, logTitle, message));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        \n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handledelete(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handlegetAll());\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        int id = getQueryParameterint(req, \"id\");\n        \n        response(res, handlegetById(id));\n    }));\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::LOG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        String query = getQueryParameterString(req, \"query\");\n        \n        response(res, handleget(query));\n    }));\n}\n\nString LogApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString LogApis::handlecreate(String logLevel, String logTitle, String message) {\n    LogEntity* logEntity = new LogEntity(logLevel, logTitle, message);\n    int id = logController->Add(*logEntity);\n    if (id != -1)\n    {\n        return CREATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\nString LogApis::handleupdate(int id, String logLevel, String logTitle, String message) {\n    LogEntity* logEntity = new LogEntity(id, logLevel, logTitle, message);\n    \n    if (logController->Update(*logEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\nString LogApis::handledelete(int id) {\n    \n    if (logController->Delete(id))\n    {\n        return DELETE_SUCCESFULL_MESSAGE;\n    }\n    \n    return DELETE_FAILED_MESSAGE;\n}\nString LogApis::handlegetAll() {\n    return logController->GetAllJson();\n}\nString LogApis::handlegetById(int id) {\n    return logController->GetById(id).toJson();\n}\nString LogApis::handleget(String query) {\n    return logController->GetJson(query);\n}\n\nString LogApis::callFunction(String functionName, std::map<String, String> parameters) {\n    \n    if (functionName == \"handlecreate\") {\n        return handlecreate(parameters[\"logLevel\"], parameters[\"logTitle\"], parameters[\"message\"]);\n    }\n    if (functionName == \"handleupdate\") {\n        return handleupdate(parameters[\"id\"].toInt(), parameters[\"logLevel\"], parameters[\"logTitle\"], parameters[\"message\"]);\n    }\n    if (functionName == \"handledelete\") {\n        return handledelete(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handlegetAll\") {\n        return handlegetAll();\n    }\n    if (functionName == \"handlegetById\") {\n        return handlegetById(parameters[\"id\"].toInt());\n    }\n    if (functionName == \"handleget\") {\n        return handleget(parameters[\"query\"]);\n    }\n    return String(NO_FUNCTION_MESSAGE + functionName);\n}\n\n#endif //LOGApis_h\n\n    "
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\SSIDApis.h",
        "content": "#ifndef SSIDApis_h\n#define SSIDApis_h\n\n\n#include <ArduinoJson.h>\n#include \"../../../Context.h\"\n#include \"../ApiInterface.h\"\n#include \"../../../Database/Controllers/WiFiConroller.h\"\n#include \"SystemPermissions.h\"\n\nclass SSIDApis : public ApiInterface{\nprivate:\npublic:\n    std::string class_path = \"/ssid\";\n    WiFiController* wifiController;\n    Context* context;\n\n    SSIDApis(Context* context, bool add_apis);\n    String getClassPath() override;\n\n  String callFunction(String functionName, std::map<String, String> parameters) override;\n  String handleCreate(String ssid, String password);\n  String handleUpdate(int id, String ssid, String password);\n  String handleDelete(int id);\n  String handleGet(String query);\n  String handleGetById(int id);\n  String handleGetAll();\n};\n\nSSIDApis::SSIDApis(Context* cntxt, bool add_apis): context(cntxt) {\n  wifiController = new WiFiController(context, storageType);\n\n  if (!add_apis) return;\n\n  context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n      if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n      \n      if (!req->getParams()->isQueryParameterSet(\"SSID\") || !req->getParams()->isQueryParameterSet(\"Password\"))\n      {\n          response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n          return;\n      }\n      \n      std::string ssid;\n      req->getParams()->getQueryParameter(\"SSID\", ssid);\n      std::string password;\n      req->getParams()->getQueryParameter(\"Password\", password);\n\n      response(res, handleCreate(String(ssid.c_str()), String(password.c_str())));\n  }));\n\n  // Update Endpoint\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"SSID\") || !req->getParams()->isQueryParameterSet(\"Password\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n        std::string ssid;\n        req->getParams()->getQueryParameter(\"SSID\", ssid);\n        std::string password;\n        req->getParams()->getQueryParameter(\"Password\", password);\n\n        response(res, handleUpdate(String(id.c_str()).toInt(), String(ssid.c_str()), String(password.c_str())));\n    }));\n\n    // Delete Endpoint\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n\n        response(res, handleDelete(String(id.c_str()).toInt()));\n    }));\n\n    // Get All Endpoint\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handleGetAll());\n    }));\n\n    // Get By ID Endpoint\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n\n        response(res, handleGetById(String(id.c_str()).toInt()));\n    }));\n\n    // Get Endpoint\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_GET) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n\n        response(res, handleGet(String(query.c_str())));\n    }));\n}\n\nString SSIDApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\nString SSIDApis::callFunction(String functionName, std::map<String, String> parameters) {\n  if (functionName == \"handleCreate\") {\n      handleCreate(parameters[\"ssid\"], parameters[\"password\"]);\n      return \"OK\";\n  } else if (functionName == \"handleUpdate\") {\n      handleUpdate(parameters[\"id\"].toInt(), parameters[\"ssid\"], parameters[\"password\"]);\n      return \"OK\";\n  } else if (functionName == \"handleDelete\") {\n      handleDelete(parameters[\"id\"].toInt());\n      return \"OK\";\n  } else if (functionName == \"handleGet\") {\n      return handleGet(parameters[\"query\"]);\n  } else if (functionName == \"handleGetById\") {\n      return handleGetById(parameters[\"id\"].toInt());\n  } else if (functionName == \"handleGetAll\") {\n      return handleGetAll();\n  } else {\n      return \"Error: The function doesn't exist\";\n  }\n}\n\nString SSIDApis::handleCreate(String ssid, String password) {\n    WiFiEntity *wifiEntity = new WiFiEntity(ssid, password);\n    int id = wifiController->Add(*wifiEntity);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\n\nString SSIDApis::handleUpdate(int id, String ssid, String password) {\n    WiFiEntity* wifiEntity = new WiFiEntity(id, ssid, password); \n    if(wifiController->Update(*wifiEntity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\n\nString SSIDApis::handleDelete(int id) {\n    if(wifiController->Delete(id)) return DELETE_SUCCESFULL_MESSAGE;\n    return DELETE_FAILED_MESSAGE;\n}\n\nString SSIDApis::handleGet(String query) {\n    \n    std::vector<WiFiEntity> wifiEntities = wifiController->Get(query);\n    String result = \"[\";\n    for (size_t i = 0; i < wifiEntities.size(); i++) {\n        result = result + wifiEntities.at(i).toString();\n    }\n    result = result + \"]\";\n    return result;\n}\n\nString SSIDApis::handleGetById(int id) {\n    WiFiEntity wifiEntity = wifiController->GetById(id);\n    if (wifiEntity.id == -1) {\n        return \"No entity\";\n    } else {\n        return wifiEntity.toJson();\n    }\n}\n\nString SSIDApis::handleGetAll() {\n    return wifiController->GetAllJson();\n}\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\SystemConfigApis.h",
        "content": "\n#ifndef SystemConfigApis_h\n#define SystemConfigApis_h\n\n\n#include <ArduinoJson.h>\n#include \"../../../Database/Controllers/SystemConfigController.h\"\n#include \"../../../Context.h\"\n#include \"../ApiInterface.h\"\n#include \"../../../Config/System/DefaultSystemConfigs.h\"\n#include \"SystemPermissions.h\"\n\nclass SystemConfigAPis : public ApiInterface\n{\nprivate:\npublic:\n    std::string class_path = \"/systemConfig\";\n    SystemConfigController* systemConfigController;\n    Context* context;\n\n    SystemConfigAPis(Context* context, bool add_apis);\n    String getClassPath() override;\n\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n    String handleCreate(String key, String value);\n    String handleUpdate(int id, String key, String value);\n    String handleSubmit(String key, String value);\n    String handleDelete(int id);\n    String handleGet(String query);\n    String handleGetById(int id);\n    String handleGetAll();\n};\n\nSystemConfigAPis::SystemConfigAPis(Context* cntxt, bool add_apis): context(cntxt)\n{\n    systemConfigController = new SystemConfigController(context, storageType);\n\n    if (!add_apis) return;\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/create\"), LambdaResourceNode::REQUEST_METHOD_POST, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_CREATE) == AuthorizationResults::SUCCESFULL){return;}\n        if (!req->getParams()->isQueryParameterSet(\"key\") || !req->getParams()->isQueryParameterSet(\"value\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        std::string key;\n        std::string value;\n        req->getParams()->getQueryParameter(\"key\", key);\n        req->getParams()->getQueryParameter(\"value\", value);\n\n        response(res, handleCreate(String(key.c_str()), String(value.c_str())));\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/update\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"id\") || !req->getParams()->isQueryParameterSet(\"key\") || !req->getParams()->isQueryParameterSet(\"value\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string id;\n        std::string key;\n        std::string value;\n        req->getParams()->getQueryParameter(\"id\", id);\n        req->getParams()->getQueryParameter(\"key\", key);\n        req->getParams()->getQueryParameter(\"value\", value);\n\n        response(res, handleUpdate(String(id.c_str()).toInt(), String(key.c_str()), String(value.c_str())));\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/submit\"), LambdaResourceNode::REQUEST_METHOD_PUT, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_UPDATE) == AuthorizationResults::SUCCESFULL){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"key\") || !req->getParams()->isQueryParameterSet(\"value\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n\n        std::string key;\n        std::string value;\n        req->getParams()->getQueryParameter(\"key\", key);\n        req->getParams()->getQueryParameter(\"value\", value);\n\n        response(res, handleSubmit(String(key.c_str()), String(value.c_str())));\n    }));\n    \n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/delete\"), LambdaResourceNode::REQUEST_METHOD_DELETE, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_DELETE) == AuthorizationResults::SUCCESFULL){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n\n        response(res, handleDelete(String(id.c_str()).toInt()));\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_GET) == AuthorizationResults::SUCCESFULL){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"query\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        std::string query;\n        req->getParams()->getQueryParameter(\"query\", query);\n\n        response(res, handleGet(String(query.c_str())));    \n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getById\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_GET) == AuthorizationResults::SUCCESFULL){return;}\n\n        if (!req->getParams()->isQueryParameterSet(\"id\"))\n        {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n            return;\n        }\n        std::string id;\n        req->getParams()->getQueryParameter(\"id\", id);\n\n        response(res, handleGetById(String(id.c_str()).toInt()));\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getAll\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, handleGetAll());\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getSystemConfigs\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, DefaultSystemConfigs::jsonString);\n    }));\n\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/getConfigsJson\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SYSTEMCONFIG_GET) == AuthorizationResults::SUCCESFULL){return;}\n        response(res, DefaultSystemConfigs::jsonString);\n    }));\n}\n\nString SystemConfigAPis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\n\nString SystemConfigAPis::callFunction(String functionName, std::map<String, String> parameters)\n{\n    if (functionName == \"handleCreate\") {\n        handleCreate(parameters[\"key\"], parameters[\"value\"]);\n        return \"OK\";\n    } else if (functionName == \"handleUpdate\") {\n        handleUpdate(parameters[\"id\"].toInt(), parameters[\"key\"], parameters[\"value\"]);\n        return \"OK\";\n    } else if (functionName == \"handleSubmit\") {\n        handleSubmit(parameters[\"key\"], parameters[\"value\"]);\n        return \"OK\";\n    } else if (functionName == \"handleDelete\") {\n        handleDelete(parameters[\"id\"].toInt());\n        return \"OK\";\n    } else if (functionName == \"handleGet\") {\n        return handleGet(parameters[\"query\"]);\n    } else if (functionName == \"handleGetById\") {\n        return handleGetById(parameters[\"id\"].toInt());\n    } else if (functionName == \"handleGetAll\") {\n        return handleGetAll();\n    } else {\n        return \"Error: The function doesn't exist\";\n    }\n}\nString SystemConfigAPis::handleCreate(String key, String value) {\n    KeyValueEntity *systemConfig = new KeyValueEntity(key, value);\n    int id = systemConfigController->Add(*systemConfig);\n    if (id != -1)\n    {\n        return String(id);\n    }\n    \n    return CREATE_FAILED_MESSAGE;\n}\n\nString SystemConfigAPis::handleUpdate(int id, String key, String value) {\n    KeyValueEntity* entity = new KeyValueEntity(id, key, value);\n    if(systemConfigController->Update(*entity))\n    {\n        return UPDATE_SUCCESFULL_MESSAGE;\n    }\n    \n    return UPDATE_FAILED_MESSAGE;\n}\n\nString SystemConfigAPis::handleSubmit(String key, String value) {\n    std::vector<KeyValueEntity> systemConfigEntities = systemConfigController->Get(KeyValueEntity::COLUMN_KEY + \"=\" + key);\n    if (systemConfigEntities.size() > 0)\n    {\n        KeyValueEntity* entity = new KeyValueEntity(systemConfigEntities.at(0).id, key, value);\n        if(systemConfigController->Update(*entity)) return UPDATE_SUCCESFULL_MESSAGE;\n        else return UPDATE_FAILED_MESSAGE;\n    }\n    else\n    {\n        KeyValueEntity *systemConfig = new KeyValueEntity(key, value);\n        int id = systemConfigController->Add(*systemConfig);\n        if (id != -1) return String(id);        \n        return CREATE_FAILED_MESSAGE;\n    }\n}\n\nString SystemConfigAPis::handleDelete(int id) {\n    if(systemConfigController->Delete(id)) return DELETE_SUCCESFULL_MESSAGE;\n    return DELETE_FAILED_MESSAGE;\n}\n\nString SystemConfigAPis::handleGetAll() {\n    return systemConfigController->GetAllJson();\n}\n\nString SystemConfigAPis::handleGet(String query) {\n    std::vector<KeyValueEntity> systemConfigEntities = systemConfigController->Get(query);\n    String result = \"[\";\n    for (size_t i = 0; i < systemConfigEntities.size(); i++)\n    {\n        result = result + systemConfigEntities.at(i).toString();\n    }\n    result = result + \"]\";\n    return result;\n}\n\nString SystemConfigAPis::handleGetById(int id) {\n    KeyValueEntity systemConfig = systemConfigController->GetById(id);\n\n    if (systemConfig.id == -1)\n    {\n        return \"no entity\";\n    }\n    else\n    {\n        return systemConfig.toJson();\n    }\n}\n\n\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\SystemPermissions.h",
        "content": "#ifndef SYSTEMPERMISSIONS_H\n#define SYSTEMPERMISSIONS_H\n\n#include \"../../../Context.h\"\n\nclass SystemPermissions\n{\npublic:\n    // File permissions\n    static const String FILE_CREATE;\n    static const String FILE_UPDATE;\n    static const String FILE_DELETE;\n    static const String FILE_GET;\n\n    // WiFi permissions\n    static const String WIFI_CREATE;\n    static const String WIFI_UPDATE;\n    static const String WIFI_DELETE;\n    static const String WIFI_GET;\n\n    // Log permissions\n    static const String LOG_CREATE;\n    static const String LOG_UPDATE;\n    static const String LOG_DELETE;\n    static const String LOG_GET;\n\n    // SystemConfig permissions\n    static const String SYSTEMCONFIG_CREATE;\n    static const String SYSTEMCONFIG_UPDATE;\n    static const String SYSTEMCONFIG_DELETE;\n    static const String SYSTEMCONFIG_GET;\n\n    // SSID permissions\n    static const String SSID_CREATE;\n    static const String SSID_UPDATE;\n    static const String SSID_DELETE;\n    static const String SSID_GET;\n\n    // Clock permissions\n    static const String CLOCK_GET;\n    static const String CLOCK_SET;\n\n\n    static void addPermissions(Context* context);\n};\n\nvoid SystemPermissions::addPermissions(Context* context)\n{\n    // File permissions\n    context->getSecurity()->addPermissionForAdmin(FILE_CREATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(FILE_UPDATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(FILE_DELETE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(FILE_GET, \"SystemApis Permissions\");\n\n    // WiFi permissions\n    context->getSecurity()->addPermissionForAdmin(WIFI_CREATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(WIFI_UPDATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(WIFI_DELETE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(WIFI_GET, \"SystemApis Permissions\");\n\n    // Log permissions\n    context->getSecurity()->addPermissionForAdmin(LOG_CREATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LOG_UPDATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LOG_DELETE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(LOG_GET, \"SystemApis Permissions\");\n\n    // SystemConfig permissions\n    context->getSecurity()->addPermissionForAdmin(SYSTEMCONFIG_CREATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SYSTEMCONFIG_UPDATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SYSTEMCONFIG_DELETE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SYSTEMCONFIG_GET, \"SystemApis Permissions\");\n\n    // SSID permissions\n    context->getSecurity()->addPermissionForAdmin(SSID_CREATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SSID_UPDATE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SSID_DELETE, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(SSID_GET, \"SystemApis Permissions\");\n\n    // Clock permissions\n    context->getSecurity()->addPermissionForAdmin(CLOCK_GET, \"SystemApis Permissions\");\n    context->getSecurity()->addPermissionForAdmin(CLOCK_SET, \"SystemApis Permissions\");\n}\n\n// Define the static constants\nconst String SystemPermissions::FILE_CREATE = \"file_create\";\nconst String SystemPermissions::FILE_UPDATE = \"file_update\";\nconst String SystemPermissions::FILE_DELETE = \"file_delete\";\nconst String SystemPermissions::FILE_GET = \"file_get\";\n\nconst String SystemPermissions::WIFI_CREATE = \"wifi_create\";\nconst String SystemPermissions::WIFI_UPDATE = \"wifi_update\";\nconst String SystemPermissions::WIFI_DELETE = \"wifi_delete\";\nconst String SystemPermissions::WIFI_GET = \"wifi_get\";\n\nconst String SystemPermissions::LOG_CREATE = \"log_create\";\nconst String SystemPermissions::LOG_UPDATE = \"log_update\";\nconst String SystemPermissions::LOG_DELETE = \"log_delete\";\nconst String SystemPermissions::LOG_GET = \"log_get\";\n\nconst String SystemPermissions::SYSTEMCONFIG_CREATE = \"systemconfig_create\";\nconst String SystemPermissions::SYSTEMCONFIG_UPDATE = \"systemconfig_update\";\nconst String SystemPermissions::SYSTEMCONFIG_DELETE = \"systemconfig_delete\";\nconst String SystemPermissions::SYSTEMCONFIG_GET = \"systemconfig_get\";\n\nconst String SystemPermissions::SSID_CREATE = \"ssid_create\";\nconst String SystemPermissions::SSID_UPDATE = \"ssid_update\";\nconst String SystemPermissions::SSID_DELETE = \"ssid_delete\";\nconst String SystemPermissions::SSID_GET = \"ssid_get\";\n\nconst String SystemPermissions::CLOCK_GET = \"clock_get\";\nconst String SystemPermissions::CLOCK_SET = \"clock_set\";\n\n#endif // SYSTEMPERMISSIONS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\apis\\System\\WiFiApis.h",
        "content": "#ifndef WiFiApis_h\n#define WiFiApis_h\n\n#include \"../ApiInterface.h\"\n#include \"../../../Context.h\"\n#include \"../../../Database/Controllers/WiFiConroller.h\"\n#include \"SystemPermissions.h\"\n\nclass WiFiApis : public ApiInterface{\nprivate:\n    String ssidInfosToJson(const std::vector<SSIDInfo>& SSIDInfos);\npublic:\n    std::string class_path = \"/wifi\";\n\n    Context* context;\n\n    WiFiApis(Context* cntxt, bool add_apis);\n    String getClassPath() override;\n    String callFunction(String functionName, std::map<String, String> parameters) override;\n\n    bool removeSSID(String ssid);\n    void restartESP();\n    void disconnectWiFi();\n    bool connectWiFi(String ssid, String password);\n    void addSSID(String ssid, String password);\n    String getAllSSIDs();\n};\n\nWiFiApis::WiFiApis(Context* cntxt, bool add_apis): context(cntxt)\n{\n    if (!add_apis) return;\n\n    // forget_wifi API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/forget_wifi\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        if(req->getParams()->isQueryParameterSet(\"ssid\")) {\n            String ssid = getQueryParameterString(req, \"ssid\");\n            removeSSID(ssid);\n            response(res, 200, \"text/html\", \"Successful\");\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    // restart API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/restart\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        restartESP();\n        response(res, 200, \"text/html\", \"Successful\");\n    }));\n\n    // disconnect_wifi API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/disconnect_wifi\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        disconnectWiFi();\n        response(res, 200, \"text/html\", \"Successful\");\n    }));\n\n    // connect_wifi API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/connect_wifi\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        if(req->getParams()->isQueryParameterSet(\"ssid\")) {\n            String ssid = getQueryParameterString(req, \"ssid\");\n            String password = \"\";\n            if(req->getParams()->isQueryParameterSet(\"password\")){\n                password = getQueryParameterString(req, \"password\");\n            }\n            response(res, 200, \"text/html\", \"Successful\");\n            if (connectWiFi(ssid, password)) {\n                return;\n            } else {\n                response(res, 400, \"text/html\",  \"Failed\");\n            }\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    // add_ssid API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/add_ssid\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        if(req->getParams()->isQueryParameterSet(\"ssid\") && req->getParams()->isQueryParameterSet(\"password\")) {\n            String ssid = getQueryParameterString(req, \"ssid\");\n            String password = getQueryParameterString(req, \"password\");\n            addSSID(ssid, password);\n            response(res, 200, \"text/html\", \"Successful\");\n        } else {\n            response(res, 400, MISSING_INPUT_PARAMS_MESSAGE);\n        }\n    }));\n\n    // get_all_ssids API\n    context->getNetwork()->addApi(new ResourceNode(std::string(class_path + \"/get_all_ssids\"), LambdaResourceNode::REQUEST_METHOD_GET, [&](HTTPRequest * req, HTTPResponse * res) {\n        if (!context->getSecurity()->checkAuthentication(req, res, SystemPermissions::SSID_CREATE) == AuthorizationResults::SUCCESFULL) { return; }\n        String output = getAllSSIDs();\n        response(res, 200, \"text/json\", output);\n    }));\n}\n\n\nString WiFiApis::getClassPath()\n{\n    return String(class_path.c_str());\n}\n\nString WiFiApis::callFunction(String functionName, std::map<String, String> parameters)\n{\n    if (functionName == \"removeSSID\") {\n        bool result = removeSSID(parameters[\"ssid\"]);\n        return result ? \"OK\" : \"Error\";\n    } else if (functionName == \"restartESP\") {\n        restartESP();\n        return \"OK\";\n    } else if (functionName == \"disconnectWiFi\") {\n        disconnectWiFi();\n        return \"OK\";\n    } else if (functionName == \"connectWiFi\") {\n        bool result = connectWiFi(parameters[\"ssid\"], parameters[\"password\"]);\n        return result ? \"OK\" : \"Error\";\n    } else if (functionName == \"addSSID\") {\n        addSSID(parameters[\"ssid\"], parameters[\"password\"]);\n        return \"OK\";\n    } else if (functionName == \"getAllSSIDs\") {\n        return getAllSSIDs();\n    } else {\n        return \"Error: The function doesn't exist\";\n    }\n}\n\nbool WiFiApis::removeSSID(String ssid)\n{\n    context->getNetwork()->getWiFiManager()->RemoveSSID(ssid);\n\n    return true;\n}\n\nvoid WiFiApis::restartESP()\n{\n    ESP.restart();\n}\n\nvoid WiFiApis::disconnectWiFi()\n{\n    WiFi.disconnect(false,false);\n}\n\nbool WiFiApis::connectWiFi(String ssid, String password)\n{\n    WiFiController* wifiController = new WiFiController(context, storageType);\n    std::vector<WiFiEntity> wifiEntities = wifiController->GetAll();\n    bool in_db = false;\n    for (size_t i = 0; i < wifiEntities.size(); i++)\n    {\n        if (wifiEntities.at(i).SSID == ssid)\n        {\n            password = wifiEntities.at(i).Password;\n            in_db = true;\n        }            \n    }\n    disconnectWiFi();\n    WiFi.begin(ssid.c_str(),password.c_str());\n    if(WiFi.status())\n    {\n        if(in_db == false)\n        {\n            context->getNetwork()->getWiFiManager()->AddSSID(ssid,password);\n            context->getNetwork()->getWiFiManager()->displayNetworkInfo();\n        }\n    }\n    else{\n        return false;\n    }\n    return true;\n}\n\n\nvoid WiFiApis::addSSID(String ssid, String password)\n{\n    context->getNetwork()->getWiFiManager()->AddSSID(ssid, password);\n}\n\nString WiFiApis::getAllSSIDs()\n{\n    std::vector<SSIDInfo> SSIDInfos;\n    context->getNetwork()->getWiFiManager()->GetAvailableSSIDs(SSIDInfos);\n    return ssidInfosToJson(SSIDInfos);\n}\n\nString WiFiApis::ssidInfosToJson(const std::vector<SSIDInfo>& SSIDInfos) {\n    String json = \"[\";\n    for (size_t i = 0; i < SSIDInfos.size(); i++) {\n        json += \"{\\\"SSID\\\":\\\"\" + SSIDInfos.at(i).SSID + \"\\\",\\\"WiFiStrength\\\":\" + String(SSIDInfos.at(i).WiFiStrength) + \",\\\"isSaved\\\":\" + String(SSIDInfos.at(i).isSaved) + \"}\";\n        if (i < SSIDInfos.size() - 1) {\n            json += \",\";\n        }\n    }\n    json += \"]\";\n    return json;\n}\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\MeshNetwork\\IMeshNetworkManager.h",
        "content": "#ifndef IMESHNETWORKMANAGER_H\n#define IMESHNETWORKMANAGER_H\n#include \"Message.h\"\n#include \"Receive.h\"\n// #include \"painlessMesh.h\"\n\ntypedef std::function<void(Message)> ResponseCallback;\nclass IMeshNetworkManager\n{\npublic:\n    // virtual painlessMesh* getMesh() = 0;\n    virtual Receive* getReceive() = 0;\n    virtual void setReceive(Receive* receive) = 0;\n    virtual void initialize() = 0;\n    virtual void loop() = 0;\n    // virtual void broadcastMessage(Message message, ResponseCallback callback) = 0;\n    virtual void setResponseMessage(Message response) = 0;\n    virtual Message* getResponseMessage() = 0;\n};\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\MeshNetwork\\MeshNetworkManager.h",
        "content": "#ifndef MESHNETWORKMANAGER_H\n#define MESHNETWORKMANAGER_H\n\n// #include \"painlessMesh.h\"\n#include \"../../Context.h\"\n#include \"../../Config/System/SystemConfigKeys.h\"\n#include \"Message.h\"\n#include \"Receive.h\"\n#include \"IMeshNetworkManager.h\"\nclass MeshNetworkManager : public IMeshNetworkManager\n{\nprivate:\n    const char*   MESH_PREFIX = \"whateverYouLike\";\n    const char*   MESH_PASSWORD = \"somethingSneaky\";\n    const uint16_t   MESH_PORT =  5555;\n    const char* HOSTNAME = \"HTTP_BRIDGE\";\n    Context context;\n    int32_t start_millis;\n    bool initialized;\n    Message responseMessage;\n    // typedef void (*ResponseCallback)(Message);\n    // ResponseCallback responseCallback;\n    // painlessMesh mesh;\n    Receive receive;\npublic:\n    // static MeshNetworkManager* MeshManagerinstance;  // Static pointer to the class MeshManagerinstance\n\n    MeshNetworkManager(Context &context);\n    void initialize() override;\n    static void receivedCallback(const uint32_t &from, const String &msg );\n    void loop() override;\n    // void broadcastMessage(Message message, ResponseCallback callback) override;\n    void setResponseMessage(Message response) override;\n    Message* getResponseMessage() override;\n    // painlessMesh* getMesh() override;\n    Receive* getReceive() override;\n    void setReceive(Receive* receive) override;\n};\n\n// MeshNetworkManager* MeshNetworkManager::MeshManagerinstance = nullptr;\n\nMeshNetworkManager::MeshNetworkManager(Context &context): context(context)\n{\n    // MeshManagerinstance = this;  // Set the static pointer to this MeshManagerinstance\n    initialized = false;\n}\nvoid MeshNetworkManager::initialize()\n{\n    // mesh.setDebugMsgTypes( ERROR | STARTUP | CONNECTION );\n    // mesh.init( MESH_PREFIX, MESH_PASSWORD, MESH_PORT );\n    // mesh.onReceive(&receivedCallback);\n    // mesh.setHostname(HOSTNAME);\n\n    // String meshRootStr = context.getConfig()->get(SystemConfigKey::MESH_ROOT);\n    // bool meshRoot = (meshRootStr == \"true\");\n    // mesh.setRoot(meshRoot);\n    // mesh.setContainsRoot(true);\n    // start_millis = millis();\n    // initialized = true;\n}\n\nvoid MeshNetworkManager::receivedCallback(const uint32_t &from, const String &msg ) {\n    // Message message;\n    // message.fromString(msg);\n    // painlessMesh& mesh = MeshManagerinstance->mesh;  // Use the static pointer to access the mesh\n    // Receive& receive = MeshManagerinstance->receive;  // Use the static pointer to access the receive\n    // if (message.nodeId == mesh.getNodeId() || message.nodeId == 0)\n    // {\n    //     if(message.responseMessage.length() > 0)\n    //     {\n    //         MeshManagerinstance->setResponseMessage(message);\n    //         if (MeshManagerinstance->responseCallback) {\n    //             MeshManagerinstance->responseCallback(message);  // Call the callback with the response\n    //         }\n    //         return;\n    //     }        \n    //     Message responseMessage;\n    //     responseMessage.responseMessage = receive.receiveMessage(msg);\n    //     MeshManagerinstance->broadcastMessage(responseMessage, nullptr);\n    // }\n\n    // Serial.printf(\"bridge: Received from %u msg=%s\\n\", from, msg.c_str());\n}\n\nvoid MeshNetworkManager::setResponseMessage(Message response)\n{\n    responseMessage = response;\n}\n\nMessage* MeshNetworkManager::getResponseMessage()\n{\n    Message rm = responseMessage;\n    responseMessage.responseMessage = \"\";\n    return &rm;\n}\n\nvoid MeshNetworkManager::loop()\n{\n\n    // if (context.getConfig()->get(SystemConfigKey::WIFI_MODE_MESH) != \"true\")\n    // {\n    //     return;\n    // }\n    // if (!initialized)\n    // {\n    //     context.getErrorHandler()->handleError(\"MeshNetwork is not initialized\");\n    //     return;\n    // }\n    \n    // // mesh.update();\n    // if (millis() - start_millis > 5000)\n    // {\n    // start_millis = millis();\n    // Serial.print(\"My AP IP is \");\n    // Serial.print(IPAddress(mesh.getAPIP()).toString());\n    // Serial.print(\" and Station IP is \");\n    // Serial.println(IPAddress(mesh.getStationIP()).toString());\n    // }\n\n}\n\n// void MeshNetworkManager::broadcastMessage(Message message, ResponseCallback callback) {\n//     String messageString = message.toString();\n//     mesh.sendBroadcast(messageString);\n//     responseCallback = callback;  // Save the callback for later\n// }\n\n// painlessMesh* MeshNetworkManager::getMesh()\n// {\n//     return &mesh;\n// }\n\nReceive* MeshNetworkManager::getReceive()\n{\n    return &receive;\n}\n\nvoid MeshNetworkManager::setReceive(Receive* receive)\n{\n    receive = receive;\n}\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\MeshNetwork\\Message.h",
        "content": "#ifndef MESSAGE_H\n#define MESSAGE_H\n// Message.h\n#include <Arduino.h>\n#include <map>\n\nclass Message {\npublic:\n    uint32_t nodeId;\n    String className;\n    String functionName;\n    std::map<String, String> parameters;\n    String responseMessage;\n\n    String toString() {\n        if (responseMessage.length() > 0)\n        {\n            String queryString = nodeId + \"/response=\" + responseMessage;\n            return queryString;\n        }\n        \n        String queryString = nodeId + \"/\" + className + \"/\" + functionName + \"?\";\n        for (auto const& pair : parameters) {\n            queryString += pair.first + \"=\" + pair.second + \"&\";\n        }\n        // Remove the last \"&\"\n        queryString = queryString.substring(0, queryString.length() - 1);\n        return queryString;\n    }\n\n    void fromString(String queryString) {\n        int firstSlash = queryString.indexOf('/');\n        int responseStart = queryString.indexOf(\"response=\", firstSlash + 1);\n        if (responseStart != -1)\n        {\n            responseMessage = queryString.substring(responseStart + 9);\n            return;\n        }\n        \n        int secondSlash = queryString.indexOf('/', firstSlash + 1);\n        int questionMark = queryString.indexOf('?');\n\n        nodeId = queryString.substring(0, firstSlash).toInt();\n        className = queryString.substring(firstSlash + 1, secondSlash);\n        functionName = queryString.substring(secondSlash + 1, questionMark);\n\n        String parametersString = queryString.substring(questionMark + 1);\n        int nextAmpersand;\n        do {\n            nextAmpersand = parametersString.indexOf('&');\n            String parameterPair = parametersString.substring(0, nextAmpersand);\n            int equalsSign = parameterPair.indexOf('=');\n            String parameterName = parameterPair.substring(0, equalsSign);\n            String parameterValue = parameterPair.substring(equalsSign + 1);\n            parameters[parameterName] = parameterValue;\n            parametersString = parametersString.substring(nextAmpersand + 1);\n        } while (nextAmpersand != -1);\n    }\n};\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\MeshNetwork\\Receive.h",
        "content": "#ifndef RECEIVE_H\n#define RECEIVE_H\n// Receive.h\n#include <map>\n#include \"Message.h\"\n#include \"../apis/ApiInterface.h\"\n\nclass Receive {\nprivate:\n    std::map<String, ApiInterface*> classes;\n\npublic:\n    void registerClass(String className, ApiInterface* classInstance) {\n        classes[className] = classInstance;\n    }\n\n    String receiveMessage(String messageString) {\n        Message message;\n        message.fromString(messageString);\n\n        if (classes.count(message.className) > 0) {\n            // The class exists\n            ApiInterface* classInstance = classes[message.className];\n            return classInstance->callFunction(message.functionName, message.parameters);\n        } else {\n            // The class doesn't exist\n            return \"Error: The class doesn't exist\";\n        }\n    }\n};\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\WiFi\\IWiFiManager.h",
        "content": "#ifndef IWiFiManager_h\n#define IWiFiManager_h\n\n// \n#if defined(ESP8266)\n#include <ESP8266WiFi.h>\n#else\n#include <WiFi.h>\n#endif\n\n#include <ArduinoJson.h>\n#include <vector>\n#include \"../../Database/Entities/WiFiEntity.h\"\n\nstruct SSIDInfo {\n  String SSID;               // wifi SSID\n  String WiFiPassword;       // wifi password\n  int WebServerPortHttp;     // http port number for web admin\n  int WiFiStrength;          // wifi strength \n  bool isSaved;\n};\n\nclass IWiFiManager\n{\n  public:\n    virtual void WiFiConnect() = 0;\n    virtual void AddSSID(String SSID, String password) = 0;\n    virtual void RemoveSSID(String SSID) = 0;\n    virtual void GetAvailableSSIDs(std::vector<SSIDInfo> &SSIDInfos) = 0;\n    virtual void loop() = 0;\n    virtual void configWifiMode() = 0;\n    virtual void displayNetworkInfo() = 0;\n    virtual void configureAccessPointMode() = 0;\n    virtual void configureStationMode() = 0;\n    virtual void connectToAvailableNetwork(std::vector<WiFiEntity>& wifiEntities) = 0;\n    virtual void connectToNetwork(WiFiEntity& wifiEntity) = 0;\n    virtual void waitForConnection() = 0;\n    virtual String getConnectedWifi() = 0;\n};\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\NetworkManager\\WiFi\\WiFiManager.h",
        "content": "#ifndef WiFiManager_h\n#define WiFiManager_h\n\n\n#include \"../../context.h\"\n#include \"../../Config/System/SystemConfigKeys.h\"\n#include \"../../Database/Controllers/WiFiConroller.h\"\n#include \"IWiFiManager.h\"\n\nclass WiFiManager : public IWiFiManager\n{\nprivate:\n    uint8_t BUILTIN_LED_PIN = 2;\n    const String WIFI_FILE = \"/WiFi.db\";\n    String DEFAULT_AP = \"OStad\";\n    String DEFAULT_PASSWORD = \"12345678\";\n    void blinkLED(int times, int delayMs);\n\npublic:\n    WiFiManager(Context*context);\n    void WiFiConnect() override;\n    void AddSSID(String SSID, String password) override;\n    void RemoveSSID(String SSID) override;\n    void GetAvailableSSIDs(std::vector<SSIDInfo> &SSIDInfos) override;\n    void loop() override;\n    void configWifiMode() override;\n    void displayNetworkInfo() override;\n    void configureAccessPointMode() override;\n    void configureStationMode() override;\n    void connectToAvailableNetwork(std::vector<WiFiEntity>& wifiEntities) override;\n    void connectToNetwork(WiFiEntity& wifiEntity) override;\n    void waitForConnection() override;\n    String getConnectedWifi() override;\n\n    const int default_WebServerPortHttp = 80;\n    Context* context;\n};\n\nWiFiManager::WiFiManager(Context*cntxt)\n{\n  context = cntxt;\n  pinMode(BUILTIN_LED_PIN, OUTPUT);\n}\n\nvoid WiFiManager::loop()\n{\n\n}\n\nvoid WiFiManager::WiFiConnect() \n{\n  configWifiMode();\n  displayNetworkInfo();\n}\n\nvoid WiFiManager::configWifiMode()\n{\n\n}\n\nvoid WiFiManager::configureAccessPointMode()\n{\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Initializing Accespoint ...\");\n  \n  // WiFi.mode(WIFI_STA);\n  WiFi.softAP(context->getConfig()->getSystemConfig()->get(SystemConfigKey::AP_SSID).c_str(),\n              context->getConfig()->getSystemConfig()->get(SystemConfigKey::AP_PASSWORD).c_str(), \n              context->getConfig()->getSystemConfig()->get(SystemConfigKey::CHANNEL).toInt(), \n              context->getConfig()->getSystemConfig()->get(SystemConfigKey::SSID_HIDDEN).toInt(), \n              context->getConfig()->getSystemConfig()->get(SystemConfigKey::MAX_CONNECTION).toInt());\n    \n  \n  char buffer[256]; // Allocate a buffer large enough to hold the formatted string\n  snprintf(buffer, sizeof(buffer), \"\\n\\nAccess Point Information :\\n      AP SSID: \\\"%s\\\"\\n      AP IP: \\\"%s\\\"\\n\", WiFi.softAPSSID().c_str(), WiFi.softAPIP().toString().c_str());\n\n  context->getLogger()->SerialPrint(buffer);\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Accespoint Initialized.\");\n\n}\n\nvoid WiFiManager::configureStationMode()\n{\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Initializing WiFi ...\");\n\n  WiFiController* wiFiController = new WiFiController(context, storageType);\n  std::vector<WiFiEntity> wifiEntities = wiFiController->GetAll();\n  if (wifiEntities.size() > 0)\n  {\n    connectToAvailableNetwork(wifiEntities);\n  }\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"WiFi Initialized.\");\n\n}\n\nvoid WiFiManager::connectToAvailableNetwork(std::vector<WiFiEntity>& wifiEntities)\n{\n  int n = WiFi.scanNetworks();\n  if (n == 0) \n  {\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"No Networks Found to Connect\");\n  } \n  else \n  {\n    for (int i = 0; i < n; ++i) \n    {\n      for (size_t j = 0; j < wifiEntities.size(); j++)\n      {\n        if(WiFi.SSID(i) == wifiEntities.at(j).getSSID())\n        {\n          connectToNetwork(wifiEntities.at(j));\n          return;\n        }\n      }\n    }\n        context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"No Netowrk found in List.\");\n  } \n}\n\nvoid WiFiManager::connectToNetwork(WiFiEntity& wifiEntity)\n{\n  SSIDInfo ssidInfo;\n  ssidInfo.SSID = wifiEntity.getSSID();\n  ssidInfo.WiFiPassword = wifiEntity.getPassword();\n  ssidInfo.WebServerPortHttp = default_WebServerPortHttp;\n\n  context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, String(\"\\nConnecting to Wifi \" + ssidInfo.SSID));\n  \n  WiFi.begin(ssidInfo.SSID.c_str(), ssidInfo.WiFiPassword.c_str());\n  \n  waitForConnection();\n  \n  WiFi.setSleep(false);\n  \n  char buffer[256]; // Ensure this buffer is large enough for your message\n\nsnprintf(buffer, sizeof(buffer), \n    \"\\n\\nNetwork SSID Information:\\n\"\n    \"         SSID: %s\\n\"\n    \"Wifi Strength: %ld dBm\",\n    WiFi.SSID().c_str(),  // Convert the SSID to a C-style string\n    WiFi.RSSI());         // RSSI is already a long, so no conversion needed\n\n  context->getLogger()->SerialPrint(buffer);\n  blinkLED(10, 100);\n  digitalWrite(BUILTIN_LED_PIN, LOW);\n}\n\nvoid WiFiManager::waitForConnection()\n{\n  int start_millis = millis();\n  bool led_on = false;\n\n  while (WiFi.status() != WL_CONNECTED)\n  {\n    delay(400);\n    // digitalWrite(BUILTIN_LED_PIN, led_on ? HIGH : LOW);\n    led_on = !led_on;\n\n    if (millis() - start_millis > 120000)\n    {\n      context->getConfig()->getSystemConfig()->set(SystemConfigKey::WIFI_MODE_AP, \"true\");\n      context->getConfig()->getSystemConfig()->set(SystemConfigKey::WIFI_MODE_WIFI, \"false\");\n      #if defined(ESP32)\n      ESP.restart();\n      #endif\n    }\n  }\n}\n\nvoid WiFiManager::blinkLED(int times, int delayMs)\n{\n  bool led_on = false;\n  for(int i = 0; i < times; i++)\n  {\n    digitalWrite(BUILTIN_LED_PIN, led_on ? HIGH : LOW);\n    led_on = !led_on;\n    delay(delayMs);\n  }\n}\n\nvoid WiFiManager::displayNetworkInfo()\n{\nchar buffer[512]; // Ensure this buffer is large enough for your message\n\nsnprintf(buffer, sizeof(buffer), \n    \" Wifi Status: %d\\n\"\n    \" MAC: %s\\n\"\n    \" IP: %s\\n\"\n    \" Subnet: %s\\n\"\n    \" Gateway: %s\\n\"\n    \" DNS 1: %s\\n\"\n    \" DNS 2: %s\\n\"\n    \" DNS 3: %s\\n\"\n    \"\\nConfiguring Webserver ...\\n\",\n    WiFi.status(),\n    WiFi.macAddress().c_str(),\n    WiFi.localIP().toString().c_str(),\n    WiFi.subnetMask().toString().c_str(),\n    WiFi.gatewayIP().toString().c_str(),\n    WiFi.dnsIP(0).toString().c_str(),\n    WiFi.dnsIP(1).toString().c_str(),\n    WiFi.dnsIP(2).toString().c_str());\n\n    context->getLogger()->SerialPrint(buffer);\n}\n\nvoid WiFiManager::AddSSID(String SSID, String password)\n{\n  WiFiController* wiFiController = new WiFiController(context, storageType);\n  WiFiEntity* wifiEntity = new WiFiEntity(SSID, password);\n  wiFiController->Add(*wifiEntity);\n}\n\nvoid WiFiManager::RemoveSSID(String SSID)\n{\n  WiFiController* wiFiController = new WiFiController(context, storageType);\n  std::vector<WiFiEntity> wifiEntities = wiFiController->Get(WiFiEntity::COLUMN_SSID + \" = \" + SSID);\n  if (wifiEntities.size() > 0)\n  {\n    WiFiEntity wifiEntity = wifiEntities.at(0);\n    wiFiController->Delete(wifiEntity.id);\n  }\n  \n}\n\nvoid WiFiManager::GetAvailableSSIDs(std::vector<SSIDInfo> &SSIDInfos)\n{\n  int n = WiFi.scanNetworks();\n  WiFiController* wiFiController = new WiFiController(context, storageType);\n  std::vector<WiFiEntity> wifiEntities = wiFiController->GetAll();\n  if (n == 0) \n  {\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"No Networks Found to Connect\");\n  } \n  else \n  {\n    for (int i = 0; i < n; ++i) \n    {\n      SSIDInfo SSIDInfo;\n      SSIDInfo.SSID = WiFi.SSID(i);\n      SSIDInfo.WiFiStrength = WiFi.RSSI(i);\n      SSIDInfo.isSaved = false;\n\n      for (size_t j = 0; j < wifiEntities.size(); j++)\n      {\n        if(WiFi.SSID(i) == wifiEntities.at(j).getSSID())\n        {\n          SSIDInfo.isSaved = true;\n        }\n      }        \n      SSIDInfos.push_back(SSIDInfo); \n    }\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"No Netowrk found in List.\");\n  }\n}\n\nString WiFiManager::getConnectedWifi()\n{\n  return WiFi.SSID();\n}\n#endif"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Security\\AuthorizationPermissions.h",
        "content": "#ifndef AUTHORIZATIONPERMISSIONS_H\n#define AUTHORIZATIONPERMISSIONS_H\n\nclass AuthorizationPermissions\n{\npublic:\n    static const String USER_CREATE;\n    static const String USER_UPDATE;\n    static const String USER_DELETE;\n    static const String USER_GET;\n    static const String ROLE_CREATE;\n    static const String ROLE_UPDATE;\n    static const String ROLE_DELETE;\n    static const String ROLE_GET;\n    static const String PERMISSION_CREATE;\n    static const String PERMISSION_UPDATE;\n    static const String PERMISSION_DELETE;\n    static const String PERMISSION_GET;\n    static const String ROLEPERMISSION_CREATE;\n    static const String ROLEPERMISSION_UPDATE;\n    static const String ROLEPERMISSION_DELETE;\n    static const String ROLEPERMISSION_GET;\n    static const String USERRESETPASS_CREATE;\n    static const String USERRESETPASS_UPDATE;\n    static const String USERRESETPASS_DELETE;\n    static const String USERRESETPASS_GET;\n    static const String SECURITYQUESTION_CREATE;\n    static const String SECURITYQUESTION_UPDATE;\n    static const String SECURITYQUESTION_DELETE;\n    static const String SECURITYQUESTION_GET;\n    static const String SECURITYQUESTIONTITLE_CREATE;\n    static const String SECURITYQUESTIONTITLE_UPDATE;\n    static const String SECURITYQUESTIONTITLE_DELETE;\n    static const String SECURITYQUESTIONTITLE_GET;\n    static const String LOGINATTEMPT_CREATE;\n    static const String LOGINATTEMPT_UPDATE;\n    static const String LOGINATTEMPT_DELETE;\n    static const String LOGINATTEMPT_GET;\n    static const String ACCOUNTLOCKOUT_CREATE;\n    static const String ACCOUNTLOCKOUT_UPDATE;\n    static const String ACCOUNTLOCKOUT_DELETE;\n    static const String ACCOUNTLOCKOUT_GET;\n    static const String TWOFACTORAUTH_CREATE;\n    static const String TWOFACTORAUTH_UPDATE;\n    static const String TWOFACTORAUTH_DELETE;\n    static const String TWOFACTORAUTH_GET;\n    static const String ACCOUNTACTIVITYLOG_CREATE;\n    static const String ACCOUNTACTIVITYLOG_UPDATE;\n    static const String ACCOUNTACTIVITYLOG_DELETE;\n    static const String ACCOUNTACTIVITYLOG_GET;\n    static const String AUTHENTICATION_LOGIN;\n    static const String AUTHENTICATION_PASSWORDRESET;\n    static const String AUTHENTICATION_PASSWORDRESETCONFIRM;\n    static const String AUTHENTICATION_TWOFACTORAUTH;\n    static const String AUTHENTICATION_TWOFACTORAUTHCONFIRM;\n    static const String AUTHENTICATION_ACCOUNTLOCK;\n    static const String AUTHENTICATION_ACCOUNTUNLOCK;\n    static const String AUTHENTICATION_SECURITYQUESTIONANSWER;\n    static const String AUTHENTICATION_CONFIG_CREATE;\n    static const String AUTHENTICATION_CONFIG_UPDATE;\n    static const String AUTHENTICATION_CONFIG_SUBMIT;\n    static const String AUTHENTICATION_CONFIG_DELETE;\n    static const String AUTHENTICATION_CONFIG_GET;\n    static const String SYSTEM_CONFIG_CREATE;\n    static const String SYSTEM_CONFIG_UPDATE;\n    static const String SYSTEM_CONFIG_SUBMIT;\n    static const String SYSTEM_CONFIG_DELETE;\n    static const String SYSTEM_CONFIG_GET;\n    static const String TESTREQUESTS_ADDDATA;\n    static const String TESTREQUESTS_GETDATA;\n    static const String TESTREQUESTS_PUBLICREQUEST;\n\n    static const String GetData;\n    static const String AddData;\n};\n\nconst String AuthorizationPermissions::USER_CREATE = \"user_create\";\nconst String AuthorizationPermissions::USER_UPDATE = \"user_update\";\nconst String AuthorizationPermissions::USER_DELETE = \"user_delete\";\nconst String AuthorizationPermissions::USER_GET = \"user_get\";\nconst String AuthorizationPermissions::ROLE_CREATE = \"role_create\";\nconst String AuthorizationPermissions::ROLE_UPDATE = \"role_update\";\nconst String AuthorizationPermissions::ROLE_DELETE = \"role_delete\";\nconst String AuthorizationPermissions::ROLE_GET = \"role_get\";\nconst String AuthorizationPermissions::PERMISSION_CREATE = \"permission_create\";\nconst String AuthorizationPermissions::PERMISSION_UPDATE = \"permission_update\";\nconst String AuthorizationPermissions::PERMISSION_DELETE = \"permission_delete\";\nconst String AuthorizationPermissions::PERMISSION_GET = \"permission_get\";\nconst String AuthorizationPermissions::ROLEPERMISSION_CREATE = \"rolepermission_create\";\nconst String AuthorizationPermissions::ROLEPERMISSION_UPDATE = \"rolepermission_update\";\nconst String AuthorizationPermissions::ROLEPERMISSION_DELETE = \"rolepermission_delete\";\nconst String AuthorizationPermissions::ROLEPERMISSION_GET = \"rolepermission_get\";\nconst String AuthorizationPermissions::USERRESETPASS_CREATE = \"userresetpass_create\";\nconst String AuthorizationPermissions::USERRESETPASS_UPDATE = \"userresetpass_update\";\nconst String AuthorizationPermissions::USERRESETPASS_DELETE = \"userresetpass_delete\";\nconst String AuthorizationPermissions::USERRESETPASS_GET = \"userresetpass_get\";\nconst String AuthorizationPermissions::SECURITYQUESTION_CREATE = \"securityquestion_create\";\nconst String AuthorizationPermissions::SECURITYQUESTION_UPDATE = \"securityquestion_update\";\nconst String AuthorizationPermissions::SECURITYQUESTION_DELETE = \"securityquestion_delete\";\nconst String AuthorizationPermissions::SECURITYQUESTION_GET = \"securityquestion_get\";\nconst String AuthorizationPermissions::SECURITYQUESTIONTITLE_CREATE = \"securityquestiontitle_create\";\nconst String AuthorizationPermissions::SECURITYQUESTIONTITLE_UPDATE = \"securityquestiontitle_update\";\nconst String AuthorizationPermissions::SECURITYQUESTIONTITLE_DELETE = \"securityquestiontitle_delete\";\nconst String AuthorizationPermissions::SECURITYQUESTIONTITLE_GET = \"securityquestiontitle_get\";\nconst String AuthorizationPermissions::LOGINATTEMPT_CREATE = \"loginattempt_create\";\nconst String AuthorizationPermissions::LOGINATTEMPT_UPDATE = \"loginattempt_update\";\nconst String AuthorizationPermissions::LOGINATTEMPT_DELETE = \"loginattempt_delete\";\nconst String AuthorizationPermissions::LOGINATTEMPT_GET = \"loginattempt_get\";\nconst String AuthorizationPermissions::ACCOUNTLOCKOUT_CREATE = \"accountlockout_create\";\nconst String AuthorizationPermissions::ACCOUNTLOCKOUT_UPDATE = \"accountlockout_update\";\nconst String AuthorizationPermissions::ACCOUNTLOCKOUT_DELETE = \"accountlockout_delete\";\nconst String AuthorizationPermissions::ACCOUNTLOCKOUT_GET = \"accountlockout_get\";\nconst String AuthorizationPermissions::TWOFACTORAUTH_CREATE = \"twofactorauth_create\";\nconst String AuthorizationPermissions::TWOFACTORAUTH_UPDATE = \"twofactorauth_update\";\nconst String AuthorizationPermissions::TWOFACTORAUTH_DELETE = \"twofactorauth_delete\";\nconst String AuthorizationPermissions::TWOFACTORAUTH_GET = \"twofactorauth_get\";\nconst String AuthorizationPermissions::ACCOUNTACTIVITYLOG_CREATE = \"accountactivitylog_create\";\nconst String AuthorizationPermissions::ACCOUNTACTIVITYLOG_UPDATE = \"accountactivitylog_update\";\nconst String AuthorizationPermissions::ACCOUNTACTIVITYLOG_DELETE = \"accountactivitylog_delete\";\nconst String AuthorizationPermissions::ACCOUNTACTIVITYLOG_GET = \"accountactivitylog_get\";\nconst String AuthorizationPermissions::AUTHENTICATION_LOGIN = \"authentication_login\";\nconst String AuthorizationPermissions::AUTHENTICATION_PASSWORDRESET = \"authentication_passwordreset\";\nconst String AuthorizationPermissions::AUTHENTICATION_PASSWORDRESETCONFIRM = \"authentication_passwordresetconfirm\";\nconst String AuthorizationPermissions::AUTHENTICATION_TWOFACTORAUTH = \"authentication_twofactorauth\";\nconst String AuthorizationPermissions::AUTHENTICATION_TWOFACTORAUTHCONFIRM = \"authentication_twofactorauthconfirm\";\nconst String AuthorizationPermissions::AUTHENTICATION_ACCOUNTLOCK = \"authentication_accountlock\";\nconst String AuthorizationPermissions::AUTHENTICATION_ACCOUNTUNLOCK = \"authentication_accountunlock\";\nconst String AuthorizationPermissions::AUTHENTICATION_CONFIG_CREATE = \"authentication_config_create\";\nconst String AuthorizationPermissions::AUTHENTICATION_CONFIG_UPDATE = \"authentication_config_update\";\nconst String AuthorizationPermissions::AUTHENTICATION_CONFIG_SUBMIT = \"authentication_config_submit\";\nconst String AuthorizationPermissions::AUTHENTICATION_CONFIG_DELETE = \"authentication_config_delete\";\nconst String AuthorizationPermissions::AUTHENTICATION_CONFIG_GET = \"authentication_config_get\";\nconst String AuthorizationPermissions::SYSTEM_CONFIG_CREATE = \"system_config_create\";\nconst String AuthorizationPermissions::SYSTEM_CONFIG_UPDATE = \"system_config_update\";\nconst String AuthorizationPermissions::SYSTEM_CONFIG_SUBMIT = \"system_config_submit\";\nconst String AuthorizationPermissions::SYSTEM_CONFIG_DELETE = \"system_config_delete\";\nconst String AuthorizationPermissions::SYSTEM_CONFIG_GET = \"system_config_get\";\nconst String AuthorizationPermissions::AUTHENTICATION_SECURITYQUESTIONANSWER = \"authentication_securityquestionanswer\";\nconst String AuthorizationPermissions::TESTREQUESTS_ADDDATA = \"testrequests_adddata\";\nconst String AuthorizationPermissions::TESTREQUESTS_GETDATA = \"testrequests_getdata\";\nconst String AuthorizationPermissions::TESTREQUESTS_PUBLICREQUEST = \"testrequests_publicrequest\";\n\nconst String AuthorizationPermissions::GetData = \"get_data\";\nconst String AuthorizationPermissions::AddData = \"add_data\";\n\n#endif // AUTHORIZATIONPERMISSIONS_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Security\\HMACAuth.h",
        "content": "#ifndef HMACAuth_h\n#define HMACAuth_h\n\n#include \"mbedtls/md.h\"\n#include \"mbedtls/base64.h\"\n\nclass HMACAuth {\npublic:\n    HMACAuth();\n    HMACAuth(const char *key);\n    void updateHash(const char *data);\n    String finalizeHash();\n\nprivate:\n    mbedtls_md_context_t ctx;\n    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA256;\n\n    void initHash(const char *key);\n};\n\n\nHMACAuth::HMACAuth() {\n}\n\nHMACAuth::HMACAuth(const char *key) {\n    initHash(key);\n}\n\nvoid HMACAuth::initHash(const char *key) {\n    const size_t keyLength = strlen(key);\n    mbedtls_md_init(&ctx);\n    mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(md_type), 1);\n    mbedtls_md_hmac_starts(&ctx, (const unsigned char *) key, keyLength);\n}\n\nvoid HMACAuth::updateHash(const char *data) {\n    const size_t dataLength = strlen(data);\n    mbedtls_md_hmac_update(&ctx, (const unsigned char *) data, dataLength);\n}\n\nString HMACAuth::finalizeHash() {\n    byte output_HMAC[32];\n    unsigned char output[65];\n    size_t outlen;\n\n    mbedtls_md_hmac_finish(&ctx, output_HMAC);\n    mbedtls_md_free(&ctx);\n    \n    mbedtls_base64_encode(output, 64, &outlen, (unsigned char *)output_HMAC, sizeof(output_HMAC));\n    output[outlen] = 0;\n    \n    return String((const char*)output);\n}\n#endif\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Security\\ISecurity.h",
        "content": "#ifndef ISECURITY_H\n#define ISECURITY_H\n\n#include \"AuthorizationPermissions.h\"\n#include \"LoginResult.h\"\n#include <HTTPS_Server_Generic.h>\n#include <base64.h>\n#include \"../NetworkManager/apis/ApiInterface.h\"\n\nenum AuthorizationResults{\n    SUCCESFULL,\n    AUTH_HEADER_MISSING,\n    INVALID_AUTHORIZATION_FORMAT,\n    INVALID_TOKEN,\n    USER_NOT_EXISTS,\n    USER_NO_PERMISSION,\n    ERROR\n};\nclass ISecurity {\npublic:\n    virtual void update() = 0;\n    virtual void initialize() = 0;\n    virtual LoginResult login(String username, String password) = 0;\n    virtual LoginResult logout(String username) = 0;\n    virtual bool checkTwoFactorSecurityOtpCode(String username, String otpCode) = 0;\n    virtual bool checkUserPermission(String username, String permission) = 0;\n    virtual LoginResult getUserNameFromToken(String token) = 0;\n    virtual AuthorizationResults checkAuthentication(HTTPRequest * req, HTTPResponse * res, String permission) = 0;\n    virtual void addPermissionForAdmin(String title, String group) = 0;\n};\n\n#endif // ISECURITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Security\\LoginResult.h",
        "content": "#ifndef LOGINRESULT_H\n#define LOGINRESULT_H\n\nenum LoginResults\n{\n    AdminUser,\n    Succesfull,\n    NeedTwoFactorAuthentication,\n    UsernameNotExists,\n    PasswordIsIncorrect,\n    WrongUserNameOrPassword,\n    UserIsLocked,\n    TowManyAttempts,\n    WrongOTPCode,\n    TwoFactorAuthenticationOtpCodeSent,\n    TwoFactorAuthenticationOtpCodeNotSent,\n    LogoutSuccessfull,\n    LogoutUnSuccessfull,\n    TokenNotSaved,\n};\n\nclass LoginResult\n{\nprivate:\n    \npublic:\n    LoginResult();\n    LoginResult(bool succesfull, LoginResults result);\n    ~LoginResult();\n    String getMessage();\n    bool Succesfull;\n    LoginResults Result;\n    String Message;\n\n};\n\nLoginResult::LoginResult()\n{\n\n}\n\nLoginResult::LoginResult(bool succesfull, LoginResults result): Succesfull(succesfull), Result(result), Message(\"\")\n{\n\n}\n\nLoginResult::~LoginResult()\n{\n}\n\nString LoginResult::getMessage()\n{\n    if (Message != \"\")\n    {\n        return Message;\n    }\n    else\n    {\n        switch(Result)\n        {\n            case LoginResults::Succesfull:\n                return \"Login successful.\";\n            case LoginResults::NeedTwoFactorAuthentication:\n                return \"Two-factor authentication required.\";\n            case LoginResults::UsernameNotExists:\n                return \"Username does not exist.\";\n            case LoginResults::PasswordIsIncorrect:\n                return \"Password is incorrect.\";\n            case LoginResults::WrongUserNameOrPassword:\n                return \"Wrong username or password.\";\n            case LoginResults::UserIsLocked:\n                return \"User account is locked.\";\n            case LoginResults::TowManyAttempts:\n                return \"Too many login attempts.\";\n            case LoginResults::WrongOTPCode:\n                return \"OTP code is incorrect.\";\n            case LoginResults::TwoFactorAuthenticationOtpCodeSent:\n                return \"OTP code for two-factor authentication has been sent.\";\n            case LoginResults::TwoFactorAuthenticationOtpCodeNotSent:\n                return \"Failed to send OTP code for two-factor authentication.\";\n            case LoginResults::LogoutSuccessfull:\n                return \"Logout successful.\";\n            case LoginResults::LogoutUnSuccessfull:\n                return \"Logout unsuccessful.\";\n            case LoginResults::TokenNotSaved:\n                return \"Failed to save token.\";\n            default:\n                return \"Unknown result.\";\n        }\n    }\n}\n\n#endif //LOGINRESULT_H"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Security\\Security.h",
        "content": "#ifndef SECURITY_H\n#define SECURITY_H\n\n#include \"ISecurity.h\"\n#include \"../Context.h\"\n#include \"HMACAuth.h\"\n#include \"LoginResult.h\"\n#include \"../Config/Security/DefaultSecurityConfigs.h\"\n#include \"../Config/Security/SecurityConfigKeys.h\"\n#include \"../Database/Controllers/Security/UserController.h\"\n#include \"../Database/Controllers/Security/PermissionController.h\"\n#include \"../Database/Controllers/Security/RolePermissionController.h\"\n#include \"../Database/Controllers/Security/RoleController.h\"\n\nclass Security : public ISecurity {\nprivate:\n    Context* context;\n    LoginResult isLoginAllowed(UserEntity* user, String password);\n    bool sendTwoFactorSecurityOtpCode(String username);\n    LoginResult createUniqueToken(UserEntity* user);\n    void addPermission(int role_id, String title, String group);\n    LoginResult generateJWT(UserEntity user);\n    bool validateJWT(String jwt);\n    int sysAdmin_role_id;\n    int admin_role_id;\n    char *key;\n    HMACAuth auth;\n    const char *pin = \"6577\";\n    const char *timestamp = \"1156\";\n    const char *SECRET_KEY = \"1111111\";\n\n\n\npublic:\n    Security(Context* context);\n    \n    void initialize() override;\n    void update() override;\n    LoginResult login(String username, String password) override;\n    LoginResult logout(String username) override;\n    bool checkTwoFactorSecurityOtpCode(String username, String otpCode) override;\n    bool checkUserPermission(String username, String permission) override;\n    LoginResult getUserNameFromToken(String token) override;\n    AuthorizationResults checkAuthentication(HTTPRequest * req, HTTPResponse * res, String permission) override;\n    void addPermissionForAdmin(String title, String group) override;\n};\n\nSecurity::Security(Context* context)\n    : context(context) {}\n\nvoid Security::initialize() {\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Initializing Authorization ...\");\n\n    HMACAuth auth(SECRET_KEY);\n\n\n    String sysAdminRole = \"System Admin\";\n    String AdminRole = \"Admin\";\n\n    RoleController* roleController = new RoleController(context, storageType);\n    UserController* userController = new UserController(context, storageType);\n\n    std::vector<RoleEntity> roleEntities = roleController->Get(String(RoleEntity::COLUMN_ROLENAME + \"=\" + sysAdminRole));\n    if (roleEntities.size() == 0)\n    {\n        RoleEntity* role = new RoleEntity(sysAdminRole);\n        sysAdmin_role_id = roleController->Add(*role);\n    }\n    else\n    {\n        sysAdmin_role_id = roleEntities.at(0).id;\n    }\n    \n    roleEntities.clear();\n    roleEntities = roleController->Get(String(RoleEntity::COLUMN_ROLENAME + \"=\" + AdminRole));\n    if (roleEntities.size() == 0)\n    {\n        RoleEntity* role = new RoleEntity(AdminRole);\n        admin_role_id = roleController->Add(*role);\n        context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Admin Permissions Added To Database.\");\n    }\n    else\n    {\n        admin_role_id = roleEntities.at(0).id;\n    }\n    \n    String sysAdminUserName = \"sysAdmin\";\n    String AdminUserName = \"admin\";\n\n    std::vector<UserEntity> users = userController->Get(String(UserEntity::COLUMN_USERNAME + \"=\" + sysAdminUserName));\n    if (users.size() == 0)\n    {\n        UserEntity* user = new UserEntity(sysAdminUserName, \"sysadmin\", \"\", \"\", sysAdmin_role_id, false, \"\", \"\", EBPDateTime::nullDateTime());\n        userController->Add(*user);        \n    }\n\n    users.clear();\n    users = userController->Get(String(UserEntity::COLUMN_USERNAME + \"=\" + AdminUserName));\n    if (users.size() == 0)\n    {\n        UserEntity* user = new UserEntity(AdminUserName, \"admin\", \"\", \"\", admin_role_id, false, \"\", \"\", EBPDateTime::nullDateTime());\n        userController->Add(*user);        \n        context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Admin Users Added To Database.\");\n    }\n    context->getLogger()->log(LogLevel::DEBUG_LEVEL, LogTitles::SYSTEM_BOOT, \"Authorization Initialized.\");\n\n}\n\nvoid Security::update() {\n\n}\n\nLoginResult Security::login(String username, String password)\n{\n    UserController* userController = new UserController(context, storageType);\n    std::vector<UserEntity> users = userController->Get(String(UserEntity::COLUMN_USERNAME + \"=\" + username));\n    if (users.size() > 0)\n    {\n        UserEntity user = users.at(0);\n        LoginResult loginresult = isLoginAllowed(&user, password);\n        if (loginresult.Result == LoginResults::Succesfull)\n        {\n            LoginResult tokenResult = generateJWT(user);\n            user.SetValue(UserEntity::COLUMN_TOKEN, tokenResult.getMessage());\n            userController->Update(user);\n            return tokenResult;\n            // return createUniqueToken(&user);\n        }\n        else if (loginresult.Result == LoginResults::NeedTwoFactorAuthentication)\n        {\n            if (sendTwoFactorSecurityOtpCode(username))\n            {\n                return LoginResult(false, LoginResults::TwoFactorAuthenticationOtpCodeSent);\n            }\n            else{\n                return LoginResult(false, LoginResults::TwoFactorAuthenticationOtpCodeNotSent);\n            }            \n        }\n        else if (loginresult.Result == LoginResults::PasswordIsIncorrect)\n        {\n            return LoginResult(false, LoginResults::WrongUserNameOrPassword);\n        }\n        else if (loginresult.Result == LoginResults::TowManyAttempts)\n        {\n            return loginresult;\n        }\n        else if (loginresult.Result == LoginResults::UserIsLocked)\n        {\n            return loginresult;\n        }        \n    }\n    else{\n        return LoginResult(false, LoginResults::WrongUserNameOrPassword);\n    }\n    return LoginResult(false, LoginResults::WrongUserNameOrPassword);\n}\n\nLoginResult Security::logout(String username)\n{\n    UserController* userController = new UserController(context, storageType);\n    std::vector<UserEntity> users = userController->Get(String(UserEntity::COLUMN_USERNAME + \"=\" + username));\n    if (users.size() > 0)\n    {\n        UserEntity user = users.at(0);\n        user.Token = \"\";\n        if(userController->Update(user))\n        {\n            return LoginResult(true, LoginResults::LogoutSuccessfull);\n        }\n        return LoginResult(false, LoginResults::LogoutUnSuccessfull);\n    }\n    return LoginResult(false, LoginResults::UsernameNotExists);\n}\n\n//check LoginAttepts and AccountLockout\nLoginResult Security::isLoginAllowed(UserEntity* user, String password)\n{\n    if (user->GetValue(UserEntity::COLUMN_PASSWORD) != password)\n    {\n        ///TODO:: add to login attempts\n        return LoginResult(false, LoginResults::PasswordIsIncorrect);\n    }\n    \n    return LoginResult(true, LoginResults::Succesfull);\n}\n\nbool Security::sendTwoFactorSecurityOtpCode(String username)\n{\n    return false;\n}\n\nbool Security::checkTwoFactorSecurityOtpCode(String username, String otpCode)\n{\n    return false;\n}\n\nbool Security::checkUserPermission(String username, String permission)\n{\n    if (username == \"sysAdmin\" || username == \"admin\")\n    {\n        return true;\n    }\n    ///TODO:: check permission for each admin level\n\n    int permissionId;\n    UserEntity user;\n    PermissionController* permissionController = new PermissionController(context, storageType);\n    std::vector<PermissionEntity> permissionEntities = permissionController->Get(String(PermissionEntity::COLUMN_PERMISSIONNAME + \"=\" + permission));\n    UserController* userController = new UserController(context, storageType);\n    \n    std::vector<UserEntity> users = userController->Get(String(UserEntity::COLUMN_USERNAME + \"=\" + username));\n    if (users.size() > 0)\n    {\n        user = users.at(0);\n    }else{\n        return false;\n    }\n\n    if (user.RoleId == 1)\n    {\n        //this is sys admin\n        return true;\n    }\n    \n\n    if (permissionEntities.size()>0)\n    {\n        permissionId = permissionEntities.at(0).id;\n    }else{\n        return false;\n    }\n    RolePermissionController* rolePermissionController = new RolePermissionController(context, storageType);\n    String query = String(RolePermissionEntity::COLUMN_ROLEID + \"=\" + user.GetValue(UserEntity::COLUMN_ROLEID) + \" AND \" + RolePermissionEntity::COLUMN_PERMISSIONID + \"=\" + permissionId);\n    std::vector<RolePermissionEntity> rolePermissionEntities = rolePermissionController->Get(query);\n    \n    if (rolePermissionEntities.size() > 0)\n    {\n        return true;\n    }else{\n        return false;\n    }\n    \n    return false;\n}\n\nLoginResult Security::createUniqueToken(UserEntity* user)\n{\n    String token = \"\";\n    String chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n    for (int i = 0; i < 16; i++) {\n    char randomChar = chars[random(0, chars.length())];\n    token += randomChar;\n    }\n    \n    UserController* userController = new UserController(context, storageType);\n    EBPDateTime expiryDate = context->getClock()->now();\n    expiryDate.addToDateTime(0,0,context->getConfig()->getSecurityConfig()->get(SecurityConfigKey::TOKEN_ACTIVE_DAY).toInt(),0,0,0);\n    user = new UserEntity(user->id, user->GetValue(UserEntity::COLUMN_USERNAME), user->GetValue(UserEntity::COLUMN_PASSWORD), \n        user->GetValue(UserEntity::COLUMN_EMAIL), user->GetValue(UserEntity::COLUMN_PHONENUMBER), user->GetValue(UserEntity::COLUMN_ROLEID).toInt(), \n        boolean(user->GetValue(UserEntity::COLUMN_TWOFACTORAUTH)), user->GetValue(UserEntity::COLUMN_APIKEY), token, expiryDate);\n    if(userController->Update(*user))\n    {\n        LoginResult result = LoginResult(true, LoginResults::UsernameNotExists);\n        result.Message = token;\n        return result;\n    }\n    return LoginResult(false, LoginResults::TokenNotSaved);\n}\n\nLoginResult Security::getUserNameFromToken(String token)\n{\n    UserController* userController = new UserController(context, storageType);\n    std::vector<UserEntity> users = userController->Get(String(UserEntity::COLUMN_TOKEN + \"=\" + token));\n    if (users.size() > 0)\n    {\n        UserEntity user = users.at(0);\n        LoginResult result;\n        if (user.id == 1)\n        {\n            result = LoginResult(true, LoginResults::AdminUser);\n\n        }\n        else\n        {\n            result = LoginResult(true, LoginResults::Succesfull);\n        }\n        \n        result.Message = user.GetValue(UserEntity::COLUMN_USERNAME);\n        return result;\n    }\n    else{\n        return LoginResult(false, LoginResults::UsernameNotExists);\n    }\n\n}\n\n\nAuthorizationResults Security::checkAuthentication(HTTPRequest * req, HTTPResponse * res, String permission)\n{\n\n    bool authenticationEnable = context->getConfig()->getSecurityConfig()->get(SecurityConfigKey::AUTHENTICATION_ENABLE) == \"true\" ? true : false;\n    String username = \"\";\n\n    if(authenticationEnable)\n    {\n        // Check if the request has an Authorization header with the format \"Bearer <token>\"\n        if(req->getHeader(\"Authorization\").substr(0, 7) != \"Bearer \")\n        {\n            response(res, 403, \"text/html\", \"Authorization Header Missing\");\n            return AuthorizationResults::AUTH_HEADER_MISSING;\n        }\n        String authHeader = String(req->getHeader(\"Authorization\").c_str());\n        if(!authHeader.startsWith(\"Bearer \"))\n        {\n            response(res, 403, \"text/html\", \"Invalid Authorization format\");\n            return AuthorizationResults::INVALID_AUTHORIZATION_FORMAT;\n        }\n        String token = authHeader.substring(7); // Extract JWT token after \"Bearer \"\n        \n        if (!validateJWT(token))\n        {\n            response(res, 403, \"text/html\", \"Invalid token\");\n            return AuthorizationResults::INVALID_TOKEN;\n        }\n        \n\n        LoginResult result = getUserNameFromToken(token); // Assuming this function extracts the username from the JWT payload\n        if (result.Result == LoginResults::AdminUser)\n        {\n            return AuthorizationResults::SUCCESFULL;\n        }\n        \n        if (result.Result == LoginResults::UsernameNotExists)\n        {\n            response(res, 403, \"text/html\", result.getMessage());\n            return AuthorizationResults::USER_NOT_EXISTS;\n        }            \n        username = result.getMessage();\n        if (!checkUserPermission(username, permission))\n        {\n            response(res, 403, \"text/html\", \"User does not have the required permission\");\n            return AuthorizationResults::USER_NO_PERMISSION;\n        }\n        return AuthorizationResults::SUCCESFULL;\n    }\n    else\n    {\n        return AuthorizationResults::SUCCESFULL;\n    }\n    response(res, 500, \"text/html\", \"some error happend\");\n    return AuthorizationResults::ERROR;\n}\n\n\nvoid Security::addPermissionForAdmin(String title, String group)\n{\n    addPermission(sysAdmin_role_id, title, group);\n    addPermission(admin_role_id, title, group);\n}\n\nvoid Security::addPermission(int role_id, String title, String group)\n{\n    RolePermissionController* rolePermissionController = new RolePermissionController(context, storageType);\n    PermissionController* permissionController = new PermissionController(context, storageType);\n\n    std::vector<PermissionEntity> permissions = permissionController->Get(String(PermissionEntity::COLUMN_PERMISSIONGROUP + \"=\") + String(group + \" AND \") + String(PermissionEntity::COLUMN_PERMISSIONNAME + \"=\")+title);\n    if (permissions.size() > 0)\n    {\n        return;\n    }\n        \n    RolePermissionEntity* rolePermission;\n    PermissionEntity* permission;\n    \n    permission = new PermissionEntity(title, group);\n    \n    int permission_id = permissionController->Add(*permission);\n\n    rolePermission = new RolePermissionEntity(role_id, permission_id);\n\n    rolePermissionController->Add(*rolePermission);\n}\n\nLoginResult Security::generateJWT(UserEntity user) {\n    // Construct the payload string using the provided username\n    String payload = user.GetValue(UserEntity::COLUMN_USERNAME);\n    // For now, let's assume pin is static. You can modify this\n    \n    // Initialize the hash with SECRET_KEY\n    HMACAuth auth(SECRET_KEY);\n    \n    // Update hash with payload and pin\n    auth.updateHash(payload.c_str());\n    auth.updateHash(pin);\n\n    // Finalize and get the hashed and encoded result\n    String jwtResult = auth.finalizeHash();\n    \n    // Assuming you store this result in the user entity or wherever necessary\n    LoginResult loginResult = LoginResult(true, LoginResults::Succesfull);\n    loginResult.Message = jwtResult;\n    \n    return loginResult;\n}\n\nbool Security::validateJWT(String jwtString) {\n    // Decode from Base64\n    return true;\n    unsigned char decodedOutput[65];\n    size_t decodedLength;\n    mbedtls_base64_decode(decodedOutput, sizeof(decodedOutput), &decodedLength, (unsigned char *)jwtString.c_str(), jwtString.length());\n    \n    // Extract payload from decoded value (assuming it's the first part)\n    String payload = String((char *)decodedOutput).substring(0, jwtString.length() - strlen(\"6577\"));  // Adjust as per actual structure\n    \n    // Recompute hash\n    HMACAuth auth(SECRET_KEY);\n\n    auth.updateHash(payload.c_str());\n    auth.updateHash(\"6577\"); // Assuming pin is static\n    String recomputedJWT = auth.finalizeHash();\n    \n    return jwtString == recomputedJWT;\n}\n#endif //SECURITY_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\SheduleManager\\ScheduleManager.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\SystemMonitor\\ISystemMonitor.h",
        "content": "#ifndef ISYSTEM_MONITOR_H\n#define ISYSTEM_MONITOR_H\n\n#include \"Esp.h\"\n#include \"LittleFS.h\"\n#include \"SD.h\"\n#include \"ArduinoJson.h\"\n\nstruct StorageInfo {\n    size_t totalBytes;\n    size_t usedBytes;\n};\n\nclass ISystemMonitor {\npublic:\n    virtual ~ISystemMonitor() {}\n\n    // CPU info\n    virtual uint8_t getChipCores() = 0;\n    virtual uint8_t getChipRevision() = 0;\n    virtual const char* getChipModel() = 0;\n    virtual const char* getSdkVersion() = 0;\n    virtual uint32_t getFlashChipSize() = 0;\n    virtual uint32_t getFlashChipSpeed() = 0;\n    virtual FlashMode_t getFlashChipMode() = 0;\n    virtual uint64_t getEfuseMac() = 0;\n\n    // RAM info\n    virtual uint32_t getHeapSize() = 0;\n    virtual uint32_t getFreeHeap() = 0;\n    virtual uint32_t getMinFreeHeap() = 0;\n    virtual uint32_t getMaxAllocHeap() = 0;\n\n    // SPIRAM info\n    virtual uint32_t getPsramSize() = 0;\n    virtual uint32_t getFreePsram() = 0;\n    virtual uint32_t getMinFreePsram() = 0;\n    virtual uint32_t getMaxAllocPsram() = 0;\n\n    // Sketch info\n    virtual uint32_t getSketchSize() = 0;\n    virtual uint32_t getFreeSketchSpace() = 0;\n    virtual String getSketchMD5() = 0;\n\n    // File system info\n    virtual StorageInfo getLittleFSInfo() = 0;\n    virtual StorageInfo getSDInfo() = 0;\n\n    // Uptime info\n    virtual unsigned long getUptime() = 0;\n\n    virtual String getSystemMonitorJson() = 0;\n\n};\n\n#endif // ISYSTEM_MONITOR_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\SystemMonitor\\SystemMonitor.h",
        "content": "#ifndef SYSTEM_MONITOR_H\n#define SYSTEM_MONITOR_H\n\n#include \"ISystemMonitor.h\"\n#include \"SD.h\"\n\nclass SystemMonitor : public ISystemMonitor {\npublic:\n    SystemMonitor();\n\n    // CPU info\n    virtual uint8_t getChipCores() override;\n    virtual uint8_t getChipRevision() override;\n    virtual const char* getChipModel() override;\n    virtual const char* getSdkVersion() override;\n    virtual uint32_t getFlashChipSize() override;\n    virtual uint32_t getFlashChipSpeed() override;\n    virtual FlashMode_t getFlashChipMode() override;\n    virtual uint64_t getEfuseMac() override;\n\n    // RAM info\n    virtual uint32_t getHeapSize() override;\n    virtual uint32_t getFreeHeap() override;\n    virtual uint32_t getMinFreeHeap() override;\n    virtual uint32_t getMaxAllocHeap() override;\n\n    // SPIRAM info\n    virtual uint32_t getPsramSize() override;\n    virtual uint32_t getFreePsram() override;\n    virtual uint32_t getMinFreePsram() override;\n    virtual uint32_t getMaxAllocPsram() override;\n\n    // Sketch info\n    virtual uint32_t getSketchSize() override;\n    virtual uint32_t getFreeSketchSpace() override;\n    virtual String getSketchMD5() override;\n\n    // File system info\n    virtual StorageInfo getLittleFSInfo() override;\n    virtual StorageInfo getSDInfo() override;\n\n    // Uptime info\n    virtual unsigned long getUptime() override;\n\n    virtual String getSystemMonitorJson() override;\n\n\nprivate:\n\n};\n\nSystemMonitor::SystemMonitor() {}\n\n// CPU info\nuint8_t SystemMonitor::getChipCores() {\n    return ESP.getCpuFreqMHz();\n}\n\nuint8_t SystemMonitor::getChipRevision() {\n    return ESP.getChipRevision();\n}\n\nconst char* SystemMonitor::getChipModel() {\n    return ESP.getChipModel();\n}\n\nconst char* SystemMonitor::getSdkVersion() {\n    return ESP.getSdkVersion();\n}\n\nuint32_t SystemMonitor::getFlashChipSize() {\n    return ESP.getFlashChipSize();\n}\n\nuint32_t SystemMonitor::getFlashChipSpeed() {\n    return ESP.getFlashChipSpeed();\n}\n\nFlashMode_t SystemMonitor::getFlashChipMode() {\n    return ESP.getFlashChipMode();\n}\n\nuint64_t SystemMonitor::getEfuseMac() {\n    return ESP.getEfuseMac();\n}\n\n// RAM info\nuint32_t SystemMonitor::getHeapSize() {\n    return ESP.getHeapSize();\n}\n\nuint32_t SystemMonitor::getFreeHeap() {\n    return ESP.getFreeHeap();\n}\n\nuint32_t SystemMonitor::getMinFreeHeap() {\n    return ESP.getMinFreeHeap();\n}\n\nuint32_t SystemMonitor::getMaxAllocHeap() {\n    return ESP.getMaxAllocHeap();\n}\n\n// SPIRAM info\nuint32_t SystemMonitor::getPsramSize() {\n    return ESP.getPsramSize();\n}\n\nuint32_t SystemMonitor::getFreePsram() {\n    return ESP.getFreePsram();\n}\n\nuint32_t SystemMonitor::getMinFreePsram() {\n    return ESP.getMinFreePsram();\n}\n\nuint32_t SystemMonitor::getMaxAllocPsram() {\n    return ESP.getMaxAllocPsram();\n}\n\n// Sketch info\nuint32_t SystemMonitor::getSketchSize() {\n    return ESP.getSketchSize();\n}\n\nuint32_t SystemMonitor::getFreeSketchSpace() {\n    return ESP.getFreeSketchSpace();\n}\n\nString SystemMonitor::getSketchMD5() {\n    return ESP.getSketchMD5();\n}\n\nStorageInfo SystemMonitor::getLittleFSInfo() {\n    StorageInfo fs_info;\n    fs_info.totalBytes = LittleFS.totalBytes();\n    fs_info.usedBytes = LittleFS.usedBytes();\n    return fs_info;\n}\n\n\nStorageInfo SystemMonitor::getSDInfo() {\n    StorageInfo fs_info;\n    fs_info.totalBytes = SD.totalBytes();\n    fs_info.usedBytes = SD.usedBytes();\n    return fs_info;\n}\n\n// Uptime info\nunsigned long SystemMonitor::getUptime() {\n    return millis();\n}\n\nString SystemMonitor::getSystemMonitorJson() {\n    DynamicJsonDocument doc(1024);\n\n    // CPU info\n    doc[\"cpu\"][\"cores\"] = getChipCores();\n    doc[\"cpu\"][\"revision\"] = getChipRevision();\n    doc[\"cpu\"][\"model\"] = getChipModel();\n    doc[\"cpu\"][\"sdk_version\"] = getSdkVersion();\n    doc[\"cpu\"][\"flash_chip_size\"] = getFlashChipSize();\n    doc[\"cpu\"][\"flash_chip_speed\"] = getFlashChipSpeed();\n    doc[\"cpu\"][\"flash_chip_mode\"] = getFlashChipMode();\n    doc[\"cpu\"][\"efuse_mac\"] = getEfuseMac();\n\n    // RAM info\n    doc[\"ram\"][\"heap_size\"] = getHeapSize();\n    doc[\"ram\"][\"free_heap\"] = getFreeHeap();\n    doc[\"ram\"][\"min_free_heap\"] = getMinFreeHeap();\n    doc[\"ram\"][\"max_alloc_heap\"] = getMaxAllocHeap();\n\n    // SPIRAM info\n    doc[\"spiram\"][\"psram_size\"] = getPsramSize();\n    doc[\"spiram\"][\"free_psram\"] = getFreePsram();\n    doc[\"spiram\"][\"min_free_psram\"] = getMinFreePsram();\n    doc[\"spiram\"][\"max_alloc_psram\"] = getMaxAllocPsram();\n\n    // Sketch info\n    doc[\"sketch\"][\"size\"] = getSketchSize();\n    doc[\"sketch\"][\"free_space\"] = getFreeSketchSpace();\n    doc[\"sketch\"][\"md5\"] = getSketchMD5();\n\n    // File system info\n    doc[\"spiffs\"][\"total_bytes\"] = getLittleFSInfo().totalBytes;\n    doc[\"spiffs\"][\"used_bytes\"] = getLittleFSInfo().usedBytes;\n    doc[\"sd\"][\"total_bytes\"] = getSDInfo().totalBytes;\n    doc[\"sd\"][\"used_bytes\"] = getSDInfo().usedBytes;\n\n    // Uptime info\n    doc[\"uptime\"] = getUptime();\n\n    String output;\n    serializeJson(doc, output);\n    return output;\n}\n#endif // SYSTEM_MONITOR_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Tests\\EntityControllerTests.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Tests\\MainControllerTest.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Tests\\Test.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Theme\\Theme.h",
        "content": ""
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Validation\\IValidation.h",
        "content": "// IValidation.h\n\n#ifndef IVALIDATION_H\n#define IVALIDATION_H\n\n#include <string>\n\nclass IValidation {\npublic:\n    virtual ~IValidation() {}\n\n    virtual bool validateEmail(const String& email) = 0;\n    virtual bool validateUsername(const String& username) = 0;\n    virtual bool isColumnNameValid(const String& columnName) = 0;\n    // Add more validation methods as needed\n};\n\n#endif // IVALIDATION_H\n"
    },
    {
        "path": "C:\\Users\\AIVWA 1\\Documents\\Arduino\\libraries\\OStad\\src\\Validation\\Validation.h",
        "content": "// Validation.h\n\n#ifndef VALIDATION_H\n#define VALIDATION_H\n\n#include <string>\n#include <regex>\n#include \"IValidation.h\"\n\nclass Validation : public IValidation {\npublic:\n    Validation()\n    {\n        \n    }\n    bool validateEmail(const String& email) override {\n        // Implement email validation logic here.\n        // For example, use a simple regex pattern:\n        // std::regex emailPattern(\"(\\\\w+)(\\\\.|_)?(\\\\w*)@(\\\\w+)(\\\\.(\\\\w+))+\");\n        // return std::regex_match(email, emailPattern);\n        return true;\n    }\n\n    bool validateUsername(const String& username) override {\n        // Implement username validation logic here.\n        // For example, check if the username length is between 3 and 20 characters:\n        return (username.length() >= 3 && username.length() <= 20);\n    }\n\n    bool isColumnNameValid(const String& columnName) override {\n        // Implement column name validation logic here.\n        // For example, check if the column name is \"id\" or \"name\":\n        // return (columnName == \"id\" || columnName == \"name\");\n        return true;\n    }\n\n    // Add more validation methods as needed\n};\n\n#endif // VALIDATION_H\n"
    }
]